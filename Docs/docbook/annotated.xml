<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Data Structures</title>
Here are the data structures with brief descriptions:<link linkend="_struct____iar__u32">__iar_u32</link><link linkend="_struct___a_d_c___channel__">_ADC_Channel_</link>
<para>This sturct is used in ADC_Configuration struct. Encapsulates all the necessary configurations needed for any ADC channel </para>
<link linkend="_struct___a_d_c___channel___enable___disable__">_ADC_Channel_Enable_Disable_</link>
<para>This sturct is used in <emphasis>ADC_Channel</emphasis> struct. Used to enable or disable a particular Channel of the ADC </para>
<link linkend="_struct___a_d_c___channel___sample___time__">_ADC_Channel_Sample_Time_</link>
<para>This struct provides an easy way for the user to set the sample time of a channel. All the options when selected will have an additional 12 cycles added to them in the hardware. So <emphasis>3_Cycles is selected by the user, then total cycles taken to complete one conversion of that channel will be 3+12 = 15 cycles. Is used in _ADC_Channel</emphasis> struct </para>
<link linkend="_struct___a_d_c___channel___sequence___number__">_ADC_Channel_Sequence_Number_</link>
<para>This sturct is used in <emphasis>ADC_Channel</emphasis> struct. Used to enable or disable a particular Channel of the ADC </para>
<link linkend="_struct___u_s_a_r_t___d_m_a___enable___type">_USART_DMA_Enable_Type</link><link linkend="_struct___u_s_a_r_t___frame___length___type">_USART_Frame_Length_Type</link><link linkend="_struct___u_s_a_r_t___hardware___flow___type">_USART_Hardware_Flow_Type</link><link linkend="_struct___u_s_a_r_t___interrupt___type">_USART_Interrupt_Type</link><link linkend="_struct___u_s_a_r_t___mode___type">_USART_Mode_Type</link><link linkend="_struct___u_s_a_r_t___parity___type">_USART_Parity_Type</link><link linkend="_struct___u_s_a_r_t___stop___bits">_USART_Stop_Bits</link><link linkend="_struct_a_d_c___configuration_1_1___watchdog___analog__">ADC_Configuration::_Watchdog_Analog_</link><link linkend="_struct_a_d_c___channel___type">ADC_Channel_Type</link><link linkend="_struct_a_d_c___common___type_def">ADC_Common_TypeDef</link><link linkend="_struct_a_d_c___config">ADC_Config</link><link linkend="_struct_a_d_c___mode">ADC_Mode</link>
<para>This struct helps select the mode in which the conversions will happen </para>
<link linkend="_struct_a_d_c___pin">ADC_Pin</link><link linkend="_struct_a_d_c___type_def">ADC_TypeDef</link>
<para>Analog to Digital Converter </para>
<link linkend="_union_a_p_s_r___type">APSR_Type</link>
<para>Union type to access the Application Program Status Register (APSR) </para>
<link linkend="_struct_a_r_m___m_p_u___region__t">ARM_MPU_Region_t</link><link linkend="_struct_c_a_n___f_i_f_o_mail_box___type_def">CAN_FIFOMailBox_TypeDef</link>
<para>Controller Area Network FIFOMailBox </para>
<link linkend="_struct_c_a_n___filter_register___type_def">CAN_FilterRegister_TypeDef</link>
<para>Controller Area Network FilterRegister </para>
<link linkend="_struct_c_a_n___tx_mail_box___type_def">CAN_TxMailBox_TypeDef</link>
<para>Controller Area Network TxMailBox </para>
<link linkend="_struct_c_a_n___type_def">CAN_TypeDef</link>
<para>Controller Area Network </para>
<link linkend="_struct_a_d_c___configuration_1_1___watchdog___analog___1_1_channel___scan">ADC_Configuration::_Watchdog_Analog_::Channel_Scan</link><link linkend="_struct_d_m_a___configuration_1_1_circular___mode">DMA_Configuration::Circular_Mode</link><link linkend="_union_c_o_n_t_r_o_l___type">CONTROL_Type</link>
<para>Union type to access the Control Registers (CONTROL) </para>
<link linkend="_struct_core_debug___type">CoreDebug_Type</link>
<para>Structure type to access the Core Debug Register (CoreDebug) </para>
<link linkend="_struct_c_r_c___type_def">CRC_TypeDef</link>
<para>CRC calculation unit </para>
<link linkend="_struct_d_a_c___type_def">DAC_TypeDef</link>
<para>Digital to Analog Converter </para>
<link linkend="_struct_a_d_c___configuration_1_1_data___alignment">ADC_Configuration::Data_Alignment</link><link linkend="_struct_d_b_g_m_c_u___type_def">DBGMCU_TypeDef</link>
<para>Debug MCU </para>
<link linkend="_struct_d_c_b___type">DCB_Type</link>
<para>Structure type to access the Debug Control Block Registers (DCB) </para>
<link linkend="_struct_d_c_m_i___type_def">DCMI_TypeDef</link>
<para>DCMI </para>
<link linkend="_struct_d_i_b___type">DIB_Type</link>
<para>Structure type to access the Debug Identification Block Registers (DIB) </para>
<link linkend="_struct_d_m_a___config">DMA_Config</link><link linkend="_struct_d_m_a___flags___typedef">DMA_Flags_Typedef</link><link linkend="_struct_d_m_a___configuration_1_1_d_m_a___interrupts">DMA_Configuration::DMA_Interrupts</link><link linkend="_struct_d_m_a___request">DMA_Request</link><link linkend="_struct_d_m_a___stream___type_def">DMA_Stream_TypeDef</link>
<para>DMA Controller </para>
<link linkend="_struct_d_m_a___type_def">DMA_TypeDef</link><link linkend="_struct_d_w_t___type">DWT_Type</link>
<para>Structure type to access the Data Watchpoint and Trace Register (DWT) </para>
<link linkend="_struct_e_m_s_s___type">EMSS_Type</link><link linkend="_struct_err_bnk___type">ErrBnk_Type</link>
<para>Structure type to access the Error Banking Registers (ERRBNK) </para>
<link linkend="_struct_e_t_h___type_def">ETH_TypeDef</link>
<para>Ethernet MAC </para>
<link linkend="_struct_e_w_i_c___type">EWIC_Type</link>
<para>Structure type to access the External Wakeup Interrupt Controller Registers (EWIC) </para>
<link linkend="_struct_a_d_c___config_1_1_external___trigger">ADC_Config::External_Trigger</link><link linkend="_struct_e_x_t_i___type_def">EXTI_TypeDef</link>
<para>External Interrupt/Event Controller </para>
<link linkend="_struct_f_l_a_s_h___type_def">FLASH_TypeDef</link>
<para>FLASH Registers </para>
<link linkend="_struct_d_m_a___configuration_1_1_flow___control">DMA_Configuration::Flow_Control</link><link linkend="_struct_f_p_u___type">FPU_Type</link>
<para>Structure type to access the Floating Point Unit (FPU) </para>
<link linkend="_struct_f_s_m_c___bank1___type_def">FSMC_Bank1_TypeDef</link>
<para>Flexible Static Memory Controller </para>
<link linkend="_struct_f_s_m_c___bank1_e___type_def">FSMC_Bank1E_TypeDef</link>
<para>Flexible Static Memory Controller Bank1E </para>
<link linkend="_struct_f_s_m_c___bank2__3___type_def">FSMC_Bank2_3_TypeDef</link>
<para>Flexible Static Memory Controller Bank2 </para>
<link linkend="_struct_f_s_m_c___bank4___type_def">FSMC_Bank4_TypeDef</link>
<para>Flexible Static Memory Controller Bank4 </para>
<link linkend="_struct_g_p_i_o___alternate___function">GPIO_Alternate_Function</link><link linkend="_struct_g_p_i_o___interrupt___edge">GPIO_Interrupt_Edge</link><link linkend="_struct_g_p_i_o___mode___type">GPIO_Mode_Type</link><link linkend="_struct_g_p_i_o___output___type">GPIO_Output_Type</link><link linkend="_struct_g_p_i_o___pin">GPIO_Pin</link><link linkend="_struct_g_p_i_o___pull">GPIO_Pull</link><link linkend="_struct_g_p_i_o___speed">GPIO_Speed</link><link linkend="_struct_g_p_i_o___type_def">GPIO_TypeDef</link>
<para>General Purpose I/O </para>
<link linkend="_struct_i2_c___type_def">I2C_TypeDef</link>
<para>Inter-integrated Circuit Interface </para>
<link linkend="_struct_i_c_b___type">ICB_Type</link>
<para>Structure type to access the Implementation Control Block (ICB) </para>
<link linkend="_struct_a_d_c___configuration_1_1_injected___external___trigger___event">ADC_Configuration::Injected_External_Trigger_Event</link><link linkend="_struct_interrupts">Interrupts</link><link linkend="_union_i_p_s_r___type">IPSR_Type</link>
<para>Union type to access the Interrupt Program Status Register (IPSR) </para>
<link linkend="_struct_i_t_m___type">ITM_Type</link>
<para>Structure type to access the Instrumentation Trace Macrocell Register (ITM) </para>
<link linkend="_struct_i_w_d_g___type_def">IWDG_TypeDef</link>
<para>Independent WATCHDOG </para>
<link linkend="_struct_d_m_a___configuration_1_1_memory___data___size">DMA_Configuration::Memory_Data_Size</link><link linkend="_struct_d_m_a___configuration_1_1_memory___pointer___increment">DMA_Configuration::Memory_Pointer_Increment</link><link linkend="_struct_mem_sys_ctl___type">MemSysCtl_Type</link>
<para>Structure type to access the Memory System Control Registers (MEMSYSCTL) </para>
<link linkend="_struct_m_p_u___type">MPU_Type</link>
<para>Structure type to access the Memory Protection Unit (MPU) </para>
<link linkend="_struct_n_v_i_c___type">NVIC_Type</link>
<para>Structure type to access the Nested Vectored Interrupt Controller (NVIC) </para>
<link linkend="_struct_d_m_a___configuration_1_1_peripheral___data___size">DMA_Configuration::Peripheral_Data_Size</link><link linkend="_struct_d_m_a___configuration_1_1_peripheral___pointer___increment">DMA_Configuration::Peripheral_Pointer_Increment</link><link linkend="_struct_a_d_c___configuration_1_1_port">ADC_Configuration::Port</link><link linkend="_struct_prc_cfg_inf___type">PrcCfgInf_Type</link>
<para>Structure type to access the Processor Configuration Information Registerss (PRCCFGINF) </para>
<link linkend="_struct_d_m_a___configuration_1_1_priority___level">DMA_Configuration::Priority_Level</link><link linkend="_struct_p_w_r___type_def">PWR_TypeDef</link>
<para>Power Control </para>
<link linkend="_struct_pwr_mod_ctl___type">PwrModCtl_Type</link>
<para>Structure type to access the Power Mode Control Registers (PWRMODCTL) </para>
<link linkend="_struct_r_c_c___type_def">RCC_TypeDef</link>
<para>Reset and Clock Control </para>
<link linkend="_struct_a_d_c___configuration_1_1_regular___external___trigger___enable">ADC_Configuration::Regular_External_Trigger_Enable</link><link linkend="_struct_a_d_c___configuration_1_1_regular___external___trigger___event">ADC_Configuration::Regular_External_Trigger_Event</link><link linkend="_struct_d_m_a___configuration_1_1_request">DMA_Configuration::Request</link><link linkend="_struct_a_d_c___configuration_1_1_resolution">ADC_Configuration::Resolution</link><link linkend="_struct_r_n_g___type_def">RNG_TypeDef</link>
<para>RNG </para>
<link linkend="_struct_r_t_c___type_def">RTC_TypeDef</link>
<para>Real-Time Clock </para>
<link linkend="_struct_s_c_b___type">SCB_Type</link>
<para>Structure type to access the System Control Block (SCB) </para>
<link linkend="_struct_s_cn_s_c_b___type">SCnSCB_Type</link>
<para>Structure type to access the System Control and ID Register not in the SCB </para>
<link linkend="_struct_s_d_i_o___type_def">SDIO_TypeDef</link>
<para>SD host Interface </para>
<link linkend="_struct_s_p_i___type_def">SPI_TypeDef</link>
<para>Serial Peripheral Interface </para>
<link linkend="_struct_s_t_l___type">STL_Type</link>
<para>Structure type to access the Software Test Library Observation Registerss (STL) </para>
<link linkend="_struct_s_y_s_c_f_g___type_def">SYSCFG_TypeDef</link>
<para>System configuration controller </para>
<link linkend="_struct_sys_tick___type">SysTick_Type</link>
<para>Structure type to access the System Timer (SysTick) </para>
<link linkend="_struct_t_i_m___type_def">TIM_TypeDef</link>
<para>TIM </para>
<link linkend="_struct_t_p_i___type">TPI_Type</link>
<para>Structure type to access the Trace Port Interface Register (TPI) </para>
<link linkend="_struct_d_m_a___configuration_1_1_transfer___direction">DMA_Configuration::Transfer_Direction</link><link linkend="_struct_u_s_a_r_t___config">USART_Config</link><link linkend="_struct_u_s_a_r_t___type_def">USART_TypeDef</link>
<para>Universal Synchronous Asynchronous Receiver Transmitter </para>
<link linkend="_struct_u_s_b___o_t_g___device_type_def">USB_OTG_DeviceTypeDef</link>
<para>USB_OTG_device_Registers </para>
<link linkend="_struct_u_s_b___o_t_g___global_type_def">USB_OTG_GlobalTypeDef</link>
<para>USB_OTG_Core_Registers </para>
<link linkend="_struct_u_s_b___o_t_g___host_channel_type_def">USB_OTG_HostChannelTypeDef</link>
<para>USB_OTG_Host_Channel_Specific_Registers </para>
<link linkend="_struct_u_s_b___o_t_g___host_type_def">USB_OTG_HostTypeDef</link>
<para>USB_OTG_Host_Mode_Register_Structures </para>
<link linkend="_struct_u_s_b___o_t_g___i_n_endpoint_type_def">USB_OTG_INEndpointTypeDef</link>
<para>USB_OTG_IN_Endpoint-Specific_Register </para>
<link linkend="_struct_u_s_b___o_t_g___o_u_t_endpoint_type_def">USB_OTG_OUTEndpointTypeDef</link>
<para>USB_OTG_OUT_Endpoint-Specific_Registers </para>
<link linkend="_struct_a_d_c___config_1_1_watchdog___analog">ADC_Config::Watchdog_Analog</link><link linkend="_struct_w_w_d_g___type_def">WWDG_TypeDef</link>
<para>Window WATCHDOG </para>
<link linkend="_unionx_p_s_r___type">xPSR_Type</link>
<para>Union type to access the Special-Purpose Program Status Registers (xPSR) </para>
</section>
