<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_cmsis__gcc_8h_source" xml:lang="en-US">
<title>cmsis_gcc.h</title>
<indexterm><primary>Inc/cmsis_gcc.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_cmsis__gcc_8h_source_1l00001"/>00001 <emphasis role="comment">/**************************************************************************/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00007"/>00007 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00008"/>00008 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;2009-2021&#32;Arm&#32;Limited.&#32;All&#32;rights&#32;reserved.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00009"/>00009 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00010"/>00010 <emphasis role="comment">&#32;*&#32;SPDX-License-Identifier:&#32;Apache-2.0</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00011"/>00011 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00012"/>00012 <emphasis role="comment">&#32;*&#32;Licensed&#32;under&#32;the&#32;Apache&#32;License,&#32;Version&#32;2.0&#32;(the&#32;License);&#32;you&#32;may</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00013"/>00013 <emphasis role="comment">&#32;*&#32;not&#32;use&#32;this&#32;file&#32;except&#32;in&#32;compliance&#32;with&#32;the&#32;License.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00014"/>00014 <emphasis role="comment">&#32;*&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00016"/>00016 <emphasis role="comment">&#32;*&#32;www.apache.org/licenses/LICENSE-2.0</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00017"/>00017 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00018"/>00018 <emphasis role="comment">&#32;*&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00019"/>00019 <emphasis role="comment">&#32;*&#32;distributed&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;AS&#32;IS&#32;BASIS,&#32;WITHOUT</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00020"/>00020 <emphasis role="comment">&#32;*&#32;WARRANTIES&#32;OR&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00021"/>00021 <emphasis role="comment">&#32;*&#32;See&#32;the&#32;License&#32;for&#32;the&#32;specific&#32;language&#32;governing&#32;permissions&#32;and</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00022"/>00022 <emphasis role="comment">&#32;*&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00023"/>00023 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00024"/>00024 
<anchor xml:id="_cmsis__gcc_8h_source_1l00025"/>00025 <emphasis role="preprocessor">#ifndef&#32;__CMSIS_GCC_H</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00026"/>00026 <emphasis role="preprocessor">#define&#32;__CMSIS_GCC_H</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00027"/>00027 
<anchor xml:id="_cmsis__gcc_8h_source_1l00028"/>00028 <emphasis role="comment">/*&#32;ignore&#32;some&#32;GCC&#32;warnings&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00029"/>00029 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00030"/>00030 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wsign-conversion&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00031"/>00031 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wconversion&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00032"/>00032 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-parameter&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00033"/>00033 
<anchor xml:id="_cmsis__gcc_8h_source_1l00034"/>00034 <emphasis role="comment">/*&#32;Fallback&#32;for&#32;__has_builtin&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00035"/>00035 <emphasis role="preprocessor">#ifndef&#32;__has_builtin</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00036"/>00036 <emphasis role="preprocessor">&#32;&#32;#define&#32;__has_builtin(x)&#32;(0)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00037"/>00037 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00038"/>00038 
<anchor xml:id="_cmsis__gcc_8h_source_1l00039"/>00039 <emphasis role="comment">/*&#32;CMSIS&#32;compiler&#32;specific&#32;defines&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00040"/>00040 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__ASM</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00041"/>00041 <emphasis role="preprocessor">&#32;&#32;#define&#32;__ASM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asm</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00042"/>00042 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00043"/>00043 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__INLINE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00044"/>00044 <emphasis role="preprocessor">&#32;&#32;#define&#32;__INLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00045"/>00045 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00046"/>00046 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__STATIC_INLINE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00047"/>00047 <emphasis role="preprocessor">&#32;&#32;#define&#32;__STATIC_INLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;inline</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00048"/>00048 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00049"/>00049 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__STATIC_FORCEINLINE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00050"/>00050 <emphasis role="preprocessor">&#32;&#32;#define&#32;__STATIC_FORCEINLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((always_inline))&#32;static&#32;inline</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00051"/>00051 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00052"/>00052 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__NO_RETURN</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00053"/>00053 <emphasis role="preprocessor">&#32;&#32;#define&#32;__NO_RETURN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((__noreturn__))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00054"/>00054 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00055"/>00055 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__USED</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00056"/>00056 <emphasis role="preprocessor">&#32;&#32;#define&#32;__USED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((used))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00057"/>00057 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00058"/>00058 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__WEAK</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00059"/>00059 <emphasis role="preprocessor">&#32;&#32;#define&#32;__WEAK&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((weak))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00060"/>00060 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00061"/>00061 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__PACKED</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00062"/>00062 <emphasis role="preprocessor">&#32;&#32;#define&#32;__PACKED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((packed,&#32;aligned(1)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00063"/>00063 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00064"/>00064 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__PACKED_STRUCT</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00065"/>00065 <emphasis role="preprocessor">&#32;&#32;#define&#32;__PACKED_STRUCT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;__attribute__((packed,&#32;aligned(1)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00066"/>00066 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00067"/>00067 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__PACKED_UNION</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00068"/>00068 <emphasis role="preprocessor">&#32;&#32;#define&#32;__PACKED_UNION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;union&#32;__attribute__((packed,&#32;aligned(1)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00069"/>00069 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00070"/>00070 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__UNALIGNED_UINT32&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;deprecated&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00071"/>00071 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00072"/>00072 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpacked&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00073"/>00073 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wattributes&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00074"/>00074 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96">__attribute__</link>((packed))&#32;T_UINT32&#32;{&#32;uint32_t&#32;v;&#32;};
<anchor xml:id="_cmsis__gcc_8h_source_1l00075"/>00075 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00076"/>00076 <emphasis role="preprocessor">&#32;&#32;#define&#32;__UNALIGNED_UINT32(x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((struct&#32;T_UINT32&#32;*)(x))-&gt;v)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00077"/>00077 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00078"/>00078 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__UNALIGNED_UINT16_WRITE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00079"/>00079 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00080"/>00080 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpacked&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00081"/>00081 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wattributes&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00082"/>00082 &#32;&#32;__PACKED_STRUCT&#32;T_UINT16_WRITE&#32;{&#32;uint16_t&#32;v;&#32;};
<anchor xml:id="_cmsis__gcc_8h_source_1l00083"/>00083 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00084"/>00084 <emphasis role="preprocessor">&#32;&#32;#define&#32;__UNALIGNED_UINT16_WRITE(addr,&#32;val)&#32;&#32;&#32;&#32;(void)((((struct&#32;T_UINT16_WRITE&#32;*)(void&#32;*)(addr))-&gt;v)&#32;=&#32;(val))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00085"/>00085 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00086"/>00086 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__UNALIGNED_UINT16_READ</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00087"/>00087 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00088"/>00088 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpacked&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00089"/>00089 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wattributes&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00090"/>00090 &#32;&#32;__PACKED_STRUCT&#32;T_UINT16_READ&#32;{&#32;uint16_t&#32;v;&#32;};
<anchor xml:id="_cmsis__gcc_8h_source_1l00091"/>00091 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00092"/>00092 <emphasis role="preprocessor">&#32;&#32;#define&#32;__UNALIGNED_UINT16_READ(addr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((const&#32;struct&#32;T_UINT16_READ&#32;*)(const&#32;void&#32;*)(addr))-&gt;v)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00093"/>00093 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00094"/>00094 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__UNALIGNED_UINT32_WRITE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00095"/>00095 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00096"/>00096 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpacked&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00097"/>00097 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wattributes&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00098"/>00098 &#32;&#32;__PACKED_STRUCT&#32;T_UINT32_WRITE&#32;{&#32;uint32_t&#32;v;&#32;};
<anchor xml:id="_cmsis__gcc_8h_source_1l00099"/>00099 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00100"/>00100 <emphasis role="preprocessor">&#32;&#32;#define&#32;__UNALIGNED_UINT32_WRITE(addr,&#32;val)&#32;&#32;&#32;&#32;(void)((((struct&#32;T_UINT32_WRITE&#32;*)(void&#32;*)(addr))-&gt;v)&#32;=&#32;(val))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00101"/>00101 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00102"/>00102 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__UNALIGNED_UINT32_READ</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00103"/>00103 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00104"/>00104 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpacked&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00105"/>00105 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wattributes&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00106"/>00106 &#32;&#32;__PACKED_STRUCT&#32;T_UINT32_READ&#32;{&#32;uint32_t&#32;v;&#32;};
<anchor xml:id="_cmsis__gcc_8h_source_1l00107"/>00107 <emphasis role="preprocessor">&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00108"/>00108 <emphasis role="preprocessor">&#32;&#32;#define&#32;__UNALIGNED_UINT32_READ(addr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((const&#32;struct&#32;T_UINT32_READ&#32;*)(const&#32;void&#32;*)(addr))-&gt;v)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00109"/>00109 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00110"/>00110 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__ALIGNED</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00111"/>00111 <emphasis role="preprocessor">&#32;&#32;#define&#32;__ALIGNED(x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((aligned(x)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00112"/>00112 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00113"/>00113 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__RESTRICT</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00114"/>00114 <emphasis role="preprocessor">&#32;&#32;#define&#32;__RESTRICT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__restrict</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00115"/>00115 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00116"/>00116 <emphasis role="preprocessor">#ifndef&#32;&#32;&#32;__COMPILER_BARRIER</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00117"/>00117 <emphasis role="preprocessor">&#32;&#32;#define&#32;__COMPILER_BARRIER()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM&#32;volatile(&quot;&quot;:::&quot;memory&quot;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00118"/>00118 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00119"/>00119 
<anchor xml:id="_cmsis__gcc_8h_source_1l00120"/>00120 <emphasis role="comment">/*&#32;#########################&#32;&#32;Startup&#32;and&#32;Lowlevel&#32;Init&#32;&#32;########################&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00121"/>00121 
<anchor xml:id="_cmsis__gcc_8h_source_1l00122"/>00122 <emphasis role="preprocessor">#ifndef&#32;__PROGRAM_START</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00123"/>00123 
<anchor xml:id="_cmsis__gcc_8h_source_1l00131"/><link linkend="_cmsis__gcc_8h_1a88de6b29fc9f132b201292805ad13e58">00131</link> __STATIC_FORCEINLINE&#32;__NO_RETURN&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_cmsis__gcc_8h_1a88de6b29fc9f132b201292805ad13e58">__cmsis_start</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00132"/>00132 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00133"/>00133 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_start(<emphasis role="keywordtype">void</emphasis>)&#32;__NO_RETURN;
<anchor xml:id="_cmsis__gcc_8h_source_1l00134"/>00134 
<anchor xml:id="_cmsis__gcc_8h_source_1l00135"/>00135 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_cmsis__gcc_8h_source_1l00136"/>00136 &#32;&#32;&#32;&#32;uint32_t&#32;<emphasis role="keyword">const</emphasis>*&#32;src;
<anchor xml:id="_cmsis__gcc_8h_source_1l00137"/>00137 &#32;&#32;&#32;&#32;uint32_t*&#32;dest;
<anchor xml:id="_cmsis__gcc_8h_source_1l00138"/>00138 &#32;&#32;&#32;&#32;uint32_t&#32;&#32;wlen;
<anchor xml:id="_cmsis__gcc_8h_source_1l00139"/>00139 &#32;&#32;}&#32;__copy_table_t;
<anchor xml:id="_cmsis__gcc_8h_source_1l00140"/>00140 
<anchor xml:id="_cmsis__gcc_8h_source_1l00141"/>00141 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_cmsis__gcc_8h_source_1l00142"/>00142 &#32;&#32;&#32;&#32;uint32_t*&#32;dest;
<anchor xml:id="_cmsis__gcc_8h_source_1l00143"/>00143 &#32;&#32;&#32;&#32;uint32_t&#32;&#32;wlen;
<anchor xml:id="_cmsis__gcc_8h_source_1l00144"/>00144 &#32;&#32;}&#32;__zero_table_t;
<anchor xml:id="_cmsis__gcc_8h_source_1l00145"/>00145 
<anchor xml:id="_cmsis__gcc_8h_source_1l00146"/>00146 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__copy_table_t&#32;__copy_table_start__;
<anchor xml:id="_cmsis__gcc_8h_source_1l00147"/>00147 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__copy_table_t&#32;__copy_table_end__;
<anchor xml:id="_cmsis__gcc_8h_source_1l00148"/>00148 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__zero_table_t&#32;__zero_table_start__;
<anchor xml:id="_cmsis__gcc_8h_source_1l00149"/>00149 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__zero_table_t&#32;__zero_table_end__;
<anchor xml:id="_cmsis__gcc_8h_source_1l00150"/>00150 
<anchor xml:id="_cmsis__gcc_8h_source_1l00151"/>00151 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__copy_table_t&#32;<emphasis role="keyword">const</emphasis>*&#32;pTable&#32;=&#32;&amp;__copy_table_start__;&#32;pTable&#32;&lt;&#32;&amp;__copy_table_end__;&#32;++pTable)&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint32_t&#32;i=0u;&#32;i&lt;pTable-&gt;wlen;&#32;++i)&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;pTable-&gt;dest[i]&#32;=&#32;pTable-&gt;src[i];
<anchor xml:id="_cmsis__gcc_8h_source_1l00154"/>00154 &#32;&#32;&#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00155"/>00155 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00156"/>00156 
<anchor xml:id="_cmsis__gcc_8h_source_1l00157"/>00157 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__zero_table_t&#32;<emphasis role="keyword">const</emphasis>*&#32;pTable&#32;=&#32;&amp;__zero_table_start__;&#32;pTable&#32;&lt;&#32;&amp;__zero_table_end__;&#32;++pTable)&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(uint32_t&#32;i=0u;&#32;i&lt;pTable-&gt;wlen;&#32;++i)&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;pTable-&gt;dest[i]&#32;=&#32;0u;
<anchor xml:id="_cmsis__gcc_8h_source_1l00160"/>00160 &#32;&#32;&#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00161"/>00161 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00162"/>00162 
<anchor xml:id="_cmsis__gcc_8h_source_1l00163"/>00163 &#32;&#32;_start();
<anchor xml:id="_cmsis__gcc_8h_source_1l00164"/>00164 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00165"/>00165 
<anchor xml:id="_cmsis__gcc_8h_source_1l00166"/>00166 <emphasis role="preprocessor">#define&#32;__PROGRAM_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmsis_start</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00167"/>00167 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00168"/>00168 
<anchor xml:id="_cmsis__gcc_8h_source_1l00169"/>00169 <emphasis role="preprocessor">#ifndef&#32;__INITIAL_SP</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00170"/>00170 <emphasis role="preprocessor">#define&#32;__INITIAL_SP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__StackTop</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00171"/>00171 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00172"/>00172 
<anchor xml:id="_cmsis__gcc_8h_source_1l00173"/>00173 <emphasis role="preprocessor">#ifndef&#32;__STACK_LIMIT</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00174"/>00174 <emphasis role="preprocessor">#define&#32;__STACK_LIMIT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__StackLimit</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00175"/>00175 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00176"/>00176 
<anchor xml:id="_cmsis__gcc_8h_source_1l00177"/>00177 <emphasis role="preprocessor">#ifndef&#32;__VECTOR_TABLE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00178"/>00178 <emphasis role="preprocessor">#define&#32;__VECTOR_TABLE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__Vectors</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00179"/>00179 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00180"/>00180 
<anchor xml:id="_cmsis__gcc_8h_source_1l00181"/>00181 <emphasis role="preprocessor">#ifndef&#32;__VECTOR_TABLE_ATTRIBUTE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00182"/>00182 <emphasis role="preprocessor">#define&#32;__VECTOR_TABLE_ATTRIBUTE&#32;&#32;__attribute__((used,&#32;section(&quot;.vectors&quot;)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00183"/>00183 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00184"/>00184 
<anchor xml:id="_cmsis__gcc_8h_source_1l00185"/>00185 <emphasis role="preprocessor">#if&#32;defined&#32;(__ARM_FEATURE_CMSE)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3U)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00186"/>00186 <emphasis role="preprocessor">#ifndef&#32;__STACK_SEAL</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00187"/>00187 <emphasis role="preprocessor">#define&#32;__STACK_SEAL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__StackSeal</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00188"/>00188 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00189"/>00189 
<anchor xml:id="_cmsis__gcc_8h_source_1l00190"/>00190 <emphasis role="preprocessor">#ifndef&#32;__TZ_STACK_SEAL_SIZE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00191"/>00191 <emphasis role="preprocessor">#define&#32;__TZ_STACK_SEAL_SIZE&#32;&#32;&#32;&#32;&#32;&#32;8U</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00192"/>00192 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00193"/>00193 
<anchor xml:id="_cmsis__gcc_8h_source_1l00194"/>00194 <emphasis role="preprocessor">#ifndef&#32;__TZ_STACK_SEAL_VALUE</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00195"/>00195 <emphasis role="preprocessor">#define&#32;__TZ_STACK_SEAL_VALUE&#32;&#32;&#32;&#32;&#32;0xFEF5EDA5FEF5EDA5ULL</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00196"/>00196 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00197"/>00197 
<anchor xml:id="_cmsis__gcc_8h_source_1l00198"/>00198 
<anchor xml:id="_cmsis__gcc_8h_source_1l00199"/>00199 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_STACKSEAL_S&#32;(uint32_t*&#32;stackTop)&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00200"/>00200 &#32;&#32;*((uint64_t&#32;*)stackTop)&#32;=&#32;__TZ_STACK_SEAL_VALUE;
<anchor xml:id="_cmsis__gcc_8h_source_1l00201"/>00201 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00202"/>00202 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00203"/>00203 
<anchor xml:id="_cmsis__gcc_8h_source_1l00204"/>00204 
<anchor xml:id="_cmsis__gcc_8h_source_1l00205"/>00205 <emphasis role="comment">/*&#32;##########################&#32;&#32;Core&#32;Instruction&#32;Access&#32;&#32;#########################&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00211"/>00211 <emphasis role="comment">/*&#32;Define&#32;macros&#32;for&#32;porting&#32;to&#32;both&#32;thumb1&#32;and&#32;thumb2.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00212"/>00212 <emphasis role="comment">&#32;*&#32;For&#32;thumb1,&#32;use&#32;low&#32;register&#32;(r0-r7),&#32;specified&#32;by&#32;constraint&#32;&quot;l&quot;</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00213"/>00213 <emphasis role="comment">&#32;*&#32;Otherwise,&#32;use&#32;general&#32;registers,&#32;specified&#32;by&#32;constraint&#32;&quot;r&quot;&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00214"/>00214 <emphasis role="preprocessor">#if&#32;defined&#32;(__thumb__)&#32;&amp;&amp;&#32;!defined&#32;(__thumb2__)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00215"/>00215 <emphasis role="preprocessor">#define&#32;__CMSIS_GCC_OUT_REG(r)&#32;&quot;=l&quot;&#32;(r)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00216"/>00216 <emphasis role="preprocessor">#define&#32;__CMSIS_GCC_RW_REG(r)&#32;&quot;+l&quot;&#32;(r)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00217"/>00217 <emphasis role="preprocessor">#define&#32;__CMSIS_GCC_USE_REG(r)&#32;&quot;l&quot;&#32;(r)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00218"/>00218 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00219"/>00219 <emphasis role="preprocessor">#define&#32;__CMSIS_GCC_OUT_REG(r)&#32;&quot;=r&quot;&#32;(r)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00220"/>00220 <emphasis role="preprocessor">#define&#32;__CMSIS_GCC_RW_REG(r)&#32;&quot;+r&quot;&#32;(r)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00221"/>00221 <emphasis role="preprocessor">#define&#32;__CMSIS_GCC_USE_REG(r)&#32;&quot;r&quot;&#32;(r)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00222"/>00222 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00223"/>00223 
<anchor xml:id="_cmsis__gcc_8h_source_1l00228"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga0b13f3617dd4af2cd2eb3a311073f717">00228</link> <emphasis role="preprocessor">#define&#32;__NOP()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM&#32;volatile&#32;(&quot;nop&quot;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00229"/>00229 
<anchor xml:id="_cmsis__gcc_8h_source_1l00234"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab28e2b328c4cf23c917ab18a23194f8e">00234</link> <emphasis role="preprocessor">#define&#32;__WFI()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM&#32;volatile&#32;(&quot;wfi&quot;:::&quot;memory&quot;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00235"/>00235 
<anchor xml:id="_cmsis__gcc_8h_source_1l00236"/>00236 
<anchor xml:id="_cmsis__gcc_8h_source_1l00242"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaf0330712223f4cfb6091e4ab84775f73">00242</link> <emphasis role="preprocessor">#define&#32;__WFE()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM&#32;volatile&#32;(&quot;wfe&quot;:::&quot;memory&quot;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00243"/>00243 
<anchor xml:id="_cmsis__gcc_8h_source_1l00244"/>00244 
<anchor xml:id="_cmsis__gcc_8h_source_1l00249"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gafa58e60fcd2176ad58f96947466ea1fa">00249</link> <emphasis role="preprocessor">#define&#32;__SEV()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM&#32;volatile&#32;(&quot;sev&quot;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00250"/>00250 
<anchor xml:id="_cmsis__gcc_8h_source_1l00251"/>00251 
<anchor xml:id="_cmsis__gcc_8h_source_1l00258"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae26c2b3961e702aeabc24d4984ebd369">00258</link> __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae26c2b3961e702aeabc24d4984ebd369">__ISB</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00259"/>00259 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00260"/>00260 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;isb&#32;0xF&quot;</emphasis>:::<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l00261"/>00261 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00262"/>00262 
<anchor xml:id="_cmsis__gcc_8h_source_1l00263"/>00263 
<anchor xml:id="_cmsis__gcc_8h_source_1l00269"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga7fe277f5385d23b9c44b2cbda1577ce9">00269</link> __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga7fe277f5385d23b9c44b2cbda1577ce9">__DSB</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00270"/>00270 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00271"/>00271 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;dsb&#32;0xF&quot;</emphasis>:::<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l00272"/>00272 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00273"/>00273 
<anchor xml:id="_cmsis__gcc_8h_source_1l00274"/>00274 
<anchor xml:id="_cmsis__gcc_8h_source_1l00280"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab1ea24daaaaee9c828f90cbca330cb5e">00280</link> __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab1ea24daaaaee9c828f90cbca330cb5e">__DMB</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00281"/>00281 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00282"/>00282 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;dmb&#32;0xF&quot;</emphasis>:::<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l00283"/>00283 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00284"/>00284 
<anchor xml:id="_cmsis__gcc_8h_source_1l00285"/>00285 
<anchor xml:id="_cmsis__gcc_8h_source_1l00292"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gadb92679719950635fba8b1b954072695">00292</link> __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga14f54807872c0f5e05604c4924abfdae">__REV</link>(uint32_t&#32;value)
<anchor xml:id="_cmsis__gcc_8h_source_1l00293"/>00293 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00294"/>00294 <emphasis role="preprocessor">#if&#32;(__GNUC__&#32;&gt;&#32;4)&#32;||&#32;(__GNUC__&#32;==&#32;4&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;5)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00295"/>00295 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_bswap32(value);
<anchor xml:id="_cmsis__gcc_8h_source_1l00296"/>00296 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00297"/>00297 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00298"/>00298 
<anchor xml:id="_cmsis__gcc_8h_source_1l00299"/>00299 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;rev&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;__CMSIS_GCC_OUT_REG&#32;(result)&#32;:&#32;__CMSIS_GCC_USE_REG&#32;(value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00300"/>00300 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00301"/>00301 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00302"/>00302 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00303"/>00303 
<anchor xml:id="_cmsis__gcc_8h_source_1l00304"/>00304 
<anchor xml:id="_cmsis__gcc_8h_source_1l00311"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaa12aedd096506c9639c1581acd5c6a78">00311</link> __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gad35497777af37e7809271b5e6f9510ba">__REV16</link>(uint32_t&#32;value)
<anchor xml:id="_cmsis__gcc_8h_source_1l00312"/>00312 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00313"/>00313 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00314"/>00314 
<anchor xml:id="_cmsis__gcc_8h_source_1l00315"/>00315 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;rev16&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;__CMSIS_GCC_OUT_REG&#32;(result)&#32;:&#32;__CMSIS_GCC_USE_REG&#32;(value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00316"/>00316 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00317"/>00317 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00318"/>00318 
<anchor xml:id="_cmsis__gcc_8h_source_1l00319"/>00319 
<anchor xml:id="_cmsis__gcc_8h_source_1l00326"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gacb695341318226a5f69ed508166622ac">00326</link> __STATIC_FORCEINLINE&#32;int16_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae580812686119c9c5cf3c11a7519a404">__REVSH</link>(int16_t&#32;value)
<anchor xml:id="_cmsis__gcc_8h_source_1l00327"/>00327 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00328"/>00328 <emphasis role="preprocessor">#if&#32;(__GNUC__&#32;&gt;&#32;4)&#32;||&#32;(__GNUC__&#32;==&#32;4&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;8)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00329"/>00329 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(int16_t)__builtin_bswap16(value);
<anchor xml:id="_cmsis__gcc_8h_source_1l00330"/>00330 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00331"/>00331 &#32;&#32;int16_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00332"/>00332 
<anchor xml:id="_cmsis__gcc_8h_source_1l00333"/>00333 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;revsh&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;__CMSIS_GCC_OUT_REG&#32;(result)&#32;:&#32;__CMSIS_GCC_USE_REG&#32;(value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00334"/>00334 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00335"/>00335 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00336"/>00336 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00337"/>00337 
<anchor xml:id="_cmsis__gcc_8h_source_1l00338"/>00338 
<anchor xml:id="_cmsis__gcc_8h_source_1l00346"/>00346 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga95b9bd281ddeda378b85afdb8f2ced86">__ROR</link>(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l00347"/>00347 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00348"/>00348 &#32;&#32;op2&#32;%=&#32;32U;
<anchor xml:id="_cmsis__gcc_8h_source_1l00349"/>00349 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op2&#32;==&#32;0U)
<anchor xml:id="_cmsis__gcc_8h_source_1l00350"/>00350 &#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00351"/>00351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;op1;
<anchor xml:id="_cmsis__gcc_8h_source_1l00352"/>00352 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00353"/>00353 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(op1&#32;&gt;&gt;&#32;op2)&#32;|&#32;(op1&#32;&lt;&lt;&#32;(32U&#32;-&#32;op2));
<anchor xml:id="_cmsis__gcc_8h_source_1l00354"/>00354 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00355"/>00355 
<anchor xml:id="_cmsis__gcc_8h_source_1l00356"/>00356 
<anchor xml:id="_cmsis__gcc_8h_source_1l00364"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397">00364</link> <emphasis role="preprocessor">#define&#32;__BKPT(value)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM&#32;volatile&#32;(&quot;bkpt&#32;&quot;#value)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00365"/>00365 
<anchor xml:id="_cmsis__gcc_8h_source_1l00366"/>00366 
<anchor xml:id="_cmsis__gcc_8h_source_1l00373"/><link linkend="_group___c_m_s_i_s___core___instruction_interface_1gaf944a7b7d8fd70164cca27669316bcf7">00373</link> __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gab83768933a612816fad669db5488366f">__RBIT</link>(uint32_t&#32;value)
<anchor xml:id="_cmsis__gcc_8h_source_1l00374"/>00374 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00375"/>00375 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00376"/>00376 
<anchor xml:id="_cmsis__gcc_8h_source_1l00377"/>00377 <emphasis role="preprocessor">#if&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00378"/>00378 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00379"/>00379 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00380"/>00380 &#32;&#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;rbit&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00381"/>00381 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00382"/>00382 &#32;&#32;uint32_t&#32;s&#32;=&#32;(4U&#32;<emphasis role="comment">/*sizeof(v)*/</emphasis>&#32;*&#32;8U)&#32;-&#32;1U;&#32;<emphasis role="comment">/*&#32;extra&#32;shift&#32;needed&#32;at&#32;end&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00383"/>00383 
<anchor xml:id="_cmsis__gcc_8h_source_1l00384"/>00384 &#32;&#32;result&#32;=&#32;value;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;r&#32;will&#32;be&#32;reversed&#32;bits&#32;of&#32;v;&#32;first&#32;get&#32;LSB&#32;of&#32;v&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00385"/>00385 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(value&#32;&gt;&gt;=&#32;1U;&#32;value&#32;!=&#32;0U;&#32;value&#32;&gt;&gt;=&#32;1U)
<anchor xml:id="_cmsis__gcc_8h_source_1l00386"/>00386 &#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00387"/>00387 &#32;&#32;&#32;&#32;result&#32;&lt;&lt;=&#32;1U;
<anchor xml:id="_cmsis__gcc_8h_source_1l00388"/>00388 &#32;&#32;&#32;&#32;result&#32;|=&#32;value&#32;&amp;&#32;1U;
<anchor xml:id="_cmsis__gcc_8h_source_1l00389"/>00389 &#32;&#32;&#32;&#32;s--;
<anchor xml:id="_cmsis__gcc_8h_source_1l00390"/>00390 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00391"/>00391 &#32;&#32;result&#32;&lt;&lt;=&#32;s;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;shift&#32;when&#32;v&apos;s&#32;highest&#32;bits&#32;are&#32;zero&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00392"/>00392 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00393"/>00393 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00394"/>00394 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00395"/>00395 
<anchor xml:id="_cmsis__gcc_8h_source_1l00396"/>00396 
<anchor xml:id="_cmsis__gcc_8h_source_1l00403"/>00403 __STATIC_FORCEINLINE&#32;uint8_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248">__CLZ</link>(uint32_t&#32;value)
<anchor xml:id="_cmsis__gcc_8h_source_1l00404"/>00404 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00405"/>00405 &#32;&#32;<emphasis role="comment">/*&#32;Even&#32;though&#32;__builtin_clz&#32;produces&#32;a&#32;CLZ&#32;instruction&#32;on&#32;ARM,&#32;formally</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00406"/>00406 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;__builtin_clz(0)&#32;is&#32;undefined&#32;behaviour,&#32;so&#32;handle&#32;this&#32;case&#32;specially.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00407"/>00407 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;This&#32;guarantees&#32;ARM-compatible&#32;results&#32;if&#32;happening&#32;to&#32;compile&#32;on&#32;a&#32;non-ARM</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00408"/>00408 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;target,&#32;and&#32;ensures&#32;the&#32;compiler&#32;doesn&apos;t&#32;decide&#32;to&#32;activate&#32;any</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00409"/>00409 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;optimisations&#32;using&#32;the&#32;logic&#32;&quot;value&#32;was&#32;passed&#32;to&#32;__builtin_clz,&#32;so&#32;it</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00410"/>00410 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;is&#32;non-zero&quot;.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00411"/>00411 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;ARM&#32;GCC&#32;7.3&#32;and&#32;possibly&#32;earlier&#32;will&#32;optimise&#32;this&#32;test&#32;away,&#32;leaving&#32;a</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00412"/>00412 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;single&#32;CLZ&#32;instruction.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00413"/>00413 <emphasis role="comment">&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00414"/>00414 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;0U)
<anchor xml:id="_cmsis__gcc_8h_source_1l00415"/>00415 &#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00416"/>00416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;32U;
<anchor xml:id="_cmsis__gcc_8h_source_1l00417"/>00417 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00418"/>00418 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_clz(value);
<anchor xml:id="_cmsis__gcc_8h_source_1l00419"/>00419 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00420"/>00420 
<anchor xml:id="_cmsis__gcc_8h_source_1l00421"/>00421 
<anchor xml:id="_cmsis__gcc_8h_source_1l00422"/>00422 <emphasis role="preprocessor">#if&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00423"/>00423 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00424"/>00424 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00425"/>00425 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_BASE__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_BASE__&#32;==&#32;1))&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00432"/>00432 __STATIC_FORCEINLINE&#32;uint8_t&#32;__LDREXB(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*addr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00433"/>00433 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00434"/>00434 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00435"/>00435 
<anchor xml:id="_cmsis__gcc_8h_source_1l00436"/>00436 <emphasis role="preprocessor">#if&#32;(__GNUC__&#32;&gt;&#32;4)&#32;||&#32;(__GNUC__&#32;==&#32;4&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;8)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00437"/>00437 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrexb&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*addr)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00438"/>00438 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00439"/>00439 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Prior&#32;to&#32;GCC&#32;4.8,&#32;&quot;Q&quot;&#32;will&#32;be&#32;expanded&#32;to&#32;[rx,&#32;#0]&#32;which&#32;is&#32;not</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00440"/>00440 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;accepted&#32;by&#32;assembler.&#32;So&#32;has&#32;to&#32;use&#32;following&#32;less&#32;efficient&#32;pattern.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00441"/>00441 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00442"/>00442 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrexb&#32;%0,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00443"/>00443 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00444"/>00444 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint8_t)&#32;result);&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Add&#32;explicit&#32;type&#32;cast&#32;here&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00445"/>00445 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00446"/>00446 
<anchor xml:id="_cmsis__gcc_8h_source_1l00447"/>00447 
<anchor xml:id="_cmsis__gcc_8h_source_1l00454"/>00454 __STATIC_FORCEINLINE&#32;uint16_t&#32;__LDREXH(<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*addr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00455"/>00455 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00456"/>00456 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00457"/>00457 
<anchor xml:id="_cmsis__gcc_8h_source_1l00458"/>00458 <emphasis role="preprocessor">#if&#32;(__GNUC__&#32;&gt;&#32;4)&#32;||&#32;(__GNUC__&#32;==&#32;4&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;8)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00459"/>00459 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrexh&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*addr)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00460"/>00460 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00461"/>00461 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Prior&#32;to&#32;GCC&#32;4.8,&#32;&quot;Q&quot;&#32;will&#32;be&#32;expanded&#32;to&#32;[rx,&#32;#0]&#32;which&#32;is&#32;not</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00462"/>00462 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;accepted&#32;by&#32;assembler.&#32;So&#32;has&#32;to&#32;use&#32;following&#32;less&#32;efficient&#32;pattern.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00463"/>00463 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00464"/>00464 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrexh&#32;%0,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00465"/>00465 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00466"/>00466 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint16_t)&#32;result);&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Add&#32;explicit&#32;type&#32;cast&#32;here&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00467"/>00467 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00468"/>00468 
<anchor xml:id="_cmsis__gcc_8h_source_1l00469"/>00469 
<anchor xml:id="_cmsis__gcc_8h_source_1l00476"/>00476 __STATIC_FORCEINLINE&#32;uint32_t&#32;__LDREXW(<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*addr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00477"/>00477 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00478"/>00478 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00479"/>00479 
<anchor xml:id="_cmsis__gcc_8h_source_1l00480"/>00480 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrex&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*addr)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00481"/>00481 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00482"/>00482 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00483"/>00483 
<anchor xml:id="_cmsis__gcc_8h_source_1l00484"/>00484 
<anchor xml:id="_cmsis__gcc_8h_source_1l00493"/>00493 __STATIC_FORCEINLINE&#32;uint32_t&#32;__STREXB(uint8_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*addr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00494"/>00494 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00495"/>00495 &#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00496"/>00496 
<anchor xml:id="_cmsis__gcc_8h_source_1l00497"/>00497 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strexb&#32;%0,&#32;%2,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(result),&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*addr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00498"/>00498 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00499"/>00499 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00500"/>00500 
<anchor xml:id="_cmsis__gcc_8h_source_1l00501"/>00501 
<anchor xml:id="_cmsis__gcc_8h_source_1l00510"/>00510 __STATIC_FORCEINLINE&#32;uint32_t&#32;__STREXH(uint16_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*addr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00511"/>00511 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00512"/>00512 &#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00513"/>00513 
<anchor xml:id="_cmsis__gcc_8h_source_1l00514"/>00514 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strexh&#32;%0,&#32;%2,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(result),&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*addr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00515"/>00515 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00516"/>00516 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00517"/>00517 
<anchor xml:id="_cmsis__gcc_8h_source_1l00518"/>00518 
<anchor xml:id="_cmsis__gcc_8h_source_1l00527"/>00527 __STATIC_FORCEINLINE&#32;uint32_t&#32;__STREXW(uint32_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*addr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00528"/>00528 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00529"/>00529 &#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00530"/>00530 
<anchor xml:id="_cmsis__gcc_8h_source_1l00531"/>00531 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strex&#32;%0,&#32;%2,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(result),&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*addr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00532"/>00532 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00533"/>00533 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00534"/>00534 
<anchor xml:id="_cmsis__gcc_8h_source_1l00535"/>00535 
<anchor xml:id="_cmsis__gcc_8h_source_1l00540"/>00540 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__CLREX(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00541"/>00541 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00542"/>00542 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;clrex&quot;</emphasis>&#32;:::&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l00543"/>00543 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00544"/>00544 
<anchor xml:id="_cmsis__gcc_8h_source_1l00545"/>00545 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00546"/>00546 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00547"/>00547 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00548"/>00548 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_BASE__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_BASE__&#32;==&#32;1))&#32;&#32;&#32;&#32;)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00549"/>00549 
<anchor xml:id="_cmsis__gcc_8h_source_1l00550"/>00550 
<anchor xml:id="_cmsis__gcc_8h_source_1l00551"/>00551 <emphasis role="preprocessor">#if&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00552"/>00552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00553"/>00553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00561"/>00561 <emphasis role="preprocessor">#define&#32;__SSAT(ARG1,&#32;ARG2)&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00562"/>00562 <emphasis role="preprocessor">__extension__&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00563"/>00563 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00564"/>00564 <emphasis role="preprocessor">&#32;&#32;int32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00565"/>00565 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;ssat&#32;%0,&#32;%1,&#32;%2&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;:&#32;&quot;cc&quot;&#32;);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00566"/>00566 <emphasis role="preprocessor">&#32;&#32;__RES;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00567"/>00567 <emphasis role="preprocessor">&#32;})</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00568"/>00568 
<anchor xml:id="_cmsis__gcc_8h_source_1l00569"/>00569 
<anchor xml:id="_cmsis__gcc_8h_source_1l00577"/>00577 <emphasis role="preprocessor">#define&#32;__USAT(ARG1,&#32;ARG2)&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00578"/>00578 <emphasis role="preprocessor">__extension__&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00579"/>00579 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00580"/>00580 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00581"/>00581 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;usat&#32;%0,&#32;%1,&#32;%2&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;:&#32;&quot;cc&quot;&#32;);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00582"/>00582 <emphasis role="preprocessor">&#32;&#32;__RES;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00583"/>00583 <emphasis role="preprocessor">&#32;})</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00584"/>00584 
<anchor xml:id="_cmsis__gcc_8h_source_1l00585"/>00585 
<anchor xml:id="_cmsis__gcc_8h_source_1l00593"/>00593 __STATIC_FORCEINLINE&#32;uint32_t&#32;__RRX(uint32_t&#32;value)
<anchor xml:id="_cmsis__gcc_8h_source_1l00594"/>00594 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00595"/>00595 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00596"/>00596 
<anchor xml:id="_cmsis__gcc_8h_source_1l00597"/>00597 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;rrx&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;__CMSIS_GCC_OUT_REG&#32;(result)&#32;:&#32;__CMSIS_GCC_USE_REG&#32;(value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00598"/>00598 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00599"/>00599 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00600"/>00600 
<anchor xml:id="_cmsis__gcc_8h_source_1l00601"/>00601 
<anchor xml:id="_cmsis__gcc_8h_source_1l00608"/>00608 __STATIC_FORCEINLINE&#32;uint8_t&#32;__LDRBT(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00609"/>00609 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00610"/>00610 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00611"/>00611 
<anchor xml:id="_cmsis__gcc_8h_source_1l00612"/>00612 <emphasis role="preprocessor">#if&#32;(__GNUC__&#32;&gt;&#32;4)&#32;||&#32;(__GNUC__&#32;==&#32;4&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;8)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00613"/>00613 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrbt&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00614"/>00614 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00615"/>00615 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Prior&#32;to&#32;GCC&#32;4.8,&#32;&quot;Q&quot;&#32;will&#32;be&#32;expanded&#32;to&#32;[rx,&#32;#0]&#32;which&#32;is&#32;not</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00616"/>00616 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;accepted&#32;by&#32;assembler.&#32;So&#32;has&#32;to&#32;use&#32;following&#32;less&#32;efficient&#32;pattern.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00617"/>00617 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00618"/>00618 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrbt&#32;%0,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00619"/>00619 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00620"/>00620 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint8_t)&#32;result);&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Add&#32;explicit&#32;type&#32;cast&#32;here&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00621"/>00621 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00622"/>00622 
<anchor xml:id="_cmsis__gcc_8h_source_1l00623"/>00623 
<anchor xml:id="_cmsis__gcc_8h_source_1l00630"/>00630 __STATIC_FORCEINLINE&#32;uint16_t&#32;__LDRHT(<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00631"/>00631 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00632"/>00632 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00633"/>00633 
<anchor xml:id="_cmsis__gcc_8h_source_1l00634"/>00634 <emphasis role="preprocessor">#if&#32;(__GNUC__&#32;&gt;&#32;4)&#32;||&#32;(__GNUC__&#32;==&#32;4&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;8)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00635"/>00635 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrht&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00636"/>00636 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00637"/>00637 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Prior&#32;to&#32;GCC&#32;4.8,&#32;&quot;Q&quot;&#32;will&#32;be&#32;expanded&#32;to&#32;[rx,&#32;#0]&#32;which&#32;is&#32;not</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00638"/>00638 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;accepted&#32;by&#32;assembler.&#32;So&#32;has&#32;to&#32;use&#32;following&#32;less&#32;efficient&#32;pattern.</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00639"/>00639 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00640"/>00640 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrht&#32;%0,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00641"/>00641 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00642"/>00642 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint16_t)&#32;result);&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Add&#32;explicit&#32;type&#32;cast&#32;here&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00643"/>00643 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00644"/>00644 
<anchor xml:id="_cmsis__gcc_8h_source_1l00645"/>00645 
<anchor xml:id="_cmsis__gcc_8h_source_1l00652"/>00652 __STATIC_FORCEINLINE&#32;uint32_t&#32;__LDRT(<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00653"/>00653 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00654"/>00654 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00655"/>00655 
<anchor xml:id="_cmsis__gcc_8h_source_1l00656"/>00656 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrt&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00657"/>00657 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00658"/>00658 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00659"/>00659 
<anchor xml:id="_cmsis__gcc_8h_source_1l00660"/>00660 
<anchor xml:id="_cmsis__gcc_8h_source_1l00667"/>00667 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__STRBT(uint8_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00668"/>00668 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00669"/>00669 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strbt&#32;%1,&#32;%0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00670"/>00670 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00671"/>00671 
<anchor xml:id="_cmsis__gcc_8h_source_1l00672"/>00672 
<anchor xml:id="_cmsis__gcc_8h_source_1l00679"/>00679 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__STRHT(uint16_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00680"/>00680 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00681"/>00681 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strht&#32;%1,&#32;%0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00682"/>00682 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00683"/>00683 
<anchor xml:id="_cmsis__gcc_8h_source_1l00684"/>00684 
<anchor xml:id="_cmsis__gcc_8h_source_1l00691"/>00691 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__STRT(uint32_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00692"/>00692 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00693"/>00693 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strt&#32;%1,&#32;%0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00694"/>00694 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00695"/>00695 
<anchor xml:id="_cmsis__gcc_8h_source_1l00696"/>00696 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">/*&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00697"/>00697 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00698"/>00698 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&#32;&#32;&#32;)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00699"/>00699 
<anchor xml:id="_cmsis__gcc_8h_source_1l00707"/>00707 __STATIC_FORCEINLINE&#32;int32_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga372c0535573dde3e37f0f08c774a3487">__SSAT</link>(int32_t&#32;val,&#32;uint32_t&#32;sat)
<anchor xml:id="_cmsis__gcc_8h_source_1l00708"/>00708 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00709"/>00709 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((sat&#32;&gt;=&#32;1U)&#32;&amp;&amp;&#32;(sat&#32;&lt;=&#32;32U))
<anchor xml:id="_cmsis__gcc_8h_source_1l00710"/>00710 &#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00711"/>00711 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int32_t&#32;max&#32;=&#32;(int32_t)((1U&#32;&lt;&lt;&#32;(sat&#32;-&#32;1U))&#32;-&#32;1U);
<anchor xml:id="_cmsis__gcc_8h_source_1l00712"/>00712 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int32_t&#32;min&#32;=&#32;-1&#32;-&#32;max&#32;;
<anchor xml:id="_cmsis__gcc_8h_source_1l00713"/>00713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&gt;&#32;max)
<anchor xml:id="_cmsis__gcc_8h_source_1l00714"/>00714 &#32;&#32;&#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;max;
<anchor xml:id="_cmsis__gcc_8h_source_1l00716"/>00716 &#32;&#32;&#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00717"/>00717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;min)
<anchor xml:id="_cmsis__gcc_8h_source_1l00718"/>00718 &#32;&#32;&#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;min;
<anchor xml:id="_cmsis__gcc_8h_source_1l00720"/>00720 &#32;&#32;&#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00721"/>00721 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00722"/>00722 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val;
<anchor xml:id="_cmsis__gcc_8h_source_1l00723"/>00723 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00724"/>00724 
<anchor xml:id="_cmsis__gcc_8h_source_1l00732"/>00732 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga6562dbd8182d1571e22dbca7ebdfa9bc">__USAT</link>(int32_t&#32;val,&#32;uint32_t&#32;sat)
<anchor xml:id="_cmsis__gcc_8h_source_1l00733"/>00733 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00734"/>00734 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sat&#32;&lt;=&#32;31U)
<anchor xml:id="_cmsis__gcc_8h_source_1l00735"/>00735 &#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00736"/>00736 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;max&#32;=&#32;((1U&#32;&lt;&lt;&#32;sat)&#32;-&#32;1U);
<anchor xml:id="_cmsis__gcc_8h_source_1l00737"/>00737 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&gt;&#32;(int32_t)max)
<anchor xml:id="_cmsis__gcc_8h_source_1l00738"/>00738 &#32;&#32;&#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;max;
<anchor xml:id="_cmsis__gcc_8h_source_1l00740"/>00740 &#32;&#32;&#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00741"/>00741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;0)
<anchor xml:id="_cmsis__gcc_8h_source_1l00742"/>00742 &#32;&#32;&#32;&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0U;
<anchor xml:id="_cmsis__gcc_8h_source_1l00744"/>00744 &#32;&#32;&#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00745"/>00745 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l00746"/>00746 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint32_t)val;
<anchor xml:id="_cmsis__gcc_8h_source_1l00747"/>00747 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00748"/>00748 
<anchor xml:id="_cmsis__gcc_8h_source_1l00749"/>00749 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00750"/>00750 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00751"/>00751 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&#32;&#32;&#32;)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00752"/>00752 
<anchor xml:id="_cmsis__gcc_8h_source_1l00753"/>00753 
<anchor xml:id="_cmsis__gcc_8h_source_1l00754"/>00754 <emphasis role="preprocessor">#if&#32;((defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00755"/>00755 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_BASE__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_BASE__&#32;==&#32;1))&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00762"/>00762 __STATIC_FORCEINLINE&#32;uint8_t&#32;__LDAB(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00763"/>00763 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00764"/>00764 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00765"/>00765 
<anchor xml:id="_cmsis__gcc_8h_source_1l00766"/>00766 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldab&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00767"/>00767 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint8_t)&#32;result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00768"/>00768 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00769"/>00769 
<anchor xml:id="_cmsis__gcc_8h_source_1l00770"/>00770 
<anchor xml:id="_cmsis__gcc_8h_source_1l00777"/>00777 __STATIC_FORCEINLINE&#32;uint16_t&#32;__LDAH(<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00778"/>00778 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00779"/>00779 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00780"/>00780 
<anchor xml:id="_cmsis__gcc_8h_source_1l00781"/>00781 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldah&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00782"/>00782 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint16_t)&#32;result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00783"/>00783 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00784"/>00784 
<anchor xml:id="_cmsis__gcc_8h_source_1l00785"/>00785 
<anchor xml:id="_cmsis__gcc_8h_source_1l00792"/>00792 __STATIC_FORCEINLINE&#32;uint32_t&#32;__LDA(<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00793"/>00793 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00794"/>00794 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00795"/>00795 
<anchor xml:id="_cmsis__gcc_8h_source_1l00796"/>00796 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;lda&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00797"/>00797 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00798"/>00798 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00799"/>00799 
<anchor xml:id="_cmsis__gcc_8h_source_1l00800"/>00800 
<anchor xml:id="_cmsis__gcc_8h_source_1l00807"/>00807 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__STLB(uint8_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00808"/>00808 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00809"/>00809 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;stlb&#32;%1,&#32;%0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00810"/>00810 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00811"/>00811 
<anchor xml:id="_cmsis__gcc_8h_source_1l00812"/>00812 
<anchor xml:id="_cmsis__gcc_8h_source_1l00819"/>00819 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__STLH(uint16_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00820"/>00820 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00821"/>00821 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;stlh&#32;%1,&#32;%0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00822"/>00822 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00823"/>00823 
<anchor xml:id="_cmsis__gcc_8h_source_1l00824"/>00824 
<anchor xml:id="_cmsis__gcc_8h_source_1l00831"/>00831 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__STL(uint32_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00832"/>00832 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00833"/>00833 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;stl&#32;%1,&#32;%0&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00834"/>00834 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00835"/>00835 
<anchor xml:id="_cmsis__gcc_8h_source_1l00836"/>00836 
<anchor xml:id="_cmsis__gcc_8h_source_1l00843"/>00843 __STATIC_FORCEINLINE&#32;uint8_t&#32;__LDAEXB(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00844"/>00844 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00845"/>00845 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00846"/>00846 
<anchor xml:id="_cmsis__gcc_8h_source_1l00847"/>00847 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldaexb&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00848"/>00848 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint8_t)&#32;result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00849"/>00849 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00850"/>00850 
<anchor xml:id="_cmsis__gcc_8h_source_1l00851"/>00851 
<anchor xml:id="_cmsis__gcc_8h_source_1l00858"/>00858 __STATIC_FORCEINLINE&#32;uint16_t&#32;__LDAEXH(<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00859"/>00859 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00860"/>00860 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00861"/>00861 
<anchor xml:id="_cmsis__gcc_8h_source_1l00862"/>00862 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldaexh&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00863"/>00863 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint16_t)&#32;result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00864"/>00864 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00865"/>00865 
<anchor xml:id="_cmsis__gcc_8h_source_1l00866"/>00866 
<anchor xml:id="_cmsis__gcc_8h_source_1l00873"/>00873 __STATIC_FORCEINLINE&#32;uint32_t&#32;__LDAEX(<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00874"/>00874 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00875"/>00875 &#32;&#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00876"/>00876 
<anchor xml:id="_cmsis__gcc_8h_source_1l00877"/>00877 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldaex&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00878"/>00878 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00879"/>00879 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00880"/>00880 
<anchor xml:id="_cmsis__gcc_8h_source_1l00881"/>00881 
<anchor xml:id="_cmsis__gcc_8h_source_1l00890"/>00890 __STATIC_FORCEINLINE&#32;uint32_t&#32;__STLEXB(uint8_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00891"/>00891 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00892"/>00892 &#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00893"/>00893 
<anchor xml:id="_cmsis__gcc_8h_source_1l00894"/>00894 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;stlexb&#32;%0,&#32;%2,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(result),&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00895"/>00895 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00896"/>00896 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00897"/>00897 
<anchor xml:id="_cmsis__gcc_8h_source_1l00898"/>00898 
<anchor xml:id="_cmsis__gcc_8h_source_1l00907"/>00907 __STATIC_FORCEINLINE&#32;uint32_t&#32;__STLEXH(uint16_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00908"/>00908 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00909"/>00909 &#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00910"/>00910 
<anchor xml:id="_cmsis__gcc_8h_source_1l00911"/>00911 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;stlexh&#32;%0,&#32;%2,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(result),&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00912"/>00912 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00913"/>00913 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00914"/>00914 
<anchor xml:id="_cmsis__gcc_8h_source_1l00915"/>00915 
<anchor xml:id="_cmsis__gcc_8h_source_1l00924"/>00924 __STATIC_FORCEINLINE&#32;uint32_t&#32;__STLEX(uint32_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*ptr)
<anchor xml:id="_cmsis__gcc_8h_source_1l00925"/>00925 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00926"/>00926 &#32;&#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00927"/>00927 
<anchor xml:id="_cmsis__gcc_8h_source_1l00928"/>00928 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;stlex&#32;%0,&#32;%2,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(result),&#32;<emphasis role="stringliteral">&quot;=Q&quot;</emphasis>&#32;(*ptr)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;((uint32_t)value)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00929"/>00929 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00930"/>00930 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00931"/>00931 
<anchor xml:id="_cmsis__gcc_8h_source_1l00932"/>00932 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;((defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00933"/>00933 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_BASE__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_BASE__&#32;==&#32;1))&#32;&#32;&#32;&#32;)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00934"/>00934 &#32;<emphasis role="comment">/*&#32;end&#32;of&#32;group&#32;CMSIS_Core_InstructionInterface&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00936"/>00936 
<anchor xml:id="_cmsis__gcc_8h_source_1l00937"/>00937 
<anchor xml:id="_cmsis__gcc_8h_source_1l00938"/>00938 <emphasis role="comment">/*&#32;###########################&#32;&#32;Core&#32;Function&#32;Access&#32;&#32;###########################&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00949"/>00949 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga63ab98aec1a5bde0e191fb22e693f480">__enable_irq</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00950"/>00950 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00951"/>00951 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsie&#32;i&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l00952"/>00952 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00953"/>00953 
<anchor xml:id="_cmsis__gcc_8h_source_1l00954"/>00954 
<anchor xml:id="_cmsis__gcc_8h_source_1l00960"/>00960 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga9a8f966bf50cc372e7ac092f612efd1a">__disable_irq</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00961"/>00961 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00962"/>00962 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsid&#32;i&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l00963"/>00963 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00964"/>00964 
<anchor xml:id="_cmsis__gcc_8h_source_1l00965"/>00965 
<anchor xml:id="_cmsis__gcc_8h_source_1l00971"/>00971 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga7dd5c942bee32f055b90153feb950f59">__get_CONTROL</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00972"/>00972 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00973"/>00973 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00974"/>00974 
<anchor xml:id="_cmsis__gcc_8h_source_1l00975"/>00975 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;control&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00976"/>00976 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00977"/>00977 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00978"/>00978 
<anchor xml:id="_cmsis__gcc_8h_source_1l00979"/>00979 
<anchor xml:id="_cmsis__gcc_8h_source_1l00980"/>00980 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00986"/>00986 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_CONTROL_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l00987"/>00987 {
<anchor xml:id="_cmsis__gcc_8h_source_1l00988"/>00988 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l00989"/>00989 
<anchor xml:id="_cmsis__gcc_8h_source_1l00990"/>00990 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;control_ns&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l00991"/>00991 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l00992"/>00992 }
<anchor xml:id="_cmsis__gcc_8h_source_1l00993"/>00993 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l00994"/>00994 
<anchor xml:id="_cmsis__gcc_8h_source_1l00995"/>00995 
<anchor xml:id="_cmsis__gcc_8h_source_1l01001"/>01001 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga0102d0939d9b26c5c792be6bf5fd550f">__set_CONTROL</link>(uint32_t&#32;control)
<anchor xml:id="_cmsis__gcc_8h_source_1l01002"/>01002 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01003"/>01003 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;control,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(control)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01004"/>01004 &#32;&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae26c2b3961e702aeabc24d4984ebd369">__ISB</link>();
<anchor xml:id="_cmsis__gcc_8h_source_1l01005"/>01005 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01006"/>01006 
<anchor xml:id="_cmsis__gcc_8h_source_1l01007"/>01007 
<anchor xml:id="_cmsis__gcc_8h_source_1l01008"/>01008 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01014"/>01014 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_CONTROL_NS(uint32_t&#32;control)
<anchor xml:id="_cmsis__gcc_8h_source_1l01015"/>01015 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01016"/>01016 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;control_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(control)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01017"/>01017 &#32;&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1gae26c2b3961e702aeabc24d4984ebd369">__ISB</link>();
<anchor xml:id="_cmsis__gcc_8h_source_1l01018"/>01018 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01019"/>01019 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01020"/>01020 
<anchor xml:id="_cmsis__gcc_8h_source_1l01021"/>01021 
<anchor xml:id="_cmsis__gcc_8h_source_1l01027"/>01027 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1gaf15a71855b9d731d11de92704c82bd18">__get_IPSR</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01028"/>01028 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01029"/>01029 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01030"/>01030 
<anchor xml:id="_cmsis__gcc_8h_source_1l01031"/>01031 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;ipsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01032"/>01032 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01033"/>01033 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01034"/>01034 
<anchor xml:id="_cmsis__gcc_8h_source_1l01035"/>01035 
<anchor xml:id="_cmsis__gcc_8h_source_1l01041"/>01041 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1gadff4f1e599946e8ae96fba17b5245f04">__get_APSR</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01042"/>01042 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01043"/>01043 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01044"/>01044 
<anchor xml:id="_cmsis__gcc_8h_source_1l01045"/>01045 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;apsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01046"/>01046 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01047"/>01047 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01048"/>01048 
<anchor xml:id="_cmsis__gcc_8h_source_1l01049"/>01049 
<anchor xml:id="_cmsis__gcc_8h_source_1l01055"/>01055 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1gae0d8e20f8c3c2a502075dabcff733c05">__get_xPSR</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01056"/>01056 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01057"/>01057 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01058"/>01058 
<anchor xml:id="_cmsis__gcc_8h_source_1l01059"/>01059 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;xpsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01060"/>01060 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01061"/>01061 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01062"/>01062 
<anchor xml:id="_cmsis__gcc_8h_source_1l01063"/>01063 
<anchor xml:id="_cmsis__gcc_8h_source_1l01069"/>01069 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga826c53e30812e350c77f58aac9f42bcb">__get_PSP</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01070"/>01070 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01071"/>01071 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01072"/>01072 
<anchor xml:id="_cmsis__gcc_8h_source_1l01073"/>01073 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;psp&quot;</emphasis>&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01074"/>01074 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01075"/>01075 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01076"/>01076 
<anchor xml:id="_cmsis__gcc_8h_source_1l01077"/>01077 
<anchor xml:id="_cmsis__gcc_8h_source_1l01078"/>01078 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01084"/>01084 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_PSP_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01085"/>01085 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01086"/>01086 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01087"/>01087 
<anchor xml:id="_cmsis__gcc_8h_source_1l01088"/>01088 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;psp_ns&quot;</emphasis>&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01089"/>01089 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01090"/>01090 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01091"/>01091 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01092"/>01092 
<anchor xml:id="_cmsis__gcc_8h_source_1l01093"/>01093 
<anchor xml:id="_cmsis__gcc_8h_source_1l01099"/>01099 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga21f50fc02c3927a8ebf0bc3678c06862">__set_PSP</link>(uint32_t&#32;topOfProcStack)
<anchor xml:id="_cmsis__gcc_8h_source_1l01100"/>01100 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01101"/>01101 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;psp,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfProcStack)&#32;:&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01102"/>01102 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01103"/>01103 
<anchor xml:id="_cmsis__gcc_8h_source_1l01104"/>01104 
<anchor xml:id="_cmsis__gcc_8h_source_1l01105"/>01105 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01111"/>01111 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_PSP_NS(uint32_t&#32;topOfProcStack)
<anchor xml:id="_cmsis__gcc_8h_source_1l01112"/>01112 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01113"/>01113 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;psp_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfProcStack)&#32;:&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01114"/>01114 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01115"/>01115 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01116"/>01116 
<anchor xml:id="_cmsis__gcc_8h_source_1l01117"/>01117 
<anchor xml:id="_cmsis__gcc_8h_source_1l01123"/>01123 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga667e7b8b97b4a30f445ae45d37588e45">__get_MSP</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01124"/>01124 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01125"/>01125 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01126"/>01126 
<anchor xml:id="_cmsis__gcc_8h_source_1l01127"/>01127 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;msp&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01128"/>01128 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01129"/>01129 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01130"/>01130 
<anchor xml:id="_cmsis__gcc_8h_source_1l01131"/>01131 
<anchor xml:id="_cmsis__gcc_8h_source_1l01132"/>01132 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01138"/>01138 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_MSP_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01139"/>01139 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01140"/>01140 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01141"/>01141 
<anchor xml:id="_cmsis__gcc_8h_source_1l01142"/>01142 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;msp_ns&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01143"/>01143 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01144"/>01144 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01145"/>01145 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01146"/>01146 
<anchor xml:id="_cmsis__gcc_8h_source_1l01147"/>01147 
<anchor xml:id="_cmsis__gcc_8h_source_1l01153"/>01153 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga08b66e2b60a46fada36d90d2bc1e7c9b">__set_MSP</link>(uint32_t&#32;topOfMainStack)
<anchor xml:id="_cmsis__gcc_8h_source_1l01154"/>01154 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01155"/>01155 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;msp,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfMainStack)&#32;:&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01156"/>01156 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01157"/>01157 
<anchor xml:id="_cmsis__gcc_8h_source_1l01158"/>01158 
<anchor xml:id="_cmsis__gcc_8h_source_1l01159"/>01159 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01165"/>01165 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_MSP_NS(uint32_t&#32;topOfMainStack)
<anchor xml:id="_cmsis__gcc_8h_source_1l01166"/>01166 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01167"/>01167 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;msp_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfMainStack)&#32;:&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01168"/>01168 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01169"/>01169 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01170"/>01170 
<anchor xml:id="_cmsis__gcc_8h_source_1l01171"/>01171 
<anchor xml:id="_cmsis__gcc_8h_source_1l01172"/>01172 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01178"/>01178 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_SP_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01179"/>01179 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01180"/>01180 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01181"/>01181 
<anchor xml:id="_cmsis__gcc_8h_source_1l01182"/>01182 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;sp_ns&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01183"/>01183 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01184"/>01184 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01185"/>01185 
<anchor xml:id="_cmsis__gcc_8h_source_1l01186"/>01186 
<anchor xml:id="_cmsis__gcc_8h_source_1l01192"/>01192 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_SP_NS(uint32_t&#32;topOfStack)
<anchor xml:id="_cmsis__gcc_8h_source_1l01193"/>01193 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01194"/>01194 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;sp_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfStack)&#32;:&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01195"/>01195 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01196"/>01196 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01197"/>01197 
<anchor xml:id="_cmsis__gcc_8h_source_1l01198"/>01198 
<anchor xml:id="_cmsis__gcc_8h_source_1l01204"/>01204 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga4ff59fb9e280d19e79e6875863a65f0a">__get_PRIMASK</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01205"/>01205 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01206"/>01206 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01207"/>01207 
<anchor xml:id="_cmsis__gcc_8h_source_1l01208"/>01208 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;primask&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01209"/>01209 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01210"/>01210 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01211"/>01211 
<anchor xml:id="_cmsis__gcc_8h_source_1l01212"/>01212 
<anchor xml:id="_cmsis__gcc_8h_source_1l01213"/>01213 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01219"/>01219 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_PRIMASK_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01220"/>01220 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01221"/>01221 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01222"/>01222 
<anchor xml:id="_cmsis__gcc_8h_source_1l01223"/>01223 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;primask_ns&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01224"/>01224 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01225"/>01225 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01226"/>01226 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01227"/>01227 
<anchor xml:id="_cmsis__gcc_8h_source_1l01228"/>01228 
<anchor xml:id="_cmsis__gcc_8h_source_1l01234"/>01234 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1gaf4a17d3be7dbb066489836d849930d92">__set_PRIMASK</link>(uint32_t&#32;priMask)
<anchor xml:id="_cmsis__gcc_8h_source_1l01235"/>01235 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01236"/>01236 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;primask,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(priMask)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01237"/>01237 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01238"/>01238 
<anchor xml:id="_cmsis__gcc_8h_source_1l01239"/>01239 
<anchor xml:id="_cmsis__gcc_8h_source_1l01240"/>01240 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01246"/>01246 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_PRIMASK_NS(uint32_t&#32;priMask)
<anchor xml:id="_cmsis__gcc_8h_source_1l01247"/>01247 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01248"/>01248 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;primask_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(priMask)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01249"/>01249 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01250"/>01250 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01251"/>01251 
<anchor xml:id="_cmsis__gcc_8h_source_1l01252"/>01252 
<anchor xml:id="_cmsis__gcc_8h_source_1l01253"/>01253 <emphasis role="preprocessor">#if&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01254"/>01254 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01255"/>01255 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01261"/>01261 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__enable_fault_irq(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01262"/>01262 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01263"/>01263 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsie&#32;f&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01264"/>01264 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01265"/>01265 
<anchor xml:id="_cmsis__gcc_8h_source_1l01266"/>01266 
<anchor xml:id="_cmsis__gcc_8h_source_1l01272"/>01272 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__disable_fault_irq(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01273"/>01273 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01274"/>01274 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsid&#32;f&quot;</emphasis>&#32;:&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01275"/>01275 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01276"/>01276 
<anchor xml:id="_cmsis__gcc_8h_source_1l01277"/>01277 
<anchor xml:id="_cmsis__gcc_8h_source_1l01283"/>01283 __STATIC_FORCEINLINE&#32;uint32_t&#32;__get_BASEPRI(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01284"/>01284 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01285"/>01285 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01286"/>01286 
<anchor xml:id="_cmsis__gcc_8h_source_1l01287"/>01287 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;basepri&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01288"/>01288 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01289"/>01289 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01290"/>01290 
<anchor xml:id="_cmsis__gcc_8h_source_1l01291"/>01291 
<anchor xml:id="_cmsis__gcc_8h_source_1l01292"/>01292 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01298"/>01298 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_BASEPRI_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01299"/>01299 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01300"/>01300 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01301"/>01301 
<anchor xml:id="_cmsis__gcc_8h_source_1l01302"/>01302 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;basepri_ns&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01303"/>01303 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01304"/>01304 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01305"/>01305 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01306"/>01306 
<anchor xml:id="_cmsis__gcc_8h_source_1l01307"/>01307 
<anchor xml:id="_cmsis__gcc_8h_source_1l01313"/>01313 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_BASEPRI(uint32_t&#32;basePri)
<anchor xml:id="_cmsis__gcc_8h_source_1l01314"/>01314 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01315"/>01315 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;basepri,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(basePri)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01316"/>01316 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01317"/>01317 
<anchor xml:id="_cmsis__gcc_8h_source_1l01318"/>01318 
<anchor xml:id="_cmsis__gcc_8h_source_1l01319"/>01319 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01325"/>01325 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_BASEPRI_NS(uint32_t&#32;basePri)
<anchor xml:id="_cmsis__gcc_8h_source_1l01326"/>01326 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01327"/>01327 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;basepri_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(basePri)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01328"/>01328 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01329"/>01329 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01330"/>01330 
<anchor xml:id="_cmsis__gcc_8h_source_1l01331"/>01331 
<anchor xml:id="_cmsis__gcc_8h_source_1l01338"/>01338 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_BASEPRI_MAX(uint32_t&#32;basePri)
<anchor xml:id="_cmsis__gcc_8h_source_1l01339"/>01339 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01340"/>01340 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;basepri_max,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(basePri)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01341"/>01341 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01342"/>01342 
<anchor xml:id="_cmsis__gcc_8h_source_1l01343"/>01343 
<anchor xml:id="_cmsis__gcc_8h_source_1l01349"/>01349 __STATIC_FORCEINLINE&#32;uint32_t&#32;__get_FAULTMASK(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01350"/>01350 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01351"/>01351 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01352"/>01352 
<anchor xml:id="_cmsis__gcc_8h_source_1l01353"/>01353 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;faultmask&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01354"/>01354 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01355"/>01355 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01356"/>01356 
<anchor xml:id="_cmsis__gcc_8h_source_1l01357"/>01357 
<anchor xml:id="_cmsis__gcc_8h_source_1l01358"/>01358 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01364"/>01364 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_FAULTMASK_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01365"/>01365 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01366"/>01366 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01367"/>01367 
<anchor xml:id="_cmsis__gcc_8h_source_1l01368"/>01368 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;faultmask_ns&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01369"/>01369 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01370"/>01370 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01371"/>01371 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01372"/>01372 
<anchor xml:id="_cmsis__gcc_8h_source_1l01373"/>01373 
<anchor xml:id="_cmsis__gcc_8h_source_1l01379"/>01379 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FAULTMASK(uint32_t&#32;faultMask)
<anchor xml:id="_cmsis__gcc_8h_source_1l01380"/>01380 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01381"/>01381 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;faultmask,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(faultMask)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01382"/>01382 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01383"/>01383 
<anchor xml:id="_cmsis__gcc_8h_source_1l01384"/>01384 
<anchor xml:id="_cmsis__gcc_8h_source_1l01385"/>01385 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01391"/>01391 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_FAULTMASK_NS(uint32_t&#32;faultMask)
<anchor xml:id="_cmsis__gcc_8h_source_1l01392"/>01392 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01393"/>01393 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;faultmask_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(faultMask)&#32;:&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01394"/>01394 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01395"/>01395 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01396"/>01396 
<anchor xml:id="_cmsis__gcc_8h_source_1l01397"/>01397 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;((defined&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7M__&#32;&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01398"/>01398 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_7EM__&#32;&#32;&#32;&#32;&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01399"/>01399 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&#32;&#32;&#32;)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01400"/>01400 
<anchor xml:id="_cmsis__gcc_8h_source_1l01401"/>01401 
<anchor xml:id="_cmsis__gcc_8h_source_1l01402"/>01402 <emphasis role="preprocessor">#if&#32;((defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01403"/>01403 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_BASE__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_BASE__&#32;==&#32;1))&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01404"/>01404 
<anchor xml:id="_cmsis__gcc_8h_source_1l01414"/>01414 __STATIC_FORCEINLINE&#32;uint32_t&#32;__get_PSPLIM(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01415"/>01415 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01416"/>01416 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&amp;&amp;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01417"/>01417 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined&#32;(__ARM_FEATURE_CMSE)&#32;||&#32;(__ARM_FEATURE_CMSE&#32;&lt;&#32;3)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01418"/>01418 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;PSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01419"/>01419 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0U;
<anchor xml:id="_cmsis__gcc_8h_source_1l01420"/>01420 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01421"/>01421 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01422"/>01422 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;psplim&quot;</emphasis>&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01423"/>01423 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01424"/>01424 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01425"/>01425 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01426"/>01426 
<anchor xml:id="_cmsis__gcc_8h_source_1l01427"/>01427 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01436"/>01436 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_PSPLIM_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01437"/>01437 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01438"/>01438 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01439"/>01439 &#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;PSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01440"/>01440 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0U;
<anchor xml:id="_cmsis__gcc_8h_source_1l01441"/>01441 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01442"/>01442 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01443"/>01443 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;psplim_ns&quot;</emphasis>&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01444"/>01444 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01445"/>01445 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01446"/>01446 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01447"/>01447 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01448"/>01448 
<anchor xml:id="_cmsis__gcc_8h_source_1l01449"/>01449 
<anchor xml:id="_cmsis__gcc_8h_source_1l01459"/>01459 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PSPLIM(uint32_t&#32;ProcStackPtrLimit)
<anchor xml:id="_cmsis__gcc_8h_source_1l01460"/>01460 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01461"/>01461 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&amp;&amp;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01462"/>01462 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined&#32;(__ARM_FEATURE_CMSE)&#32;||&#32;(__ARM_FEATURE_CMSE&#32;&lt;&#32;3)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01463"/>01463 &#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;PSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01464"/>01464 &#32;&#32;(void)ProcStackPtrLimit;
<anchor xml:id="_cmsis__gcc_8h_source_1l01465"/>01465 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01466"/>01466 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;psplim,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(ProcStackPtrLimit));
<anchor xml:id="_cmsis__gcc_8h_source_1l01467"/>01467 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01468"/>01468 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01469"/>01469 
<anchor xml:id="_cmsis__gcc_8h_source_1l01470"/>01470 
<anchor xml:id="_cmsis__gcc_8h_source_1l01471"/>01471 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;&#32;&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01480"/>01480 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_PSPLIM_NS(uint32_t&#32;ProcStackPtrLimit)
<anchor xml:id="_cmsis__gcc_8h_source_1l01481"/>01481 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01482"/>01482 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01483"/>01483 &#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;PSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01484"/>01484 &#32;&#32;(void)ProcStackPtrLimit;
<anchor xml:id="_cmsis__gcc_8h_source_1l01485"/>01485 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01486"/>01486 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;psplim_ns,&#32;%0\n&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(ProcStackPtrLimit));
<anchor xml:id="_cmsis__gcc_8h_source_1l01487"/>01487 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01488"/>01488 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01489"/>01489 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01490"/>01490 
<anchor xml:id="_cmsis__gcc_8h_source_1l01491"/>01491 
<anchor xml:id="_cmsis__gcc_8h_source_1l01501"/>01501 __STATIC_FORCEINLINE&#32;uint32_t&#32;__get_MSPLIM(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01502"/>01502 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01503"/>01503 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&amp;&amp;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01504"/>01504 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined&#32;(__ARM_FEATURE_CMSE)&#32;||&#32;(__ARM_FEATURE_CMSE&#32;&lt;&#32;3)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01505"/>01505 &#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;MSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01506"/>01506 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0U;
<anchor xml:id="_cmsis__gcc_8h_source_1l01507"/>01507 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01508"/>01508 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01509"/>01509 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;msplim&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01510"/>01510 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01511"/>01511 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01512"/>01512 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01513"/>01513 
<anchor xml:id="_cmsis__gcc_8h_source_1l01514"/>01514 
<anchor xml:id="_cmsis__gcc_8h_source_1l01515"/>01515 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;&#32;&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01524"/>01524 __STATIC_FORCEINLINE&#32;uint32_t&#32;__TZ_get_MSPLIM_NS(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01525"/>01525 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01526"/>01526 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01527"/>01527 &#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;MSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01528"/>01528 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0U;
<anchor xml:id="_cmsis__gcc_8h_source_1l01529"/>01529 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01530"/>01530 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01531"/>01531 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;msplim_ns&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01532"/>01532 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01533"/>01533 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01534"/>01534 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01535"/>01535 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01536"/>01536 
<anchor xml:id="_cmsis__gcc_8h_source_1l01537"/>01537 
<anchor xml:id="_cmsis__gcc_8h_source_1l01547"/>01547 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_MSPLIM(uint32_t&#32;MainStackPtrLimit)
<anchor xml:id="_cmsis__gcc_8h_source_1l01548"/>01548 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01549"/>01549 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;&amp;&amp;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01550"/>01550 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined&#32;(__ARM_FEATURE_CMSE)&#32;||&#32;(__ARM_FEATURE_CMSE&#32;&lt;&#32;3)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01551"/>01551 &#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;MSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01552"/>01552 &#32;&#32;(void)MainStackPtrLimit;
<anchor xml:id="_cmsis__gcc_8h_source_1l01553"/>01553 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01554"/>01554 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;msplim,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(MainStackPtrLimit));
<anchor xml:id="_cmsis__gcc_8h_source_1l01555"/>01555 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01556"/>01556 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01557"/>01557 
<anchor xml:id="_cmsis__gcc_8h_source_1l01558"/>01558 
<anchor xml:id="_cmsis__gcc_8h_source_1l01559"/>01559 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_CMSE&#32;&#32;)&#32;&amp;&amp;&#32;(__ARM_FEATURE_CMSE&#32;&#32;&#32;==&#32;3))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01568"/>01568 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__TZ_set_MSPLIM_NS(uint32_t&#32;MainStackPtrLimit)
<anchor xml:id="_cmsis__gcc_8h_source_1l01569"/>01569 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01570"/>01570 <emphasis role="preprocessor">#if&#32;(!(defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1)))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01571"/>01571 &#32;&#32;<emphasis role="comment">//&#32;without&#32;main&#32;extensions,&#32;the&#32;non-secure&#32;MSPLIM&#32;is&#32;RAZ/WI</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01572"/>01572 &#32;&#32;(void)MainStackPtrLimit;
<anchor xml:id="_cmsis__gcc_8h_source_1l01573"/>01573 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01574"/>01574 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;msplim_ns,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(MainStackPtrLimit));
<anchor xml:id="_cmsis__gcc_8h_source_1l01575"/>01575 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01576"/>01576 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01577"/>01577 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01578"/>01578 
<anchor xml:id="_cmsis__gcc_8h_source_1l01579"/>01579 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;((defined&#32;(__ARM_ARCH_8M_MAIN__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_MAIN__&#32;==&#32;1))&#32;||&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01580"/>01580 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(defined&#32;(__ARM_ARCH_8M_BASE__&#32;)&#32;&amp;&amp;&#32;(__ARM_ARCH_8M_BASE__&#32;==&#32;1))&#32;&#32;&#32;&#32;)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01581"/>01581 
<anchor xml:id="_cmsis__gcc_8h_source_1l01582"/>01582 
<anchor xml:id="_cmsis__gcc_8h_source_1l01588"/>01588 __STATIC_FORCEINLINE&#32;uint32_t&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga4d0739b1355ca5642a7ce76df1271f01">__get_FPSCR</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_cmsis__gcc_8h_source_1l01589"/>01589 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01590"/>01590 <emphasis role="preprocessor">#if&#32;((defined&#32;(__FPU_PRESENT)&#32;&amp;&amp;&#32;(__FPU_PRESENT&#32;==&#32;1U))&#32;&amp;&amp;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01591"/>01591 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__FPU_USED&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__FPU_USED&#32;&#32;&#32;&#32;==&#32;1U))&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01592"/>01592 <emphasis role="preprocessor">#if&#32;__has_builtin(__builtin_arm_get_fpscr)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01593"/>01593 <emphasis role="comment">//&#32;Re-enable&#32;using&#32;built-in&#32;when&#32;GCC&#32;has&#32;been&#32;fixed</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01594"/>01594 <emphasis role="comment">//&#32;||&#32;(__GNUC__&#32;&gt;&#32;7)&#32;||&#32;(__GNUC__&#32;==&#32;7&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;2)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01595"/>01595 &#32;&#32;<emphasis role="comment">/*&#32;see&#32;https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01596"/>01596 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_arm_get_fpscr();
<anchor xml:id="_cmsis__gcc_8h_source_1l01597"/>01597 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01598"/>01598 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01599"/>01599 
<anchor xml:id="_cmsis__gcc_8h_source_1l01600"/>01600 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;VMRS&#32;%0,&#32;fpscr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01601"/>01601 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01602"/>01602 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01603"/>01603 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01604"/>01604 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(0U);
<anchor xml:id="_cmsis__gcc_8h_source_1l01605"/>01605 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01606"/>01606 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01607"/>01607 
<anchor xml:id="_cmsis__gcc_8h_source_1l01608"/>01608 
<anchor xml:id="_cmsis__gcc_8h_source_1l01614"/>01614 __STATIC_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group___c_m_s_i_s___core___reg_acc_functions_1ga3cd91c42ad2793c3f3ae553a1b975512">__set_FPSCR</link>(uint32_t&#32;fpscr)
<anchor xml:id="_cmsis__gcc_8h_source_1l01615"/>01615 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01616"/>01616 <emphasis role="preprocessor">#if&#32;((defined&#32;(__FPU_PRESENT)&#32;&amp;&amp;&#32;(__FPU_PRESENT&#32;==&#32;1U))&#32;&amp;&amp;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01617"/>01617 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;(defined&#32;(__FPU_USED&#32;&#32;&#32;)&#32;&amp;&amp;&#32;(__FPU_USED&#32;&#32;&#32;&#32;==&#32;1U))&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01618"/>01618 <emphasis role="preprocessor">#if&#32;__has_builtin(__builtin_arm_set_fpscr)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01619"/>01619 <emphasis role="comment">//&#32;Re-enable&#32;using&#32;built-in&#32;when&#32;GCC&#32;has&#32;been&#32;fixed</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01620"/>01620 <emphasis role="comment">//&#32;||&#32;(__GNUC__&#32;&gt;&#32;7)&#32;||&#32;(__GNUC__&#32;==&#32;7&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;2)</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01621"/>01621 &#32;&#32;<emphasis role="comment">/*&#32;see&#32;https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01622"/>01622 &#32;&#32;__builtin_arm_set_fpscr(fpscr);
<anchor xml:id="_cmsis__gcc_8h_source_1l01623"/>01623 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01624"/>01624 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;VMSR&#32;fpscr,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(fpscr)&#32;:&#32;<emphasis role="stringliteral">&quot;vfpcc&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;memory&quot;</emphasis>);
<anchor xml:id="_cmsis__gcc_8h_source_1l01625"/>01625 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01626"/>01626 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01627"/>01627 &#32;&#32;(void)fpscr;
<anchor xml:id="_cmsis__gcc_8h_source_1l01628"/>01628 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01629"/>01629 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01630"/>01630 
<anchor xml:id="_cmsis__gcc_8h_source_1l01631"/>01631 
<anchor xml:id="_cmsis__gcc_8h_source_1l01635"/>01635 <emphasis role="comment">/*&#32;###################&#32;&#32;Compiler&#32;specific&#32;Intrinsics&#32;&#32;###########################&#32;*/</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01641"/>01641 <emphasis role="preprocessor">#if&#32;(defined&#32;(__ARM_FEATURE_DSP)&#32;&amp;&amp;&#32;(__ARM_FEATURE_DSP&#32;==&#32;1))</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01642"/>01642 
<anchor xml:id="_cmsis__gcc_8h_source_1l01643"/>01643 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01644"/>01644 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01645"/>01645 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01646"/>01646 
<anchor xml:id="_cmsis__gcc_8h_source_1l01647"/>01647 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01648"/>01648 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01649"/>01649 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01650"/>01650 
<anchor xml:id="_cmsis__gcc_8h_source_1l01651"/>01651 __STATIC_FORCEINLINE&#32;uint32_t&#32;__QADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01652"/>01652 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01653"/>01653 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01654"/>01654 
<anchor xml:id="_cmsis__gcc_8h_source_1l01655"/>01655 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;qadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01656"/>01656 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01657"/>01657 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01658"/>01658 
<anchor xml:id="_cmsis__gcc_8h_source_1l01659"/>01659 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SHADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01660"/>01660 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01661"/>01661 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01662"/>01662 
<anchor xml:id="_cmsis__gcc_8h_source_1l01663"/>01663 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;shadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01664"/>01664 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01665"/>01665 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01666"/>01666 
<anchor xml:id="_cmsis__gcc_8h_source_1l01667"/>01667 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01668"/>01668 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01669"/>01669 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01670"/>01670 
<anchor xml:id="_cmsis__gcc_8h_source_1l01671"/>01671 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01672"/>01672 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01673"/>01673 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01674"/>01674 
<anchor xml:id="_cmsis__gcc_8h_source_1l01675"/>01675 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UQADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01676"/>01676 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01677"/>01677 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01678"/>01678 
<anchor xml:id="_cmsis__gcc_8h_source_1l01679"/>01679 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uqadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01680"/>01680 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01681"/>01681 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01682"/>01682 
<anchor xml:id="_cmsis__gcc_8h_source_1l01683"/>01683 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UHADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01684"/>01684 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01685"/>01685 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01686"/>01686 
<anchor xml:id="_cmsis__gcc_8h_source_1l01687"/>01687 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uhadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01688"/>01688 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01689"/>01689 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01690"/>01690 
<anchor xml:id="_cmsis__gcc_8h_source_1l01691"/>01691 
<anchor xml:id="_cmsis__gcc_8h_source_1l01692"/>01692 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01693"/>01693 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01694"/>01694 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01695"/>01695 
<anchor xml:id="_cmsis__gcc_8h_source_1l01696"/>01696 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ssub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01697"/>01697 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01698"/>01698 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01699"/>01699 
<anchor xml:id="_cmsis__gcc_8h_source_1l01700"/>01700 __STATIC_FORCEINLINE&#32;uint32_t&#32;__QSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01701"/>01701 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01702"/>01702 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01703"/>01703 
<anchor xml:id="_cmsis__gcc_8h_source_1l01704"/>01704 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;qsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01705"/>01705 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01706"/>01706 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01707"/>01707 
<anchor xml:id="_cmsis__gcc_8h_source_1l01708"/>01708 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SHSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01709"/>01709 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01710"/>01710 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01711"/>01711 
<anchor xml:id="_cmsis__gcc_8h_source_1l01712"/>01712 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;shsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01713"/>01713 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01714"/>01714 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01715"/>01715 
<anchor xml:id="_cmsis__gcc_8h_source_1l01716"/>01716 __STATIC_FORCEINLINE&#32;uint32_t&#32;__USUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01717"/>01717 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01718"/>01718 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01719"/>01719 
<anchor xml:id="_cmsis__gcc_8h_source_1l01720"/>01720 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01721"/>01721 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01722"/>01722 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01723"/>01723 
<anchor xml:id="_cmsis__gcc_8h_source_1l01724"/>01724 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UQSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01725"/>01725 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01726"/>01726 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01727"/>01727 
<anchor xml:id="_cmsis__gcc_8h_source_1l01728"/>01728 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uqsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01729"/>01729 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01730"/>01730 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01731"/>01731 
<anchor xml:id="_cmsis__gcc_8h_source_1l01732"/>01732 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UHSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01733"/>01733 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01734"/>01734 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01735"/>01735 
<anchor xml:id="_cmsis__gcc_8h_source_1l01736"/>01736 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uhsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01737"/>01737 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01738"/>01738 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01739"/>01739 
<anchor xml:id="_cmsis__gcc_8h_source_1l01740"/>01740 
<anchor xml:id="_cmsis__gcc_8h_source_1l01741"/>01741 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01742"/>01742 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01743"/>01743 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01744"/>01744 
<anchor xml:id="_cmsis__gcc_8h_source_1l01745"/>01745 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01746"/>01746 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01747"/>01747 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01748"/>01748 
<anchor xml:id="_cmsis__gcc_8h_source_1l01749"/>01749 __STATIC_FORCEINLINE&#32;uint32_t&#32;__QADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01750"/>01750 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01751"/>01751 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01752"/>01752 
<anchor xml:id="_cmsis__gcc_8h_source_1l01753"/>01753 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;qadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01754"/>01754 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01755"/>01755 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01756"/>01756 
<anchor xml:id="_cmsis__gcc_8h_source_1l01757"/>01757 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SHADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01758"/>01758 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01759"/>01759 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01760"/>01760 
<anchor xml:id="_cmsis__gcc_8h_source_1l01761"/>01761 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;shadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01762"/>01762 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01763"/>01763 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01764"/>01764 
<anchor xml:id="_cmsis__gcc_8h_source_1l01765"/>01765 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01766"/>01766 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01767"/>01767 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01768"/>01768 
<anchor xml:id="_cmsis__gcc_8h_source_1l01769"/>01769 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01770"/>01770 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01771"/>01771 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01772"/>01772 
<anchor xml:id="_cmsis__gcc_8h_source_1l01773"/>01773 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UQADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01774"/>01774 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01775"/>01775 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01776"/>01776 
<anchor xml:id="_cmsis__gcc_8h_source_1l01777"/>01777 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uqadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01778"/>01778 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01779"/>01779 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01780"/>01780 
<anchor xml:id="_cmsis__gcc_8h_source_1l01781"/>01781 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UHADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01782"/>01782 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01783"/>01783 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01784"/>01784 
<anchor xml:id="_cmsis__gcc_8h_source_1l01785"/>01785 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uhadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01786"/>01786 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01787"/>01787 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01788"/>01788 
<anchor xml:id="_cmsis__gcc_8h_source_1l01789"/>01789 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01790"/>01790 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01791"/>01791 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01792"/>01792 
<anchor xml:id="_cmsis__gcc_8h_source_1l01793"/>01793 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ssub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01794"/>01794 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01795"/>01795 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01796"/>01796 
<anchor xml:id="_cmsis__gcc_8h_source_1l01797"/>01797 __STATIC_FORCEINLINE&#32;uint32_t&#32;__QSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01798"/>01798 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01799"/>01799 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01800"/>01800 
<anchor xml:id="_cmsis__gcc_8h_source_1l01801"/>01801 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;qsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01802"/>01802 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01803"/>01803 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01804"/>01804 
<anchor xml:id="_cmsis__gcc_8h_source_1l01805"/>01805 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SHSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01806"/>01806 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01807"/>01807 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01808"/>01808 
<anchor xml:id="_cmsis__gcc_8h_source_1l01809"/>01809 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;shsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01810"/>01810 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01811"/>01811 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01812"/>01812 
<anchor xml:id="_cmsis__gcc_8h_source_1l01813"/>01813 __STATIC_FORCEINLINE&#32;uint32_t&#32;__USUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01814"/>01814 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01815"/>01815 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01816"/>01816 
<anchor xml:id="_cmsis__gcc_8h_source_1l01817"/>01817 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01818"/>01818 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01819"/>01819 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01820"/>01820 
<anchor xml:id="_cmsis__gcc_8h_source_1l01821"/>01821 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UQSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01822"/>01822 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01823"/>01823 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01824"/>01824 
<anchor xml:id="_cmsis__gcc_8h_source_1l01825"/>01825 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uqsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01826"/>01826 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01827"/>01827 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01828"/>01828 
<anchor xml:id="_cmsis__gcc_8h_source_1l01829"/>01829 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UHSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01830"/>01830 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01831"/>01831 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01832"/>01832 
<anchor xml:id="_cmsis__gcc_8h_source_1l01833"/>01833 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uhsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01834"/>01834 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01835"/>01835 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01836"/>01836 
<anchor xml:id="_cmsis__gcc_8h_source_1l01837"/>01837 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01838"/>01838 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01839"/>01839 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01840"/>01840 
<anchor xml:id="_cmsis__gcc_8h_source_1l01841"/>01841 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01842"/>01842 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01843"/>01843 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01844"/>01844 
<anchor xml:id="_cmsis__gcc_8h_source_1l01845"/>01845 __STATIC_FORCEINLINE&#32;uint32_t&#32;__QASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01846"/>01846 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01847"/>01847 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01848"/>01848 
<anchor xml:id="_cmsis__gcc_8h_source_1l01849"/>01849 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;qasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01850"/>01850 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01851"/>01851 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01852"/>01852 
<anchor xml:id="_cmsis__gcc_8h_source_1l01853"/>01853 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SHASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01854"/>01854 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01855"/>01855 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01856"/>01856 
<anchor xml:id="_cmsis__gcc_8h_source_1l01857"/>01857 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;shasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01858"/>01858 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01859"/>01859 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01860"/>01860 
<anchor xml:id="_cmsis__gcc_8h_source_1l01861"/>01861 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01862"/>01862 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01863"/>01863 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01864"/>01864 
<anchor xml:id="_cmsis__gcc_8h_source_1l01865"/>01865 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01866"/>01866 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01867"/>01867 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01868"/>01868 
<anchor xml:id="_cmsis__gcc_8h_source_1l01869"/>01869 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UQASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01870"/>01870 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01871"/>01871 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01872"/>01872 
<anchor xml:id="_cmsis__gcc_8h_source_1l01873"/>01873 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uqasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01874"/>01874 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01875"/>01875 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01876"/>01876 
<anchor xml:id="_cmsis__gcc_8h_source_1l01877"/>01877 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UHASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01878"/>01878 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01879"/>01879 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01880"/>01880 
<anchor xml:id="_cmsis__gcc_8h_source_1l01881"/>01881 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uhasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01882"/>01882 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01883"/>01883 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01884"/>01884 
<anchor xml:id="_cmsis__gcc_8h_source_1l01885"/>01885 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01886"/>01886 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01887"/>01887 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01888"/>01888 
<anchor xml:id="_cmsis__gcc_8h_source_1l01889"/>01889 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ssax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01890"/>01890 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01891"/>01891 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01892"/>01892 
<anchor xml:id="_cmsis__gcc_8h_source_1l01893"/>01893 __STATIC_FORCEINLINE&#32;uint32_t&#32;__QSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01894"/>01894 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01895"/>01895 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01896"/>01896 
<anchor xml:id="_cmsis__gcc_8h_source_1l01897"/>01897 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;qsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01898"/>01898 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01899"/>01899 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01900"/>01900 
<anchor xml:id="_cmsis__gcc_8h_source_1l01901"/>01901 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SHSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01902"/>01902 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01903"/>01903 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01904"/>01904 
<anchor xml:id="_cmsis__gcc_8h_source_1l01905"/>01905 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;shsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01906"/>01906 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01907"/>01907 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01908"/>01908 
<anchor xml:id="_cmsis__gcc_8h_source_1l01909"/>01909 __STATIC_FORCEINLINE&#32;uint32_t&#32;__USAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01910"/>01910 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01911"/>01911 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01912"/>01912 
<anchor xml:id="_cmsis__gcc_8h_source_1l01913"/>01913 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01914"/>01914 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01915"/>01915 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01916"/>01916 
<anchor xml:id="_cmsis__gcc_8h_source_1l01917"/>01917 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UQSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01918"/>01918 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01919"/>01919 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01920"/>01920 
<anchor xml:id="_cmsis__gcc_8h_source_1l01921"/>01921 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uqsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01922"/>01922 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01923"/>01923 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01924"/>01924 
<anchor xml:id="_cmsis__gcc_8h_source_1l01925"/>01925 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UHSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01926"/>01926 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01927"/>01927 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01928"/>01928 
<anchor xml:id="_cmsis__gcc_8h_source_1l01929"/>01929 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uhsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01930"/>01930 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01931"/>01931 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01932"/>01932 
<anchor xml:id="_cmsis__gcc_8h_source_1l01933"/>01933 __STATIC_FORCEINLINE&#32;uint32_t&#32;__USAD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01934"/>01934 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01935"/>01935 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01936"/>01936 
<anchor xml:id="_cmsis__gcc_8h_source_1l01937"/>01937 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;usad8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01938"/>01938 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01939"/>01939 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01940"/>01940 
<anchor xml:id="_cmsis__gcc_8h_source_1l01941"/>01941 __STATIC_FORCEINLINE&#32;uint32_t&#32;__USADA8(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
<anchor xml:id="_cmsis__gcc_8h_source_1l01942"/>01942 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01943"/>01943 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01944"/>01944 
<anchor xml:id="_cmsis__gcc_8h_source_1l01945"/>01945 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;usada8&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01946"/>01946 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01947"/>01947 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01948"/>01948 
<anchor xml:id="_cmsis__gcc_8h_source_1l01949"/>01949 <emphasis role="preprocessor">#define&#32;__SSAT16(ARG1,&#32;ARG2)&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01950"/>01950 <emphasis role="preprocessor">__extension__&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01951"/>01951 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01952"/>01952 <emphasis role="preprocessor">&#32;&#32;int32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01953"/>01953 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;ssat16&#32;%0,&#32;%1,&#32;%2&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;:&#32;&quot;cc&quot;&#32;);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01954"/>01954 <emphasis role="preprocessor">&#32;&#32;__RES;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01955"/>01955 <emphasis role="preprocessor">&#32;})</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01956"/>01956 
<anchor xml:id="_cmsis__gcc_8h_source_1l01957"/>01957 <emphasis role="preprocessor">#define&#32;__USAT16(ARG1,&#32;ARG2)&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01958"/>01958 <emphasis role="preprocessor">__extension__&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01959"/>01959 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01960"/>01960 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01961"/>01961 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;usat16&#32;%0,&#32;%1,&#32;%2&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;:&#32;&quot;cc&quot;&#32;);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01962"/>01962 <emphasis role="preprocessor">&#32;&#32;__RES;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01963"/>01963 <emphasis role="preprocessor">&#32;})</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l01964"/>01964 
<anchor xml:id="_cmsis__gcc_8h_source_1l01965"/>01965 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UXTB16(uint32_t&#32;op1)
<anchor xml:id="_cmsis__gcc_8h_source_1l01966"/>01966 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01967"/>01967 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01968"/>01968 
<anchor xml:id="_cmsis__gcc_8h_source_1l01969"/>01969 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uxtb16&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1));
<anchor xml:id="_cmsis__gcc_8h_source_1l01970"/>01970 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01971"/>01971 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01972"/>01972 
<anchor xml:id="_cmsis__gcc_8h_source_1l01973"/>01973 __STATIC_FORCEINLINE&#32;uint32_t&#32;__UXTAB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l01974"/>01974 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01975"/>01975 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01976"/>01976 
<anchor xml:id="_cmsis__gcc_8h_source_1l01977"/>01977 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;uxtab16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01978"/>01978 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01979"/>01979 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01980"/>01980 
<anchor xml:id="_cmsis__gcc_8h_source_1l01981"/>01981 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SXTB16(uint32_t&#32;op1)
<anchor xml:id="_cmsis__gcc_8h_source_1l01982"/>01982 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01983"/>01983 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01984"/>01984 
<anchor xml:id="_cmsis__gcc_8h_source_1l01985"/>01985 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;sxtb16&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1));
<anchor xml:id="_cmsis__gcc_8h_source_1l01986"/>01986 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l01987"/>01987 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01988"/>01988 
<anchor xml:id="_cmsis__gcc_8h_source_1l01989"/>01989 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SXTB16_RORn(uint32_t&#32;op1,&#32;uint32_t&#32;rotate)
<anchor xml:id="_cmsis__gcc_8h_source_1l01990"/>01990 {
<anchor xml:id="_cmsis__gcc_8h_source_1l01991"/>01991 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01992"/>01992 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(rotate)&#32;&amp;&amp;&#32;((rotate&#32;==&#32;8U)&#32;||&#32;(rotate&#32;==&#32;16U)&#32;||&#32;(rotate&#32;==&#32;24U)))&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l01993"/>01993 &#32;&#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sxtb16&#32;%0,&#32;%1,&#32;ROR&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>&#32;(rotate)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l01994"/>01994 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l01995"/>01995 &#32;&#32;&#32;&#32;result&#32;=&#32;__SXTB16(<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga95b9bd281ddeda378b85afdb8f2ced86">__ROR</link>(op1,&#32;rotate))&#32;;
<anchor xml:id="_cmsis__gcc_8h_source_1l01996"/>01996 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l01997"/>01997 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l01998"/>01998 }
<anchor xml:id="_cmsis__gcc_8h_source_1l01999"/>01999 
<anchor xml:id="_cmsis__gcc_8h_source_1l02000"/>02000 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SXTAB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02001"/>02001 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02002"/>02002 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02003"/>02003 
<anchor xml:id="_cmsis__gcc_8h_source_1l02004"/>02004 &#32;&#32;__ASM&#32;(<emphasis role="stringliteral">&quot;sxtab16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02005"/>02005 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02006"/>02006 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02007"/>02007 
<anchor xml:id="_cmsis__gcc_8h_source_1l02008"/>02008 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SXTAB16_RORn(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;rotate)
<anchor xml:id="_cmsis__gcc_8h_source_1l02009"/>02009 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02010"/>02010 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02011"/>02011 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(rotate)&#32;&amp;&amp;&#32;((rotate&#32;==&#32;8U)&#32;||&#32;(rotate&#32;==&#32;16U)&#32;||&#32;(rotate&#32;==&#32;24U)))&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l02012"/>02012 &#32;&#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sxtab16&#32;%0,&#32;%1,&#32;%2,&#32;ROR&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1)&#32;,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>&#32;(rotate));
<anchor xml:id="_cmsis__gcc_8h_source_1l02013"/>02013 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_cmsis__gcc_8h_source_1l02014"/>02014 &#32;&#32;&#32;&#32;result&#32;=&#32;__SXTAB16(op1,&#32;<link linkend="_group___c_m_s_i_s___core___instruction_interface_1ga95b9bd281ddeda378b85afdb8f2ced86">__ROR</link>(op2,&#32;rotate));
<anchor xml:id="_cmsis__gcc_8h_source_1l02015"/>02015 &#32;&#32;}
<anchor xml:id="_cmsis__gcc_8h_source_1l02016"/>02016 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02017"/>02017 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02018"/>02018 
<anchor xml:id="_cmsis__gcc_8h_source_1l02019"/>02019 
<anchor xml:id="_cmsis__gcc_8h_source_1l02020"/>02020 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMUAD&#32;&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02021"/>02021 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02022"/>02022 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02023"/>02023 
<anchor xml:id="_cmsis__gcc_8h_source_1l02024"/>02024 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smuad&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02025"/>02025 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02026"/>02026 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02027"/>02027 
<anchor xml:id="_cmsis__gcc_8h_source_1l02028"/>02028 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMUADX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02029"/>02029 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02030"/>02030 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02031"/>02031 
<anchor xml:id="_cmsis__gcc_8h_source_1l02032"/>02032 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smuadx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02033"/>02033 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02034"/>02034 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02035"/>02035 
<anchor xml:id="_cmsis__gcc_8h_source_1l02036"/>02036 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMLAD&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
<anchor xml:id="_cmsis__gcc_8h_source_1l02037"/>02037 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02038"/>02038 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02039"/>02039 
<anchor xml:id="_cmsis__gcc_8h_source_1l02040"/>02040 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlad&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02041"/>02041 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02042"/>02042 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02043"/>02043 
<anchor xml:id="_cmsis__gcc_8h_source_1l02044"/>02044 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMLADX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
<anchor xml:id="_cmsis__gcc_8h_source_1l02045"/>02045 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02046"/>02046 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02047"/>02047 
<anchor xml:id="_cmsis__gcc_8h_source_1l02048"/>02048 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smladx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02049"/>02049 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02050"/>02050 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02051"/>02051 
<anchor xml:id="_cmsis__gcc_8h_source_1l02052"/>02052 __STATIC_FORCEINLINE&#32;uint64_t&#32;__SMLALD&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint64_t&#32;acc)
<anchor xml:id="_cmsis__gcc_8h_source_1l02053"/>02053 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02054"/>02054 &#32;&#32;<emphasis role="keyword">union&#32;</emphasis>llreg_u{
<anchor xml:id="_cmsis__gcc_8h_source_1l02055"/>02055 &#32;&#32;&#32;&#32;uint32_t&#32;w32[2];
<anchor xml:id="_cmsis__gcc_8h_source_1l02056"/>02056 &#32;&#32;&#32;&#32;uint64_t&#32;w64;
<anchor xml:id="_cmsis__gcc_8h_source_1l02057"/>02057 &#32;&#32;}&#32;llr;
<anchor xml:id="_cmsis__gcc_8h_source_1l02058"/>02058 &#32;&#32;llr.w64&#32;=&#32;acc;
<anchor xml:id="_cmsis__gcc_8h_source_1l02059"/>02059 
<anchor xml:id="_cmsis__gcc_8h_source_1l02060"/>02060 <emphasis role="preprocessor">#ifndef&#32;__ARMEB__&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Little&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02061"/>02061 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlald&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[1])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02062"/>02062 <emphasis role="preprocessor">#else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Big&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02063"/>02063 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlald&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[0])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02064"/>02064 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02065"/>02065 
<anchor xml:id="_cmsis__gcc_8h_source_1l02066"/>02066 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(llr.w64);
<anchor xml:id="_cmsis__gcc_8h_source_1l02067"/>02067 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02068"/>02068 
<anchor xml:id="_cmsis__gcc_8h_source_1l02069"/>02069 __STATIC_FORCEINLINE&#32;uint64_t&#32;__SMLALDX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint64_t&#32;acc)
<anchor xml:id="_cmsis__gcc_8h_source_1l02070"/>02070 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02071"/>02071 &#32;&#32;<emphasis role="keyword">union&#32;</emphasis>llreg_u{
<anchor xml:id="_cmsis__gcc_8h_source_1l02072"/>02072 &#32;&#32;&#32;&#32;uint32_t&#32;w32[2];
<anchor xml:id="_cmsis__gcc_8h_source_1l02073"/>02073 &#32;&#32;&#32;&#32;uint64_t&#32;w64;
<anchor xml:id="_cmsis__gcc_8h_source_1l02074"/>02074 &#32;&#32;}&#32;llr;
<anchor xml:id="_cmsis__gcc_8h_source_1l02075"/>02075 &#32;&#32;llr.w64&#32;=&#32;acc;
<anchor xml:id="_cmsis__gcc_8h_source_1l02076"/>02076 
<anchor xml:id="_cmsis__gcc_8h_source_1l02077"/>02077 <emphasis role="preprocessor">#ifndef&#32;__ARMEB__&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Little&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02078"/>02078 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlaldx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[1])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02079"/>02079 <emphasis role="preprocessor">#else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Big&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02080"/>02080 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlaldx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[0])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02081"/>02081 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02082"/>02082 
<anchor xml:id="_cmsis__gcc_8h_source_1l02083"/>02083 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(llr.w64);
<anchor xml:id="_cmsis__gcc_8h_source_1l02084"/>02084 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02085"/>02085 
<anchor xml:id="_cmsis__gcc_8h_source_1l02086"/>02086 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMUSD&#32;&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02087"/>02087 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02088"/>02088 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02089"/>02089 
<anchor xml:id="_cmsis__gcc_8h_source_1l02090"/>02090 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smusd&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02091"/>02091 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02092"/>02092 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02093"/>02093 
<anchor xml:id="_cmsis__gcc_8h_source_1l02094"/>02094 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMUSDX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02095"/>02095 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02096"/>02096 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02097"/>02097 
<anchor xml:id="_cmsis__gcc_8h_source_1l02098"/>02098 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smusdx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02099"/>02099 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02100"/>02100 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02101"/>02101 
<anchor xml:id="_cmsis__gcc_8h_source_1l02102"/>02102 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMLSD&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
<anchor xml:id="_cmsis__gcc_8h_source_1l02103"/>02103 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02104"/>02104 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02105"/>02105 
<anchor xml:id="_cmsis__gcc_8h_source_1l02106"/>02106 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsd&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02107"/>02107 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02108"/>02108 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02109"/>02109 
<anchor xml:id="_cmsis__gcc_8h_source_1l02110"/>02110 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SMLSDX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
<anchor xml:id="_cmsis__gcc_8h_source_1l02111"/>02111 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02112"/>02112 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02113"/>02113 
<anchor xml:id="_cmsis__gcc_8h_source_1l02114"/>02114 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsdx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02115"/>02115 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02116"/>02116 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02117"/>02117 
<anchor xml:id="_cmsis__gcc_8h_source_1l02118"/>02118 __STATIC_FORCEINLINE&#32;uint64_t&#32;__SMLSLD&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint64_t&#32;acc)
<anchor xml:id="_cmsis__gcc_8h_source_1l02119"/>02119 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02120"/>02120 &#32;&#32;<emphasis role="keyword">union&#32;</emphasis>llreg_u{
<anchor xml:id="_cmsis__gcc_8h_source_1l02121"/>02121 &#32;&#32;&#32;&#32;uint32_t&#32;w32[2];
<anchor xml:id="_cmsis__gcc_8h_source_1l02122"/>02122 &#32;&#32;&#32;&#32;uint64_t&#32;w64;
<anchor xml:id="_cmsis__gcc_8h_source_1l02123"/>02123 &#32;&#32;}&#32;llr;
<anchor xml:id="_cmsis__gcc_8h_source_1l02124"/>02124 &#32;&#32;llr.w64&#32;=&#32;acc;
<anchor xml:id="_cmsis__gcc_8h_source_1l02125"/>02125 
<anchor xml:id="_cmsis__gcc_8h_source_1l02126"/>02126 <emphasis role="preprocessor">#ifndef&#32;__ARMEB__&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Little&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02127"/>02127 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsld&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[1])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02128"/>02128 <emphasis role="preprocessor">#else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Big&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02129"/>02129 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsld&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[0])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02130"/>02130 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02131"/>02131 
<anchor xml:id="_cmsis__gcc_8h_source_1l02132"/>02132 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(llr.w64);
<anchor xml:id="_cmsis__gcc_8h_source_1l02133"/>02133 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02134"/>02134 
<anchor xml:id="_cmsis__gcc_8h_source_1l02135"/>02135 __STATIC_FORCEINLINE&#32;uint64_t&#32;__SMLSLDX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint64_t&#32;acc)
<anchor xml:id="_cmsis__gcc_8h_source_1l02136"/>02136 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02137"/>02137 &#32;&#32;<emphasis role="keyword">union&#32;</emphasis>llreg_u{
<anchor xml:id="_cmsis__gcc_8h_source_1l02138"/>02138 &#32;&#32;&#32;&#32;uint32_t&#32;w32[2];
<anchor xml:id="_cmsis__gcc_8h_source_1l02139"/>02139 &#32;&#32;&#32;&#32;uint64_t&#32;w64;
<anchor xml:id="_cmsis__gcc_8h_source_1l02140"/>02140 &#32;&#32;}&#32;llr;
<anchor xml:id="_cmsis__gcc_8h_source_1l02141"/>02141 &#32;&#32;llr.w64&#32;=&#32;acc;
<anchor xml:id="_cmsis__gcc_8h_source_1l02142"/>02142 
<anchor xml:id="_cmsis__gcc_8h_source_1l02143"/>02143 <emphasis role="preprocessor">#ifndef&#32;__ARMEB__&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Little&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02144"/>02144 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsldx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[0]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[1])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02145"/>02145 <emphasis role="preprocessor">#else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Big&#32;endian&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02146"/>02146 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsldx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(llr.w32[0]):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;,&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(llr.w32[1]),&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;(llr.w32[0])&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02147"/>02147 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02148"/>02148 
<anchor xml:id="_cmsis__gcc_8h_source_1l02149"/>02149 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(llr.w64);
<anchor xml:id="_cmsis__gcc_8h_source_1l02150"/>02150 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02151"/>02151 
<anchor xml:id="_cmsis__gcc_8h_source_1l02152"/>02152 __STATIC_FORCEINLINE&#32;uint32_t&#32;__SEL&#32;&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02153"/>02153 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02154"/>02154 &#32;&#32;uint32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02155"/>02155 
<anchor xml:id="_cmsis__gcc_8h_source_1l02156"/>02156 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sel&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02157"/>02157 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02158"/>02158 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02159"/>02159 
<anchor xml:id="_cmsis__gcc_8h_source_1l02160"/>02160 __STATIC_FORCEINLINE&#32;&#32;int32_t&#32;__QADD(&#32;int32_t&#32;op1,&#32;&#32;int32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02161"/>02161 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02162"/>02162 &#32;&#32;int32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02163"/>02163 
<anchor xml:id="_cmsis__gcc_8h_source_1l02164"/>02164 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qadd&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02165"/>02165 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02166"/>02166 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02167"/>02167 
<anchor xml:id="_cmsis__gcc_8h_source_1l02168"/>02168 __STATIC_FORCEINLINE&#32;&#32;int32_t&#32;__QSUB(&#32;int32_t&#32;op1,&#32;&#32;int32_t&#32;op2)
<anchor xml:id="_cmsis__gcc_8h_source_1l02169"/>02169 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02170"/>02170 &#32;&#32;int32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02171"/>02171 
<anchor xml:id="_cmsis__gcc_8h_source_1l02172"/>02172 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qsub&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02173"/>02173 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02174"/>02174 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02175"/>02175 
<anchor xml:id="_cmsis__gcc_8h_source_1l02176"/>02176 
<anchor xml:id="_cmsis__gcc_8h_source_1l02177"/>02177 <emphasis role="preprocessor">#define&#32;__PKHBT(ARG1,ARG2,ARG3)&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02178"/>02178 <emphasis role="preprocessor">__extension__&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02179"/>02179 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02180"/>02180 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02181"/>02181 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;(&quot;pkhbt&#32;%0,&#32;%1,&#32;%2,&#32;lsl&#32;%3&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;I&quot;&#32;(ARG3)&#32;&#32;);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02182"/>02182 <emphasis role="preprocessor">&#32;&#32;__RES;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02183"/>02183 <emphasis role="preprocessor">&#32;})</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02184"/>02184 
<anchor xml:id="_cmsis__gcc_8h_source_1l02185"/>02185 <emphasis role="preprocessor">#define&#32;__PKHTB(ARG1,ARG2,ARG3)&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02186"/>02186 <emphasis role="preprocessor">__extension__&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02187"/>02187 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02188"/>02188 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02189"/>02189 <emphasis role="preprocessor">&#32;&#32;if&#32;(ARG3&#32;==&#32;0)&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02190"/>02190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__ASM&#32;(&quot;pkhtb&#32;%0,&#32;%1,&#32;%2&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2)&#32;&#32;);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02191"/>02191 <emphasis role="preprocessor">&#32;&#32;else&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02192"/>02192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__ASM&#32;(&quot;pkhtb&#32;%0,&#32;%1,&#32;%2,&#32;asr&#32;%3&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;I&quot;&#32;(ARG3)&#32;&#32;);&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02193"/>02193 <emphasis role="preprocessor">&#32;&#32;__RES;&#32;\</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02194"/>02194 <emphasis role="preprocessor">&#32;})</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02195"/>02195 
<anchor xml:id="_cmsis__gcc_8h_source_1l02196"/>02196 
<anchor xml:id="_cmsis__gcc_8h_source_1l02197"/>02197 __STATIC_FORCEINLINE&#32;int32_t&#32;__SMMLA&#32;(int32_t&#32;op1,&#32;int32_t&#32;op2,&#32;int32_t&#32;op3)
<anchor xml:id="_cmsis__gcc_8h_source_1l02198"/>02198 {
<anchor xml:id="_cmsis__gcc_8h_source_1l02199"/>02199 &#32;int32_t&#32;result;
<anchor xml:id="_cmsis__gcc_8h_source_1l02200"/>02200 
<anchor xml:id="_cmsis__gcc_8h_source_1l02201"/>02201 &#32;__ASM&#32;(<emphasis role="stringliteral">&quot;smmla&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result):&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
<anchor xml:id="_cmsis__gcc_8h_source_1l02202"/>02202 &#32;<emphasis role="keywordflow">return</emphasis>(result);
<anchor xml:id="_cmsis__gcc_8h_source_1l02203"/>02203 }
<anchor xml:id="_cmsis__gcc_8h_source_1l02204"/>02204 
<anchor xml:id="_cmsis__gcc_8h_source_1l02205"/>02205 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__ARM_FEATURE_DSP&#32;==&#32;1)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02209"/>02209 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
<anchor xml:id="_cmsis__gcc_8h_source_1l02210"/>02210 
<anchor xml:id="_cmsis__gcc_8h_source_1l02211"/>02211 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__CMSIS_GCC_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
