.TH "Exported_macro" 3 "Version JSTDRVF4" "Joystick Driver" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Exported_macro \- Exported_macro
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSET_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBCLEAR_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBREAD_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBCLEAR_REG\fP(REG)"
.br
.ti -1c
.RI "#define \fBWRITE_REG\fP(REG,  VAL)"
.br
.ti -1c
.RI "#define \fBREAD_REG\fP(REG)"
.br
.ti -1c
.RI "#define \fBMODIFY_REG\fP(REG,  CLEARMASK,  SETMASK)"
.br
.ti -1c
.RI "#define \fBPOSITION_VAL\fP(VAL)"
.br
.ti -1c
.RI "#define \fBATOMIC_SET_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBATOMIC_CLEAR_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBATOMIC_MODIFY_REG\fP(REG,  CLEARMSK,  SETMASK)"
.br
.ti -1c
.RI "#define \fBATOMIC_SETH_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBATOMIC_CLEARH_BIT\fP(REG,  BIT)"
.br
.ti -1c
.RI "#define \fBATOMIC_MODIFYH_REG\fP(REG,  CLEARMSK,  SETMASK)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define ATOMIC_CLEAR_BIT( REG,  BIT)"
\fBValue:\fP
.nf
  do {                                                       \\
    uint32_t val;                                            \\
    do {                                                     \\
      val = __LDREXW((__IO uint32_t *)&(REG)) & ~(BIT);      \\
    } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); \\
  } while(0)
.PP
.fi

.PP
Definition at line \fB238\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define ATOMIC_CLEARH_BIT( REG,  BIT)"
\fBValue:\fP
.nf
  do {                                                       \\
    uint16_t val;                                            \\
    do {                                                     \\
      val = __LDREXH((__IO uint16_t *)&(REG)) & ~(BIT);      \\
    } while ((__STREXH(val,(__IO uint16_t *)&(REG))) != 0U); \\
  } while(0)
.PP
.fi

.PP
Definition at line \fB265\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define ATOMIC_MODIFY_REG( REG,  CLEARMSK,  SETMASK)"
\fBValue:\fP
.nf
  do {                                                                     \\
    uint32_t val;                                                          \\
    do {                                                                   \\
      val = (__LDREXW((__IO uint32_t *)&(REG)) & ~(CLEARMSK)) | (SETMASK); \\
    } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U);               \\
  } while(0)
.PP
.fi

.PP
Definition at line \fB247\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define ATOMIC_MODIFYH_REG( REG,  CLEARMSK,  SETMASK)"
\fBValue:\fP
.nf
  do {                                                                     \\
    uint16_t val;                                                          \\
    do {                                                                   \\
      val = (__LDREXH((__IO uint16_t *)&(REG)) & ~(CLEARMSK)) | (SETMASK); \\
    } while ((__STREXH(val,(__IO uint16_t *)&(REG))) != 0U);               \\
  } while(0)
.PP
.fi

.PP
Definition at line \fB274\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define ATOMIC_SET_BIT( REG,  BIT)"
\fBValue:\fP
.nf
  do {                                                       \\
    uint32_t val;                                            \\
    do {                                                     \\
      val = __LDREXW((__IO uint32_t *)&(REG)) | (BIT);       \\
    } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); \\
  } while(0)
.PP
.fi

.PP
Definition at line \fB229\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define ATOMIC_SETH_BIT( REG,  BIT)"
\fBValue:\fP
.nf
  do {                                                       \\
    uint16_t val;                                            \\
    do {                                                     \\
      val = __LDREXH((__IO uint16_t *)&(REG)) | (BIT);       \\
    } while ((__STREXH(val,(__IO uint16_t *)&(REG))) != 0U); \\
  } while(0)
.PP
.fi

.PP
Definition at line \fB256\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define CLEAR_BIT( REG,  BIT)"
\fBValue:\fP
.nf
((REG) &= ~(BIT))
.PP
.fi

.PP
Definition at line \fB213\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define CLEAR_REG( REG)"
\fBValue:\fP
.nf
((REG) = (0x0))
.PP
.fi

.PP
Definition at line \fB217\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define MODIFY_REG( REG,  CLEARMASK,  SETMASK)"
\fBValue:\fP
.nf
WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
.PP
.fi

.PP
Definition at line \fB223\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define POSITION_VAL( VAL)"
\fBValue:\fP
.nf
(__CLZ(__RBIT(VAL)))
.PP
.fi

.PP
Definition at line \fB225\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define READ_BIT( REG,  BIT)"
\fBValue:\fP
.nf
((REG) & (BIT))
.PP
.fi

.PP
Definition at line \fB215\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define READ_REG( REG)"
\fBValue:\fP
.nf
((REG))
.PP
.fi

.PP
Definition at line \fB221\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define SET_BIT( REG,  BIT)"
\fBValue:\fP
.nf
((REG) |= (BIT))
.PP
.fi

.PP
Definition at line \fB211\fP of file \fBstm32f4xx\&.h\fP\&.
.SS "#define WRITE_REG( REG,  VAL)"
\fBValue:\fP
.nf
((REG) = (VAL))
.PP
.fi

.PP
Definition at line \fB219\fP of file \fBstm32f4xx\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Joystick Driver from the source code\&.
