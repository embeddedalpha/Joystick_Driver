.TH "CMSIS_Core_NVICFunctions" 3 "Version JSTDRVF4" "Joystick Driver" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CMSIS_Core_NVICFunctions \- NVIC Functions
.PP
 \- Functions that manage interrupts and exceptions via the NVIC\&.  

.SH SYNOPSIS
.br
.PP
.SS "Topics"

.in +1c
.ti -1c
.RI "\fBFPU Functions\fP"
.br
.RI "Function that provides FPU type\&. "
.in -1c
.in +1c
.ti -1c
.RI "__STATIC_INLINE void \fB__NVIC_SetPriorityGrouping\fP (uint32_t PriorityGroup)"
.br
.RI "Set Priority Grouping\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fB__NVIC_GetPriorityGrouping\fP (void)"
.br
.RI "Get Priority Grouping\&. "
.ti -1c
.RI "__STATIC_INLINE void \fB__NVIC_EnableIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Enable Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fB__NVIC_GetEnableIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Get Interrupt Enable status\&. "
.ti -1c
.RI "__STATIC_INLINE void \fB__NVIC_DisableIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Disable Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fB__NVIC_GetPendingIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Get Pending Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE void \fB__NVIC_SetPendingIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Set Pending Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE void \fB__NVIC_ClearPendingIRQ\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Clear Pending Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fB__NVIC_GetActive\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Get Active Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE void \fB__NVIC_SetPriority\fP (\fBIRQn_Type\fP IRQn, uint32_t priority)"
.br
.RI "Set Interrupt Priority\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fB__NVIC_GetPriority\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Get Interrupt Priority\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_EncodePriority\fP (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)"
.br
.RI "Encode Priority\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_DecodePriority\fP (uint32_t Priority, uint32_t PriorityGroup, uint32_t *const pPreemptPriority, uint32_t *const pSubPriority)"
.br
.RI "Decode Priority\&. "
.ti -1c
.RI "__STATIC_INLINE void \fB__NVIC_SetVector\fP (\fBIRQn_Type\fP IRQn, uint32_t vector)"
.br
.RI "Set Interrupt Vector\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fB__NVIC_GetVector\fP (\fBIRQn_Type\fP IRQn)"
.br
.RI "Get Interrupt Vector\&. "
.ti -1c
.RI "__NO_RETURN __STATIC_INLINE void \fB__NVIC_SystemReset\fP (void)"
.br
.RI "System Reset\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBSCB_GetFPUType\fP (void)"
.br
.RI "get FPU type "
.ti -1c
.RI "__STATIC_INLINE void \fBDCB_SetAuthCtrl\fP (uint32_t value)"
.br
.RI "Set Debug Authentication Control Register\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBDCB_GetAuthCtrl\fP (void)"
.br
.RI "Get Debug Authentication Control Register\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBDIB_GetAuthStatus\fP (void)"
.br
.RI "Get Debug Authentication Status Register\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBSysTick_Config\fP (uint32_t ticks)"
.br
.RI "System Tick Configuration\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBITM_SendChar\fP (uint32_t ch)"
.br
.RI "ITM Send Character\&. "
.ti -1c
.RI "__STATIC_INLINE int32_t \fBITM_ReceiveChar\fP (void)"
.br
.RI "ITM Receive Character\&. "
.ti -1c
.RI "__STATIC_INLINE int32_t \fBITM_CheckChar\fP (void)"
.br
.RI "ITM Check Character\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBSCB_GetMVEType\fP (void)"
.br
.RI "get MVE type "
.in -1c
.in +1c
.ti -1c
.RI "__NO_RETURN __STATIC_INLINE void \fB__SW_SystemReset\fP (void)"
.br
.RI "Software Reset\&. "
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriorityGrouping\fP   __NVIC_SetPriorityGrouping"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriorityGrouping\fP   \fB__NVIC_GetPriorityGrouping\fP"
.br
.ti -1c
.RI "#define \fBNVIC_EnableIRQ\fP   \fB__NVIC_EnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetEnableIRQ\fP   \fB__NVIC_GetEnableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_DisableIRQ\fP   \fB__NVIC_DisableIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPendingIRQ\fP   \fB__NVIC_GetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPendingIRQ\fP   \fB__NVIC_SetPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_ClearPendingIRQ\fP   \fB__NVIC_ClearPendingIRQ\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetActive\fP   \fB__NVIC_GetActive\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetPriority\fP   \fB__NVIC_SetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetPriority\fP   \fB__NVIC_GetPriority\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SystemReset\fP   \fB__NVIC_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBSW_SystemReset\fP   \fB__SW_SystemReset\fP"
.br
.ti -1c
.RI "#define \fBNVIC_SetVector\fP   \fB__NVIC_SetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_GetVector\fP   \fB__NVIC_GetVector\fP"
.br
.ti -1c
.RI "#define \fBNVIC_USER_IRQ_OFFSET\fP   16"
.br
.ti -1c
.RI "#define \fBFNC_RETURN\fP   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_PREFIX\fP   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_S\fP   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_DCRS\fP   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_FTYPE\fP   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_MODE\fP   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_SPSEL\fP   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_ES\fP   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"
.br
.ti -1c
.RI "#define \fBEXC_INTEGRITY_SIGNATURE\fP   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"
.br
.in -1c
.in +1c
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(IRQn)"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(IRQn)"
.br
.in -1c
.in +1c
.ti -1c
.RI "#define \fB__NVIC_SetPriorityGrouping\fP(X)"
.br
.ti -1c
.RI "#define \fB__NVIC_GetPriorityGrouping\fP()"
.br
.RI "Get Priority Grouping\&. "
.ti -1c
.RI "#define \fB__NVIC_SetPriorityGrouping\fP(X)"
.br
.ti -1c
.RI "#define \fB__NVIC_GetPriorityGrouping\fP()"
.br
.ti -1c
.RI "#define \fB__NVIC_SetPriorityGrouping\fP(X)"
.br
.ti -1c
.RI "#define \fB__NVIC_GetPriorityGrouping\fP()"
.br
.ti -1c
.RI "#define \fB__NVIC_SetPriorityGrouping\fP(X)"
.br
.ti -1c
.RI "#define \fB__NVIC_GetPriorityGrouping\fP()"
.br
.ti -1c
.RI "#define \fB__NVIC_SetPriorityGrouping\fP(X)"
.br
.ti -1c
.RI "#define \fB__NVIC_GetPriorityGrouping\fP()"
.br
.in -1c
.in +1c
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER\fP   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP\fP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP\fP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"
.br
.in -1c
.in +1c
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER_FPU\fP   (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after return, restore floating\-point state */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP_FPU\fP   (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after return, restore floating\-point state  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP_FPU\fP   (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after return, restore floating\-point state  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_HANDLER_FPU\fP   (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after return, restore floating\-point state */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_MSP_FPU\fP   (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after return, restore floating\-point state  */"
.br
.ti -1c
.RI "#define \fBEXC_RETURN_THREAD_PSP_FPU\fP   (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after return, restore floating\-point state  */"
.br
.in -1c
.SH "Detailed Description"
.PP 
Functions that manage interrupts and exceptions via the NVIC\&. 


.SH "Macro Definition Documentation"
.PP 
.SS "__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping( void)"
\fBValue:\fP
.nf
(0U)
.PP
.fi

.PP
Get Priority Grouping\&. Reads the priority grouping field from the NVIC Interrupt Controller\&. 
.PP
\fBReturns\fP
.RS 4
Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)\&. 
.RE
.PP

.PP
Definition at line \fB1441\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define __NVIC_GetPriorityGrouping( void)"
\fBValue:\fP
.nf
(0U)
.PP
.fi

.PP
Definition at line \fB615\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define __NVIC_GetPriorityGrouping( void)"
\fBValue:\fP
.nf
(0U)
.PP
.fi

.PP
Definition at line \fB733\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define __NVIC_GetPriorityGrouping( void)"
\fBValue:\fP
.nf
(0U)
.PP
.fi

.PP
Definition at line \fB642\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define __NVIC_GetPriorityGrouping( void)"
\fBValue:\fP
.nf
(0U)
.PP
.fi

.PP
Definition at line \fB1516\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define __NVIC_SetPriorityGrouping( X)"
\fBValue:\fP
.nf
(void)(X)
.PP
.fi

.PP
Definition at line \fB1440\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define __NVIC_SetPriorityGrouping( X)"
\fBValue:\fP
.nf
(void)(X)
.PP
.fi

.PP
Definition at line \fB614\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define __NVIC_SetPriorityGrouping( X)"
\fBValue:\fP
.nf
(void)(X)
.PP
.fi

.PP
Definition at line \fB732\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define __NVIC_SetPriorityGrouping( X)"
\fBValue:\fP
.nf
(void)(X)
.PP
.fi

.PP
Definition at line \fB641\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define __NVIC_SetPriorityGrouping( X)"
\fBValue:\fP
.nf
(void)(X)
.PP
.fi

.PP
Definition at line \fB1515\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define _BIT_SHIFT( IRQn)"
\fBValue:\fP
.nf
(  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
.PP
.fi

.PP
Definition at line \fB1436\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define _BIT_SHIFT( IRQn)"
\fBValue:\fP
.nf
(  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
.PP
.fi

.PP
Definition at line \fB610\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define _BIT_SHIFT( IRQn)"
\fBValue:\fP
.nf
(  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
.PP
.fi

.PP
Definition at line \fB728\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define _BIT_SHIFT( IRQn)"
\fBValue:\fP
.nf
(  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
.PP
.fi

.PP
Definition at line \fB637\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define _BIT_SHIFT( IRQn)"
\fBValue:\fP
.nf
(  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
.PP
.fi

.PP
Definition at line \fB1511\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define _BIT_SHIFT( IRQn)"
\fBValue:\fP
.nf
(  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
.PP
.fi

.PP
Definition at line \fB743\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define _IP_IDX( IRQn)"
\fBValue:\fP
.nf
(   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB1438\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define _IP_IDX( IRQn)"
\fBValue:\fP
.nf
(   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB612\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define _IP_IDX( IRQn)"
\fBValue:\fP
.nf
(   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB730\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define _IP_IDX( IRQn)"
\fBValue:\fP
.nf
(   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB639\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define _IP_IDX( IRQn)"
\fBValue:\fP
.nf
(   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB1513\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define _IP_IDX( IRQn)"
\fBValue:\fP
.nf
(   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB745\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define _SHP_IDX( IRQn)"
\fBValue:\fP
.nf
( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)\-8UL) >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB1437\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define _SHP_IDX( IRQn)"
\fBValue:\fP
.nf
( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)\-8UL) >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB611\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define _SHP_IDX( IRQn)"
\fBValue:\fP
.nf
( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)\-8UL) >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB729\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define _SHP_IDX( IRQn)"
\fBValue:\fP
.nf
( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)\-8UL) >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB638\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define _SHP_IDX( IRQn)"
\fBValue:\fP
.nf
( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)\-8UL) >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB1512\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define _SHP_IDX( IRQn)"
\fBValue:\fP
.nf
( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)\-8UL) >>    2UL)      )
.PP
.fi

.PP
Definition at line \fB744\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB3244\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB1428\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB2269\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB1503\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB2344\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB2344\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB3806\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB3655\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_INTEGRITY_SIGNATURE   (0xFEFA125AUL)     /* bit [0] SFTC must match LR bit[4] EXC_RETURN_FTYPE                   */"

.PP
Definition at line \fB2263\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB3236\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB1420\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB2261\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB1495\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB2336\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB2336\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB3798\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB3647\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_RETURN_DCRS   (0x00000020UL)     /* bit [5] stacking rules for called registers: 0=skipped 1=saved       */"

.PP
Definition at line \fB2255\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB3240\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB1424\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB2265\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB1499\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB2340\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB2340\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB3802\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB3651\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_RETURN_ES   (0x00000001UL)     /* bit [0] security state exception was taken to: 0=Non\-secure 1=Secure */"

.PP
Definition at line \fB2259\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB3237\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB1421\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB2262\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB1496\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB2337\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB2337\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB3799\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB3648\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_RETURN_FTYPE   (0x00000010UL)     /* bit [4] allocate stack for floating\-point context: 0=done 1=skipped  */"

.PP
Definition at line \fB2256\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB603\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB721\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB630\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB1463\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB1636\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB1863\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB736\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER   (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */"

.PP
Definition at line \fB1446\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER_FPU   (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after return, restore floating\-point state */"

.PP
Definition at line \fB1639\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define EXC_RETURN_HANDLER_FPU   (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after return, restore floating\-point state */"

.PP
Definition at line \fB1866\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB3238\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB1422\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB2263\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB1497\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB2338\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB2338\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB3800\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB3649\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_RETURN_MODE   (0x00000008UL)     /* bit [3] processor mode for return: 0=Handler mode 1=Thread mode      */"

.PP
Definition at line \fB2257\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB3234\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB1418\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB2259\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB1493\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB2334\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB2334\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB3796\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB3645\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_RETURN_PREFIX   (0xFF000000UL)     /* bits [31:24] set to indicate an EXC_RETURN value                     */"

.PP
Definition at line \fB2253\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB3235\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB1419\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB2260\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB1494\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB2335\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB2335\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB3797\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB3646\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_RETURN_S   (0x00000040UL)     /* bit [6] stack used to push registers: 0=Non\-secure 1=Secure          */"

.PP
Definition at line \fB2254\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB3239\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB1423\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB2264\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB1498\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB2339\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB2339\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB3801\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB3650\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define EXC_RETURN_SPSEL   (0x00000004UL)     /* bit [2] stack pointer used to restore context: 0=MSP 1=PSP           */"

.PP
Definition at line \fB2258\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB604\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB722\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB631\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB1464\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB1637\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB1864\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB737\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP   (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */"

.PP
Definition at line \fB1447\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP_FPU   (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after return, restore floating\-point state  */"

.PP
Definition at line \fB1640\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_MSP_FPU   (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after return, restore floating\-point state  */"

.PP
Definition at line \fB1867\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB605\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB723\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB632\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB1465\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB1638\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB1865\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB738\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP   (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */"

.PP
Definition at line \fB1448\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP_FPU   (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after return, restore floating\-point state  */"

.PP
Definition at line \fB1641\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define EXC_RETURN_THREAD_PSP_FPU   (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after return, restore floating\-point state  */"

.PP
Definition at line \fB1868\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB3231\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB1415\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB2256\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB1490\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB2331\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB2331\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB3793\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB3642\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define FNC_RETURN   (0xFEFFFFFFUL)     /* bit [0] ignored when processing a branch                             */"

.PP
Definition at line \fB2250\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB3208\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB1392\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB2233\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB582\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB700\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB609\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB1467\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB1442\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB2308\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB2308\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB1615\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB3770\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB1842\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB3619\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB715\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB1425\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_ClearPendingIRQ   \fB__NVIC_ClearPendingIRQ\fP"

.PP
Definition at line \fB2226\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB3205\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB1389\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB2230\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB579\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB697\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB606\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB1464\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB1439\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB2305\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB2305\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB1612\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB3767\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB1839\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB3616\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB712\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB1422\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_DisableIRQ   \fB__NVIC_DisableIRQ\fP"

.PP
Definition at line \fB2223\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB3203\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB1387\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB2228\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB577\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB695\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB604\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB1462\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB1437\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB2303\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB2303\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB1610\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB3765\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB1837\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB3614\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB710\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB1420\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_EnableIRQ   \fB__NVIC_EnableIRQ\fP"

.PP
Definition at line \fB2221\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB3209\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB1393\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB2234\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB1468\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB1443\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB2309\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB2309\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB1616\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB3771\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB1843\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB3620\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB1426\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_GetActive   \fB__NVIC_GetActive\fP"

.PP
Definition at line \fB2227\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB3204\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB1388\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB2229\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB578\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB696\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB605\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB1463\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB1438\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB2304\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB2304\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB1611\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB3766\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB1838\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB3615\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB711\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB1421\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_GetEnableIRQ   \fB__NVIC_GetEnableIRQ\fP"

.PP
Definition at line \fB2222\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB3206\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB1390\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB2231\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB580\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB698\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB607\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB1465\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB1440\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB2306\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB2306\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB1613\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB3768\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB1840\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB3617\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB713\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB1423\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_GetPendingIRQ   \fB__NVIC_GetPendingIRQ\fP"

.PP
Definition at line \fB2224\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB3211\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB1395\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB2236\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB585\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB703\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB612\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB1470\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB1445\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB2311\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB2311\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB1618\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB3773\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB1845\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB3622\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB718\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB1428\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_GetPriority   \fB__NVIC_GetPriority\fP"

.PP
Definition at line \fB2229\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB3202\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB1386\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB2227\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB576\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB694\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB603\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB1436\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB2302\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB2302\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB1609\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB3764\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB1836\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB3613\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB1419\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_GetPriorityGrouping   \fB__NVIC_GetPriorityGrouping\fP"

.PP
Definition at line \fB2220\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB3222\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB1406\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB2247\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB596\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB714\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB623\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB1481\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB1456\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB2322\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB2322\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB1629\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB3784\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB1856\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB3633\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB729\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB1439\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_GetVector   \fB__NVIC_GetVector\fP"

.PP
Definition at line \fB2241\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB3207\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB1391\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB2232\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB581\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB699\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB608\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB1466\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB1441\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB2307\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB2307\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB1614\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB3769\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB1841\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB3618\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB714\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB1424\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_SetPendingIRQ   \fB__NVIC_SetPendingIRQ\fP"

.PP
Definition at line \fB2225\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB3210\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB1394\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB2235\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB584\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB702\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB611\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB1469\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB1444\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB2310\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB2310\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB1617\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB3772\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB1844\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB3621\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB717\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB1427\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_SetPriority   \fB__NVIC_SetPriority\fP"

.PP
Definition at line \fB2228\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB3201\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB1385\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB2226\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB575\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB693\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB602\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB1435\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB2301\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB2301\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB1608\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB3763\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB1835\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB3612\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB1418\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_SetPriorityGrouping   __NVIC_SetPriorityGrouping"

.PP
Definition at line \fB2219\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB3221\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB1405\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB2246\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB595\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB713\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB622\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB1480\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB1455\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB2321\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB2321\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB1628\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB3783\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB1855\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB3632\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB728\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB1438\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_SetVector   \fB__NVIC_SetVector\fP"

.PP
Definition at line \fB2240\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB3212\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB1396\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB2237\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB586\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB704\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB613\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB1471\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB1446\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB2312\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB2312\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB1619\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB3774\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB1846\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB3623\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB719\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB1429\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_SystemReset   \fB__NVIC_SystemReset\fP"

.PP
Definition at line \fB2230\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB3225\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB1409\fP of file \fBcore_armv8mbl\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB2250\fP of file \fBcore_armv8mml\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB599\fP of file \fBcore_cm0\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB717\fP of file \fBcore_cm0plus\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB626\fP of file \fBcore_cm1\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB1484\fP of file \fBcore_cm23\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB1459\fP of file \fBcore_cm3\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB2325\fP of file \fBcore_cm33\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB2325\fP of file \fBcore_cm35p\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB1632\fP of file \fBcore_cm4\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB3787\fP of file \fBcore_cm55\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB1859\fP of file \fBcore_cm7\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB3636\fP of file \fBcore_cm85\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB732\fP of file \fBcore_sc000\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB1442\fP of file \fBcore_sc300\&.h\fP\&.
.SS "#define NVIC_USER_IRQ_OFFSET   16"

.PP
Definition at line \fB2244\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "#define SW_SystemReset   \fB__SW_SystemReset\fP"

.PP
Definition at line \fB2231\fP of file \fBcore_starmc1\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "__STATIC_INLINE void __NVIC_ClearPendingIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Clear Pending Interrupt\&. Clears the pending bit of a device specific interrupt in the NVIC pending register\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Device specific interrupt number\&. 
.RE
.PP
\fBNote\fP
.RS 4
IRQn must not be negative\&. 
.RE
.PP

.PP
Definition at line \fB3381\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void __NVIC_DisableIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Disable Interrupt\&. Disables a device specific interrupt in the NVIC interrupt controller\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Device specific interrupt number\&. 
.RE
.PP
\fBNote\fP
.RS 4
IRQn must not be negative\&. 
.RE
.PP

.PP
Definition at line \fB3328\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void __NVIC_EnableIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Enable Interrupt\&. Enables a device specific interrupt in the NVIC interrupt controller\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Device specific interrupt number\&. 
.RE
.PP
\fBNote\fP
.RS 4
IRQn must not be negative\&. 
.RE
.PP

.PP
Definition at line \fB3290\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t __NVIC_GetActive (\fBIRQn_Type\fP IRQn)"

.PP
Get Active Interrupt\&. Reads the active register in the NVIC and returns the active bit for the device specific interrupt\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Device specific interrupt number\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 Interrupt status is not active\&. 

.PP
1 Interrupt status is active\&. 
.RE
.PP
\fBNote\fP
.RS 4
IRQn must not be negative\&. 
.RE
.PP

.PP
Definition at line \fB3398\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Get Interrupt Enable status\&. Returns a device specific interrupt enable status from the NVIC interrupt controller\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Device specific interrupt number\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 Interrupt is not enabled\&. 

.PP
1 Interrupt is enabled\&. 
.RE
.PP
\fBNote\fP
.RS 4
IRQn must not be negative\&. 
.RE
.PP

.PP
Definition at line \fB3309\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Get Pending Interrupt\&. Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Device specific interrupt number\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 Interrupt status is not pending\&. 

.PP
1 Interrupt status is pending\&. 
.RE
.PP
\fBNote\fP
.RS 4
IRQn must not be negative\&. 
.RE
.PP

.PP
Definition at line \fB3347\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t __NVIC_GetPriority (\fBIRQn_Type\fP IRQn)"

.PP
Get Interrupt Priority\&. Reads the priority of a device specific interrupt or a processor exception\&. The interrupt number can be positive to specify a device specific interrupt, or negative to specify a processor exception\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Interrupt number\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Interrupt Priority\&. Value is aligned automatically to the implemented priority bits of the microcontroller\&. 
.RE
.PP

.PP
Definition at line \fB3509\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping (void )"

.PP
Get Priority Grouping\&. Reads the priority grouping field from the NVIC Interrupt Controller\&. 
.PP
\fBReturns\fP
.RS 4
Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)\&. 
.RE
.PP

.PP
Definition at line \fB3278\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t __NVIC_GetVector (\fBIRQn_Type\fP IRQn)"

.PP
Get Interrupt Vector\&. Reads an interrupt vector from interrupt vector table\&. The interrupt number can be positive to specify a device specific interrupt, or negative to specify a processor exception\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Interrupt number\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Address of interrupt handler function 
.RE
.PP

.PP
Definition at line \fB3600\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void __NVIC_SetPendingIRQ (\fBIRQn_Type\fP IRQn)"

.PP
Set Pending Interrupt\&. Sets the pending bit of a device specific interrupt in the NVIC pending register\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Device specific interrupt number\&. 
.RE
.PP
\fBNote\fP
.RS 4
IRQn must not be negative\&. 
.RE
.PP

.PP
Definition at line \fB3366\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void __NVIC_SetPriority (\fBIRQn_Type\fP IRQn, uint32_t priority)"

.PP
Set Interrupt Priority\&. Sets the priority of a device specific interrupt or a processor exception\&. The interrupt number can be positive to specify a device specific interrupt, or negative to specify a processor exception\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Interrupt number\&. 
.br
\fIpriority\fP Priority to set\&. 
.RE
.PP
\fBNote\fP
.RS 4
The priority cannot be set for every processor exception\&. 
.RE
.PP

.PP
Definition at line \fB3487\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void __NVIC_SetPriorityGrouping (uint32_t PriorityGroup)"

.PP
Set Priority Grouping\&. Sets the priority grouping field using the required unlock sequence\&. The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field\&. Only values from 0\&.\&.7 are used\&. In case of a conflict between priority grouping and available priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set\&. 
.PP
\fBParameters\fP
.RS 4
\fIPriorityGroup\fP Priority grouping field\&. 
.RE
.PP

.PP
Definition at line \fB3259\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void __NVIC_SetVector (\fBIRQn_Type\fP IRQn, uint32_t vector)"

.PP
Set Interrupt Vector\&. Sets an interrupt vector in SRAM based interrupt vector table\&. The interrupt number can be positive to specify a device specific interrupt, or negative to specify a processor exception\&. VTOR must been relocated to SRAM before\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Interrupt number 
.br
\fIvector\fP Address of interrupt handler function
.RE
.PP
Sets an interrupt vector in SRAM based interrupt vector table\&. The interrupt number can be positive to specify a device specific interrupt, or negative to specify a processor exception\&. VTOR must been relocated to SRAM before\&. If VTOR is not present address 0 must be mapped to SRAM\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Interrupt number 
.br
\fIvector\fP Address of interrupt handler function
.RE
.PP
Sets an interrupt vector in SRAM based interrupt vector table\&. The interrupt number can be positive to specify a device specific interrupt, or negative to specify a processor exception\&. Address 0 must be mapped to SRAM\&. 
.PP
\fBParameters\fP
.RS 4
\fIIRQn\fP Interrupt number 
.br
\fIvector\fP Address of interrupt handler function 
.RE
.PP

.PP
Definition at line \fB3584\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset (void )"

.PP
System Reset\&. Initiates a system reset request to reset the MCU\&. 
.PP
Definition at line \fB3611\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__NO_RETURN __STATIC_INLINE void __SW_SystemReset (void )"

.PP
Software Reset\&. Initiates a system reset request to reset the CPU\&. 
.PP
Definition at line \fB2649\fP of file \fBcore_starmc1\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t DCB_GetAuthCtrl (void )"

.PP
Get Debug Authentication Control Register\&. Reads Debug Authentication Control register\&. 
.PP
\fBReturns\fP
.RS 4
Debug Authentication Control Register\&. 
.RE
.PP

.PP
Definition at line \fB3995\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void DCB_SetAuthCtrl (uint32_t value)"

.PP
Set Debug Authentication Control Register\&. writes to Debug Authentication Control register\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP value to be writen\&. 
.RE
.PP

.PP
Definition at line \fB3980\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t DIB_GetAuthStatus (void )"

.PP
Get Debug Authentication Status Register\&. Reads Debug Authentication Status register\&. 
.PP
\fBReturns\fP
.RS 4
Debug Authentication Status Register\&. 
.RE
.PP

.PP
Definition at line \fB4047\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE int32_t ITM_CheckChar (void )"

.PP
ITM Check Character\&. Checks whether a character is pending for reading in the variable \fBITM_RxBuffer\fP\&. 
.PP
\fBReturns\fP
.RS 4
0 No character available\&. 

.PP
1 Character available\&. 
.RE
.PP

.PP
Definition at line \fB4204\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE int32_t ITM_ReceiveChar (void )"

.PP
ITM Receive Character\&. Inputs a character via the external variable \fBITM_RxBuffer\fP\&. 
.PP
\fBReturns\fP
.RS 4
Received character\&. 

.PP
-1 No character pending\&. 
.RE
.PP

.PP
Definition at line \fB4184\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)"

.PP
ITM Send Character\&. Transmits a character via the ITM channel 0, and 
.PD 0
.IP "\(bu" 1
Just returns when no debugger is connected that has booked the output\&. 
.IP "\(bu" 1
Is blocking when a debugger is connected, but the previous character sent has not been transmitted\&. 
.PP
\fBParameters\fP
.RS 4
\fIch\fP Character to transmit\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Character to transmit\&. 
.RE
.PP

.PP

.PP
Definition at line \fB4163\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t *const pPreemptPriority, uint32_t *const pSubPriority)"

.PP
Decode Priority\&. Decodes an interrupt priority value with a given priority group to preemptive priority value and subpriority value\&. In case of a conflict between priority grouping and available priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set\&. 
.PP
\fBParameters\fP
.RS 4
\fIPriority\fP Priority value, which can be retrieved with the function \fBNVIC_GetPriority()\fP\&. 
.br
\fIPriorityGroup\fP Used priority group\&. 
.br
\fIpPreemptPriority\fP Preemptive priority value (starting from 0)\&. 
.br
\fIpSubPriority\fP Subpriority value (starting from 0)\&. 
.RE
.PP

.PP
Definition at line \fB3561\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)"

.PP
Encode Priority\&. Encodes the priority for an interrupt with the given priority group, preemptive priority value, and subpriority value\&. In case of a conflict between priority grouping and available priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set\&. 
.PP
\fBParameters\fP
.RS 4
\fIPriorityGroup\fP Used priority group\&. 
.br
\fIPreemptPriority\fP Preemptive priority value (starting from 0)\&. 
.br
\fISubPriority\fP Subpriority value (starting from 0)\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Encoded priority\&. Value can be used in the function \fBNVIC_SetPriority()\fP\&. 
.RE
.PP

.PP
Definition at line \fB3534\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t SCB_GetFPUType (void )"

.PP
get FPU type returns the FPU type 
.PP
\fBReturns\fP
.RS 4

.IP "\(bu" 2
\fB0\fP: No FPU
.IP "\(bu" 2
\fB1\fP: Single precision FPU
.IP "\(bu" 2
\fB2\fP: Double + Single precision FPU 
.PP
.RE
.PP

.PP
Definition at line \fB3862\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t SCB_GetMVEType (void )"

.PP
get MVE type returns the MVE type 
.PP
\fBReturns\fP
.RS 4

.IP "\(bu" 2
\fB0\fP: No Vector Extension (MVE)
.IP "\(bu" 2
\fB1\fP: Integer Vector Extension (MVE-I)
.IP "\(bu" 2
\fB2\fP: Floating-point Vector Extension (MVE-F) 
.PP
.RE
.PP

.PP
Definition at line \fB3900\fP of file \fBcore_armv81mml\&.h\fP\&.
.SS "__STATIC_INLINE uint32_t SysTick_Config (uint32_t ticks)"

.PP
System Tick Configuration\&. Initializes the System Timer and its interrupt, and starts the System Tick Timer\&. Counter is in free running mode to generate periodic interrupts\&. 
.PP
\fBParameters\fP
.RS 4
\fIticks\fP Number of ticks between two interrupts\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 Function succeeded\&. 

.PP
1 Function failed\&. 
.RE
.PP
\fBNote\fP
.RS 4
When the variable \fB__Vendor_SysTickConfig\fP is set to 1, then the function \fBSysTick_Config\fP is not included\&. In this case, the file \fB\fIdevice\fP\&.h\fP must contain a vendor-specific implementation of this function\&. 
.RE
.PP

.PP
Definition at line \fB4091\fP of file \fBcore_armv81mml\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Joystick Driver from the source code\&.
