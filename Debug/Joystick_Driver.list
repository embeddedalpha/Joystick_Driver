
Joystick_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08004ba8  08004ba8  00005ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00007054  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00005ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  00007054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005004  08005004  00006004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08005008  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007054  2**0
                  CONTENTS
 10 .bss          00000698  20000054  20000054  00007054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ec  200006ec  00007054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087d3  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fd2  00000000  00000000  0000f857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  00010830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000205  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013c4  00000000  00000000  00010cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005c3d  00000000  00000000  000120b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fca4  00000000  00000000  00017cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a799a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010e8  00000000  00000000  000a79e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000a8ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b90 	.word	0x08004b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08004b90 	.word	0x08004b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <Console_Init>:
USART_Config serial;
DMA_Config serial_DMA;


 void Console_Init(int32_t baudrate)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	 USART_Config_Reset(&serial);
 8000c30:	480f      	ldr	r0, [pc, #60]	@ (8000c70 <Console_Init+0x48>)
 8000c32:	f002 f9d9 	bl	8002fe8 <USART_Config_Reset>
	 serial.Port = USART1;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <Console_Init+0x48>)
 8000c38:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <Console_Init+0x4c>)
 8000c3a:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <Console_Init+0x48>)
 8000c40:	6053      	str	r3, [r2, #4]
	 serial.mode = USART_Configuration.Mode.Asynchronous;
 8000c42:	2201      	movs	r2, #1
 8000c44:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <Console_Init+0x48>)
 8000c46:	721a      	strb	r2, [r3, #8]
	 serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <Console_Init+0x48>)
 8000c4e:	741a      	strb	r2, [r3, #16]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8000c50:	2206      	movs	r2, #6
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <Console_Init+0x48>)
 8000c54:	725a      	strb	r2, [r3, #9]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8000c56:	2207      	movs	r2, #7
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <Console_Init+0x48>)
 8000c5a:	729a      	strb	r2, [r3, #10]
	 serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <Console_Init+0x48>)
 8000c60:	745a      	strb	r2, [r3, #17]
	 USART_Init(&serial);
 8000c62:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <Console_Init+0x48>)
 8000c64:	f002 fe9c 	bl	80039a0 <USART_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000070 	.word	0x20000070
 8000c74:	40011000 	.word	0x40011000

08000c78 <printConsole>:

 void printConsole(char *msg, ...)
{
 8000c78:	b40f      	push	{r0, r1, r2, r3}
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b0a0      	sub	sp, #128	@ 0x80
 8000c7e:	af04      	add	r7, sp, #16

	char buff[100];
	uint8_t x[2];

	x[0] = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	713b      	strb	r3, [r7, #4]

	DMA_Memory_To_Memory_Transfer(&x, 8, 8, &buff, 0, 1, 100);
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	1d38      	adds	r0, r7, #4
 8000c8a:	2264      	movs	r2, #100	@ 0x64
 8000c8c:	9202      	str	r2, [sp, #8]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	9201      	str	r2, [sp, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	9200      	str	r2, [sp, #0]
 8000c96:	2208      	movs	r2, #8
 8000c98:	2108      	movs	r1, #8
 8000c9a:	f001 fca1 	bl	80025e0 <DMA_Memory_To_Memory_Transfer>


	va_list args;
	va_start(args, msg);
 8000c9e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ca2:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 fa6f 	bl	8004190 <vsiprintf>

	uint16_t len = strlen(buff);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa8a 	bl	80001d0 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e


	USART_TX_Buffer(&serial, &buff, len);
 8000cc2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <printConsole+0x68>)
 8000cce:	f003 f91f 	bl	8003f10 <USART_TX_Buffer>
//	for(int i = 0; i<= strlen(buff)-1; i++)
//	{
//		serial.Port -> DR = buff[i];
//		while (!(serial.Port -> SR & USART_SR_TXE));
//	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3770      	adds	r7, #112	@ 0x70
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr
 8000ce0:	20000070 	.word	0x20000070

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000d24:	4b54      	ldr	r3, [pc, #336]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d01a      	beq.n	8000d66 <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000d30:	4b52      	ldr	r3, [pc, #328]	@ (8000e7c <DMA1_Stream0_IRQHandler+0x15c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000d36:	4b52      	ldr	r3, [pc, #328]	@ (8000e80 <DMA1_Stream0_IRQHandler+0x160>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d3c:	4b51      	ldr	r3, [pc, #324]	@ (8000e84 <DMA1_Stream0_IRQHandler+0x164>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d42:	4b51      	ldr	r3, [pc, #324]	@ (8000e88 <DMA1_Stream0_IRQHandler+0x168>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d48:	4b50      	ldr	r3, [pc, #320]	@ (8000e8c <DMA1_Stream0_IRQHandler+0x16c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000d4e:	4b50      	ldr	r3, [pc, #320]	@ (8000e90 <DMA1_Stream0_IRQHandler+0x170>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8000d54:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <DMA1_Stream0_IRQHandler+0x174>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000d5a:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	4a46      	ldr	r2, [pc, #280]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8000d66:	4b44      	ldr	r3, [pc, #272]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d01a      	beq.n	8000da8 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d72:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <DMA1_Stream0_IRQHandler+0x15c>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d78:	4b41      	ldr	r3, [pc, #260]	@ (8000e80 <DMA1_Stream0_IRQHandler+0x160>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d7e:	4b41      	ldr	r3, [pc, #260]	@ (8000e84 <DMA1_Stream0_IRQHandler+0x164>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d84:	4b40      	ldr	r3, [pc, #256]	@ (8000e88 <DMA1_Stream0_IRQHandler+0x168>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d8a:	4b40      	ldr	r3, [pc, #256]	@ (8000e8c <DMA1_Stream0_IRQHandler+0x16c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	@ (8000e90 <DMA1_Stream0_IRQHandler+0x170>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000d96:	4b3f      	ldr	r3, [pc, #252]	@ (8000e94 <DMA1_Stream0_IRQHandler+0x174>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d9c:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a35      	ldr	r2, [pc, #212]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000da8:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01a      	beq.n	8000dea <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000db4:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <DMA1_Stream0_IRQHandler+0x15c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <DMA1_Stream0_IRQHandler+0x160>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <DMA1_Stream0_IRQHandler+0x164>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000dc6:	4b30      	ldr	r3, [pc, #192]	@ (8000e88 <DMA1_Stream0_IRQHandler+0x168>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <DMA1_Stream0_IRQHandler+0x16c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <DMA1_Stream0_IRQHandler+0x170>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <DMA1_Stream0_IRQHandler+0x174>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000dde:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4a25      	ldr	r2, [pc, #148]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000dea:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d01a      	beq.n	8000e2c <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000df6:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <DMA1_Stream0_IRQHandler+0x15c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000dfc:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <DMA1_Stream0_IRQHandler+0x160>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <DMA1_Stream0_IRQHandler+0x164>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <DMA1_Stream0_IRQHandler+0x168>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <DMA1_Stream0_IRQHandler+0x16c>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <DMA1_Stream0_IRQHandler+0x170>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <DMA1_Stream0_IRQHandler+0x174>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0320 	and.w	r3, r3, #32
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d01a      	beq.n	8000e6e <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <DMA1_Stream0_IRQHandler+0x15c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <DMA1_Stream0_IRQHandler+0x160>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <DMA1_Stream0_IRQHandler+0x164>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <DMA1_Stream0_IRQHandler+0x168>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <DMA1_Stream0_IRQHandler+0x16c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <DMA1_Stream0_IRQHandler+0x170>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <DMA1_Stream0_IRQHandler+0x174>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x158>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6093      	str	r3, [r2, #8]
	}
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40026000 	.word	0x40026000
 8000e7c:	2000022c 	.word	0x2000022c
 8000e80:	2000020c 	.word	0x2000020c
 8000e84:	2000014c 	.word	0x2000014c
 8000e88:	20000124 	.word	0x20000124
 8000e8c:	2000009c 	.word	0x2000009c
 8000e90:	200000cc 	.word	0x200000cc
 8000e94:	20000274 	.word	0x20000274

08000e98 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8000e9c:	4b45      	ldr	r3, [pc, #276]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d014      	beq.n	8000ed2 <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000ea8:	4b43      	ldr	r3, [pc, #268]	@ (8000fb8 <DMA1_Stream1_IRQHandler+0x120>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000eae:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <DMA1_Stream1_IRQHandler+0x124>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000eb4:	4b42      	ldr	r3, [pc, #264]	@ (8000fc0 <DMA1_Stream1_IRQHandler+0x128>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000eba:	4b42      	ldr	r3, [pc, #264]	@ (8000fc4 <DMA1_Stream1_IRQHandler+0x12c>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8000ec0:	4b41      	ldr	r3, [pc, #260]	@ (8000fc8 <DMA1_Stream1_IRQHandler+0x130>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8000ed2:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d014      	beq.n	8000f08 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ede:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <DMA1_Stream1_IRQHandler+0x120>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <DMA1_Stream1_IRQHandler+0x124>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000eea:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <DMA1_Stream1_IRQHandler+0x128>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000ef0:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <DMA1_Stream1_IRQHandler+0x12c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000ef6:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <DMA1_Stream1_IRQHandler+0x130>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f06:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d014      	beq.n	8000f3e <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <DMA1_Stream1_IRQHandler+0x120>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000f1a:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <DMA1_Stream1_IRQHandler+0x124>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <DMA1_Stream1_IRQHandler+0x128>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000f26:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <DMA1_Stream1_IRQHandler+0x12c>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <DMA1_Stream1_IRQHandler+0x130>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d014      	beq.n	8000f74 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <DMA1_Stream1_IRQHandler+0x120>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <DMA1_Stream1_IRQHandler+0x124>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <DMA1_Stream1_IRQHandler+0x128>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <DMA1_Stream1_IRQHandler+0x12c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <DMA1_Stream1_IRQHandler+0x130>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f72:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d014      	beq.n	8000faa <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <DMA1_Stream1_IRQHandler+0x120>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <DMA1_Stream1_IRQHandler+0x124>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <DMA1_Stream1_IRQHandler+0x128>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <DMA1_Stream1_IRQHandler+0x12c>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <DMA1_Stream1_IRQHandler+0x130>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <DMA1_Stream1_IRQHandler+0x11c>)
 8000fa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fa8:	6093      	str	r3, [r2, #8]
	}
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40026000 	.word	0x40026000
 8000fb8:	200001dc 	.word	0x200001dc
 8000fbc:	2000023c 	.word	0x2000023c
 8000fc0:	20000144 	.word	0x20000144
 8000fc4:	2000010c 	.word	0x2000010c
 8000fc8:	2000027c 	.word	0x2000027c

08000fcc <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <DMA1_Stream2_IRQHandler+0xc8>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8001098 <DMA1_Stream2_IRQHandler+0xcc>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a28      	ldr	r2, [pc, #160]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8000fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00b      	beq.n	8001018 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001000:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <DMA1_Stream2_IRQHandler+0xc8>)
 8001002:	2201      	movs	r2, #1
 8001004:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <DMA1_Stream2_IRQHandler+0xcc>)
 8001008:	2201      	movs	r2, #1
 800100a:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	4a1f      	ldr	r2, [pc, #124]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001016:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <DMA1_Stream2_IRQHandler+0xc8>)
 8001026:	2201      	movs	r2, #1
 8001028:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <DMA1_Stream2_IRQHandler+0xcc>)
 800102c:	2201      	movs	r2, #1
 800102e:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8001036:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800103a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00b      	beq.n	8001060 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <DMA1_Stream2_IRQHandler+0xc8>)
 800104a:	2201      	movs	r2, #1
 800104c:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <DMA1_Stream2_IRQHandler+0xcc>)
 8001050:	2201      	movs	r2, #1
 8001052:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 800105a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800105e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00b      	beq.n	8001084 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <DMA1_Stream2_IRQHandler+0xc8>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <DMA1_Stream2_IRQHandler+0xcc>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <DMA1_Stream2_IRQHandler+0xc4>)
 800107e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001082:	6093      	str	r3, [r2, #8]
	}
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40026000 	.word	0x40026000
 8001094:	20000114 	.word	0x20000114
 8001098:	20000284 	.word	0x20000284

0800109c <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 80010a0:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d01a      	beq.n	80010e2 <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80010ac:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <DMA1_Stream3_IRQHandler+0x15c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80010b2:	4b52      	ldr	r3, [pc, #328]	@ (80011fc <DMA1_Stream3_IRQHandler+0x160>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 80010b8:	4b51      	ldr	r3, [pc, #324]	@ (8001200 <DMA1_Stream3_IRQHandler+0x164>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010be:	4b51      	ldr	r3, [pc, #324]	@ (8001204 <DMA1_Stream3_IRQHandler+0x168>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80010c4:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <DMA1_Stream3_IRQHandler+0x16c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80010ca:	4b50      	ldr	r3, [pc, #320]	@ (800120c <DMA1_Stream3_IRQHandler+0x170>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 80010d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001210 <DMA1_Stream3_IRQHandler+0x174>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80010d6:	4b47      	ldr	r3, [pc, #284]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4a46      	ldr	r2, [pc, #280]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80010dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 80010e2:	4b44      	ldr	r3, [pc, #272]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d01a      	beq.n	8001124 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010ee:	4b42      	ldr	r3, [pc, #264]	@ (80011f8 <DMA1_Stream3_IRQHandler+0x15c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010f4:	4b41      	ldr	r3, [pc, #260]	@ (80011fc <DMA1_Stream3_IRQHandler+0x160>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010fa:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <DMA1_Stream3_IRQHandler+0x164>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001100:	4b40      	ldr	r3, [pc, #256]	@ (8001204 <DMA1_Stream3_IRQHandler+0x168>)
 8001102:	2201      	movs	r2, #1
 8001104:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001106:	4b40      	ldr	r3, [pc, #256]	@ (8001208 <DMA1_Stream3_IRQHandler+0x16c>)
 8001108:	2201      	movs	r2, #1
 800110a:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800110c:	4b3f      	ldr	r3, [pc, #252]	@ (800120c <DMA1_Stream3_IRQHandler+0x170>)
 800110e:	2201      	movs	r2, #1
 8001110:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8001112:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <DMA1_Stream3_IRQHandler+0x174>)
 8001114:	2201      	movs	r2, #1
 8001116:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001118:	4b36      	ldr	r3, [pc, #216]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a35      	ldr	r2, [pc, #212]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 800111e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001122:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8001124:	4b33      	ldr	r3, [pc, #204]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01a      	beq.n	8001166 <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001130:	4b31      	ldr	r3, [pc, #196]	@ (80011f8 <DMA1_Stream3_IRQHandler+0x15c>)
 8001132:	2201      	movs	r2, #1
 8001134:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <DMA1_Stream3_IRQHandler+0x160>)
 8001138:	2201      	movs	r2, #1
 800113a:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <DMA1_Stream3_IRQHandler+0x164>)
 800113e:	2201      	movs	r2, #1
 8001140:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001142:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <DMA1_Stream3_IRQHandler+0x168>)
 8001144:	2201      	movs	r2, #1
 8001146:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001148:	4b2f      	ldr	r3, [pc, #188]	@ (8001208 <DMA1_Stream3_IRQHandler+0x16c>)
 800114a:	2201      	movs	r2, #1
 800114c:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800114e:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <DMA1_Stream3_IRQHandler+0x170>)
 8001150:	2201      	movs	r2, #1
 8001152:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8001154:	4b2e      	ldr	r3, [pc, #184]	@ (8001210 <DMA1_Stream3_IRQHandler+0x174>)
 8001156:	2201      	movs	r2, #1
 8001158:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	4a25      	ldr	r2, [pc, #148]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 8001160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001164:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d01a      	beq.n	80011a8 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001172:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <DMA1_Stream3_IRQHandler+0x15c>)
 8001174:	2201      	movs	r2, #1
 8001176:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <DMA1_Stream3_IRQHandler+0x160>)
 800117a:	2201      	movs	r2, #1
 800117c:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <DMA1_Stream3_IRQHandler+0x164>)
 8001180:	2201      	movs	r2, #1
 8001182:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <DMA1_Stream3_IRQHandler+0x168>)
 8001186:	2201      	movs	r2, #1
 8001188:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <DMA1_Stream3_IRQHandler+0x16c>)
 800118c:	2201      	movs	r2, #1
 800118e:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <DMA1_Stream3_IRQHandler+0x170>)
 8001192:	2201      	movs	r2, #1
 8001194:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <DMA1_Stream3_IRQHandler+0x174>)
 8001198:	2201      	movs	r2, #1
 800119a:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80011a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011a6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01a      	beq.n	80011ea <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <DMA1_Stream3_IRQHandler+0x15c>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <DMA1_Stream3_IRQHandler+0x160>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <DMA1_Stream3_IRQHandler+0x164>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <DMA1_Stream3_IRQHandler+0x168>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <DMA1_Stream3_IRQHandler+0x16c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <DMA1_Stream3_IRQHandler+0x170>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <DMA1_Stream3_IRQHandler+0x174>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <DMA1_Stream3_IRQHandler+0x158>)
 80011e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011e8:	6093      	str	r3, [r2, #8]
	}
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40026000 	.word	0x40026000
 80011f8:	20000234 	.word	0x20000234
 80011fc:	20000214 	.word	0x20000214
 8001200:	20000144 	.word	0x20000144
 8001204:	20000114 	.word	0x20000114
 8001208:	20000084 	.word	0x20000084
 800120c:	200000c4 	.word	0x200000c4
 8001210:	2000028c 	.word	0x2000028c

08001214 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 8001218:	4b54      	ldr	r3, [pc, #336]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01a      	beq.n	800125a <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001224:	4b52      	ldr	r3, [pc, #328]	@ (8001370 <DMA1_Stream4_IRQHandler+0x15c>)
 8001226:	2201      	movs	r2, #1
 8001228:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800122a:	4b52      	ldr	r3, [pc, #328]	@ (8001374 <DMA1_Stream4_IRQHandler+0x160>)
 800122c:	2201      	movs	r2, #1
 800122e:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001230:	4b51      	ldr	r3, [pc, #324]	@ (8001378 <DMA1_Stream4_IRQHandler+0x164>)
 8001232:	2201      	movs	r2, #1
 8001234:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001236:	4b51      	ldr	r3, [pc, #324]	@ (800137c <DMA1_Stream4_IRQHandler+0x168>)
 8001238:	2201      	movs	r2, #1
 800123a:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800123c:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <DMA1_Stream4_IRQHandler+0x16c>)
 800123e:	2201      	movs	r2, #1
 8001240:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001242:	4b50      	ldr	r3, [pc, #320]	@ (8001384 <DMA1_Stream4_IRQHandler+0x170>)
 8001244:	2201      	movs	r2, #1
 8001246:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 8001248:	4b4f      	ldr	r3, [pc, #316]	@ (8001388 <DMA1_Stream4_IRQHandler+0x174>)
 800124a:	2201      	movs	r2, #1
 800124c:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	4a46      	ldr	r2, [pc, #280]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 800125a:	4b44      	ldr	r3, [pc, #272]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b00      	cmp	r3, #0
 8001264:	d01a      	beq.n	800129c <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001266:	4b42      	ldr	r3, [pc, #264]	@ (8001370 <DMA1_Stream4_IRQHandler+0x15c>)
 8001268:	2201      	movs	r2, #1
 800126a:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 800126c:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <DMA1_Stream4_IRQHandler+0x160>)
 800126e:	2201      	movs	r2, #1
 8001270:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001272:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <DMA1_Stream4_IRQHandler+0x164>)
 8001274:	2201      	movs	r2, #1
 8001276:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001278:	4b40      	ldr	r3, [pc, #256]	@ (800137c <DMA1_Stream4_IRQHandler+0x168>)
 800127a:	2201      	movs	r2, #1
 800127c:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800127e:	4b40      	ldr	r3, [pc, #256]	@ (8001380 <DMA1_Stream4_IRQHandler+0x16c>)
 8001280:	2201      	movs	r2, #1
 8001282:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001284:	4b3f      	ldr	r3, [pc, #252]	@ (8001384 <DMA1_Stream4_IRQHandler+0x170>)
 8001286:	2201      	movs	r2, #1
 8001288:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <DMA1_Stream4_IRQHandler+0x174>)
 800128c:	2201      	movs	r2, #1
 800128e:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001290:	4b36      	ldr	r3, [pc, #216]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4a35      	ldr	r2, [pc, #212]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01a      	beq.n	80012de <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80012a8:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <DMA1_Stream4_IRQHandler+0x15c>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 80012ae:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <DMA1_Stream4_IRQHandler+0x160>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <DMA1_Stream4_IRQHandler+0x164>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80012ba:	4b30      	ldr	r3, [pc, #192]	@ (800137c <DMA1_Stream4_IRQHandler+0x168>)
 80012bc:	2201      	movs	r2, #1
 80012be:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <DMA1_Stream4_IRQHandler+0x16c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <DMA1_Stream4_IRQHandler+0x170>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 80012cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <DMA1_Stream4_IRQHandler+0x174>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80012d2:	4b26      	ldr	r3, [pc, #152]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	4a25      	ldr	r2, [pc, #148]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 80012de:	4b23      	ldr	r3, [pc, #140]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d01a      	beq.n	8001320 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012ea:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <DMA1_Stream4_IRQHandler+0x15c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012f0:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <DMA1_Stream4_IRQHandler+0x160>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <DMA1_Stream4_IRQHandler+0x164>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <DMA1_Stream4_IRQHandler+0x168>)
 80012fe:	2201      	movs	r2, #1
 8001300:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001302:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <DMA1_Stream4_IRQHandler+0x16c>)
 8001304:	2201      	movs	r2, #1
 8001306:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <DMA1_Stream4_IRQHandler+0x170>)
 800130a:	2201      	movs	r2, #1
 800130c:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <DMA1_Stream4_IRQHandler+0x174>)
 8001310:	2201      	movs	r2, #1
 8001312:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4a14      	ldr	r2, [pc, #80]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	d01a      	beq.n	8001362 <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <DMA1_Stream4_IRQHandler+0x15c>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <DMA1_Stream4_IRQHandler+0x160>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <DMA1_Stream4_IRQHandler+0x164>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <DMA1_Stream4_IRQHandler+0x168>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <DMA1_Stream4_IRQHandler+0x16c>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <DMA1_Stream4_IRQHandler+0x170>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <DMA1_Stream4_IRQHandler+0x174>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	4a04      	ldr	r2, [pc, #16]	@ (800136c <DMA1_Stream4_IRQHandler+0x158>)
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	60d3      	str	r3, [r2, #12]
	}
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40026000 	.word	0x40026000
 8001370:	20000224 	.word	0x20000224
 8001374:	200001ec 	.word	0x200001ec
 8001378:	2000011c 	.word	0x2000011c
 800137c:	200000b4 	.word	0x200000b4
 8001380:	2000008c 	.word	0x2000008c
 8001384:	200000dc 	.word	0x200000dc
 8001388:	20000294 	.word	0x20000294

0800138c <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8001390:	4b54      	ldr	r3, [pc, #336]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d01a      	beq.n	80013d2 <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800139c:	4b52      	ldr	r3, [pc, #328]	@ (80014e8 <DMA1_Stream5_IRQHandler+0x15c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80013a2:	4b52      	ldr	r3, [pc, #328]	@ (80014ec <DMA1_Stream5_IRQHandler+0x160>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 80013a8:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <DMA1_Stream5_IRQHandler+0x164>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 80013ae:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <DMA1_Stream5_IRQHandler+0x168>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80013b4:	4b50      	ldr	r3, [pc, #320]	@ (80014f8 <DMA1_Stream5_IRQHandler+0x16c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 80013ba:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <DMA1_Stream5_IRQHandler+0x170>)
 80013bc:	2201      	movs	r2, #1
 80013be:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 80013c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001500 <DMA1_Stream5_IRQHandler+0x174>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80013c6:	4b47      	ldr	r3, [pc, #284]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	4a46      	ldr	r2, [pc, #280]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 80013cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d0:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 80013d2:	4b44      	ldr	r3, [pc, #272]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d01a      	beq.n	8001414 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013de:	4b42      	ldr	r3, [pc, #264]	@ (80014e8 <DMA1_Stream5_IRQHandler+0x15c>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013e4:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <DMA1_Stream5_IRQHandler+0x160>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80013ea:	4b41      	ldr	r3, [pc, #260]	@ (80014f0 <DMA1_Stream5_IRQHandler+0x164>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013f0:	4b40      	ldr	r3, [pc, #256]	@ (80014f4 <DMA1_Stream5_IRQHandler+0x168>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013f6:	4b40      	ldr	r3, [pc, #256]	@ (80014f8 <DMA1_Stream5_IRQHandler+0x16c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013fc:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <DMA1_Stream5_IRQHandler+0x170>)
 80013fe:	2201      	movs	r2, #1
 8001400:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001402:	4b3f      	ldr	r3, [pc, #252]	@ (8001500 <DMA1_Stream5_IRQHandler+0x174>)
 8001404:	2201      	movs	r2, #1
 8001406:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001408:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a35      	ldr	r2, [pc, #212]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 800140e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001412:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 8001414:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01a      	beq.n	8001456 <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001420:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <DMA1_Stream5_IRQHandler+0x15c>)
 8001422:	2201      	movs	r2, #1
 8001424:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001426:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <DMA1_Stream5_IRQHandler+0x160>)
 8001428:	2201      	movs	r2, #1
 800142a:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 800142c:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <DMA1_Stream5_IRQHandler+0x164>)
 800142e:	2201      	movs	r2, #1
 8001430:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 8001432:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <DMA1_Stream5_IRQHandler+0x168>)
 8001434:	2201      	movs	r2, #1
 8001436:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <DMA1_Stream5_IRQHandler+0x16c>)
 800143a:	2201      	movs	r2, #1
 800143c:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800143e:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <DMA1_Stream5_IRQHandler+0x170>)
 8001440:	2201      	movs	r2, #1
 8001442:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 8001444:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <DMA1_Stream5_IRQHandler+0x174>)
 8001446:	2201      	movs	r2, #1
 8001448:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800144a:	4b26      	ldr	r3, [pc, #152]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	4a25      	ldr	r2, [pc, #148]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 8001450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001454:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01a      	beq.n	8001498 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001462:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <DMA1_Stream5_IRQHandler+0x15c>)
 8001464:	2201      	movs	r2, #1
 8001466:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <DMA1_Stream5_IRQHandler+0x160>)
 800146a:	2201      	movs	r2, #1
 800146c:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <DMA1_Stream5_IRQHandler+0x164>)
 8001470:	2201      	movs	r2, #1
 8001472:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <DMA1_Stream5_IRQHandler+0x168>)
 8001476:	2201      	movs	r2, #1
 8001478:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <DMA1_Stream5_IRQHandler+0x16c>)
 800147c:	2201      	movs	r2, #1
 800147e:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <DMA1_Stream5_IRQHandler+0x170>)
 8001482:	2201      	movs	r2, #1
 8001484:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <DMA1_Stream5_IRQHandler+0x174>)
 8001488:	2201      	movs	r2, #1
 800148a:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001496:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d01a      	beq.n	80014da <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <DMA1_Stream5_IRQHandler+0x15c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <DMA1_Stream5_IRQHandler+0x160>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <DMA1_Stream5_IRQHandler+0x164>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <DMA1_Stream5_IRQHandler+0x168>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <DMA1_Stream5_IRQHandler+0x16c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <DMA1_Stream5_IRQHandler+0x170>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <DMA1_Stream5_IRQHandler+0x174>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <DMA1_Stream5_IRQHandler+0x158>)
 80014d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d8:	60d3      	str	r3, [r2, #12]
	}
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40026000 	.word	0x40026000
 80014e8:	200000e4 	.word	0x200000e4
 80014ec:	20000204 	.word	0x20000204
 80014f0:	200001cc 	.word	0x200001cc
 80014f4:	20000244 	.word	0x20000244
 80014f8:	200001f4 	.word	0x200001f4
 80014fc:	200000fc 	.word	0x200000fc
 8001500:	2000029c 	.word	0x2000029c

08001504 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8001508:	4b47      	ldr	r3, [pc, #284]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d017      	beq.n	8001544 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001514:	4b45      	ldr	r3, [pc, #276]	@ (800162c <DMA1_Stream6_IRQHandler+0x128>)
 8001516:	2201      	movs	r2, #1
 8001518:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 800151a:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <DMA1_Stream6_IRQHandler+0x12c>)
 800151c:	2201      	movs	r2, #1
 800151e:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001520:	4b44      	ldr	r3, [pc, #272]	@ (8001634 <DMA1_Stream6_IRQHandler+0x130>)
 8001522:	2201      	movs	r2, #1
 8001524:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 8001526:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <DMA1_Stream6_IRQHandler+0x134>)
 8001528:	2201      	movs	r2, #1
 800152a:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800152c:	4b43      	ldr	r3, [pc, #268]	@ (800163c <DMA1_Stream6_IRQHandler+0x138>)
 800152e:	2201      	movs	r2, #1
 8001530:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 8001532:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <DMA1_Stream6_IRQHandler+0x13c>)
 8001534:	2201      	movs	r2, #1
 8001536:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001538:	4b3b      	ldr	r3, [pc, #236]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4a3a      	ldr	r2, [pc, #232]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001542:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8001544:	4b38      	ldr	r3, [pc, #224]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d014      	beq.n	800157a <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001550:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <DMA1_Stream6_IRQHandler+0x12c>)
 8001552:	2201      	movs	r2, #1
 8001554:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001556:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <DMA1_Stream6_IRQHandler+0x130>)
 8001558:	2201      	movs	r2, #1
 800155a:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <DMA1_Stream6_IRQHandler+0x134>)
 800155e:	2201      	movs	r2, #1
 8001560:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001562:	4b36      	ldr	r3, [pc, #216]	@ (800163c <DMA1_Stream6_IRQHandler+0x138>)
 8001564:	2201      	movs	r2, #1
 8001566:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <DMA1_Stream6_IRQHandler+0x13c>)
 800156a:	2201      	movs	r2, #1
 800156c:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 800156e:	4b2e      	ldr	r3, [pc, #184]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001578:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 800157a:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d014      	beq.n	80015b0 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001586:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <DMA1_Stream6_IRQHandler+0x12c>)
 8001588:	2201      	movs	r2, #1
 800158a:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <DMA1_Stream6_IRQHandler+0x130>)
 800158e:	2201      	movs	r2, #1
 8001590:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8001592:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <DMA1_Stream6_IRQHandler+0x134>)
 8001594:	2201      	movs	r2, #1
 8001596:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <DMA1_Stream6_IRQHandler+0x138>)
 800159a:	2201      	movs	r2, #1
 800159c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 800159e:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <DMA1_Stream6_IRQHandler+0x13c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80015a4:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 80015aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015ae:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d014      	beq.n	80015e6 <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <DMA1_Stream6_IRQHandler+0x12c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <DMA1_Stream6_IRQHandler+0x130>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <DMA1_Stream6_IRQHandler+0x134>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <DMA1_Stream6_IRQHandler+0x138>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <DMA1_Stream6_IRQHandler+0x13c>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 80015e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015e4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d014      	beq.n	800161c <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <DMA1_Stream6_IRQHandler+0x12c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <DMA1_Stream6_IRQHandler+0x130>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <DMA1_Stream6_IRQHandler+0x134>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001604:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <DMA1_Stream6_IRQHandler+0x138>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <DMA1_Stream6_IRQHandler+0x13c>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <DMA1_Stream6_IRQHandler+0x124>)
 8001616:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800161a:	60d3      	str	r3, [r2, #12]
	}
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40026000 	.word	0x40026000
 800162c:	200001fc 	.word	0x200001fc
 8001630:	200001c4 	.word	0x200001c4
 8001634:	2000014c 	.word	0x2000014c
 8001638:	20000104 	.word	0x20000104
 800163c:	200000a4 	.word	0x200000a4
 8001640:	200002a4 	.word	0x200002a4

08001644 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8001648:	4b54      	ldr	r3, [pc, #336]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01a      	beq.n	800168a <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001654:	4b52      	ldr	r3, [pc, #328]	@ (80017a0 <DMA1_Stream7_IRQHandler+0x15c>)
 8001656:	2201      	movs	r2, #1
 8001658:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800165a:	4b52      	ldr	r3, [pc, #328]	@ (80017a4 <DMA1_Stream7_IRQHandler+0x160>)
 800165c:	2201      	movs	r2, #1
 800165e:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001660:	4b51      	ldr	r3, [pc, #324]	@ (80017a8 <DMA1_Stream7_IRQHandler+0x164>)
 8001662:	2201      	movs	r2, #1
 8001664:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <DMA1_Stream7_IRQHandler+0x168>)
 8001668:	2201      	movs	r2, #1
 800166a:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800166c:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <DMA1_Stream7_IRQHandler+0x16c>)
 800166e:	2201      	movs	r2, #1
 8001670:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001672:	4b50      	ldr	r3, [pc, #320]	@ (80017b4 <DMA1_Stream7_IRQHandler+0x170>)
 8001674:	2201      	movs	r2, #1
 8001676:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8001678:	4b4f      	ldr	r3, [pc, #316]	@ (80017b8 <DMA1_Stream7_IRQHandler+0x174>)
 800167a:	2201      	movs	r2, #1
 800167c:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4a46      	ldr	r2, [pc, #280]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001684:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001688:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 800168a:	4b44      	ldr	r3, [pc, #272]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01a      	beq.n	80016cc <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001696:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <DMA1_Stream7_IRQHandler+0x15c>)
 8001698:	2201      	movs	r2, #1
 800169a:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800169c:	4b41      	ldr	r3, [pc, #260]	@ (80017a4 <DMA1_Stream7_IRQHandler+0x160>)
 800169e:	2201      	movs	r2, #1
 80016a0:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80016a2:	4b41      	ldr	r3, [pc, #260]	@ (80017a8 <DMA1_Stream7_IRQHandler+0x164>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80016a8:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <DMA1_Stream7_IRQHandler+0x168>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80016ae:	4b40      	ldr	r3, [pc, #256]	@ (80017b0 <DMA1_Stream7_IRQHandler+0x16c>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80016b4:	4b3f      	ldr	r3, [pc, #252]	@ (80017b4 <DMA1_Stream7_IRQHandler+0x170>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80016ba:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <DMA1_Stream7_IRQHandler+0x174>)
 80016bc:	2201      	movs	r2, #1
 80016be:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80016c0:	4b36      	ldr	r3, [pc, #216]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a35      	ldr	r2, [pc, #212]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ca:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 80016cc:	4b33      	ldr	r3, [pc, #204]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01a      	beq.n	800170e <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80016d8:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <DMA1_Stream7_IRQHandler+0x15c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 80016de:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <DMA1_Stream7_IRQHandler+0x160>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 80016e4:	4b30      	ldr	r3, [pc, #192]	@ (80017a8 <DMA1_Stream7_IRQHandler+0x164>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80016ea:	4b30      	ldr	r3, [pc, #192]	@ (80017ac <DMA1_Stream7_IRQHandler+0x168>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80016f0:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <DMA1_Stream7_IRQHandler+0x16c>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80016f6:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <DMA1_Stream7_IRQHandler+0x170>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 80016fc:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <DMA1_Stream7_IRQHandler+0x174>)
 80016fe:	2201      	movs	r2, #1
 8001700:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001702:	4b26      	ldr	r3, [pc, #152]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4a25      	ldr	r2, [pc, #148]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001708:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800170c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 800170e:	4b23      	ldr	r3, [pc, #140]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01a      	beq.n	8001750 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <DMA1_Stream7_IRQHandler+0x15c>)
 800171c:	2201      	movs	r2, #1
 800171e:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <DMA1_Stream7_IRQHandler+0x160>)
 8001722:	2201      	movs	r2, #1
 8001724:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <DMA1_Stream7_IRQHandler+0x164>)
 8001728:	2201      	movs	r2, #1
 800172a:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <DMA1_Stream7_IRQHandler+0x168>)
 800172e:	2201      	movs	r2, #1
 8001730:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <DMA1_Stream7_IRQHandler+0x16c>)
 8001734:	2201      	movs	r2, #1
 8001736:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <DMA1_Stream7_IRQHandler+0x170>)
 800173a:	2201      	movs	r2, #1
 800173c:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 800173e:	4b1e      	ldr	r3, [pc, #120]	@ (80017b8 <DMA1_Stream7_IRQHandler+0x174>)
 8001740:	2201      	movs	r2, #1
 8001742:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 800174a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800174e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01a      	beq.n	8001792 <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <DMA1_Stream7_IRQHandler+0x15c>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <DMA1_Stream7_IRQHandler+0x160>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <DMA1_Stream7_IRQHandler+0x164>)
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <DMA1_Stream7_IRQHandler+0x168>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <DMA1_Stream7_IRQHandler+0x16c>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <DMA1_Stream7_IRQHandler+0x170>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8001780:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <DMA1_Stream7_IRQHandler+0x174>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <DMA1_Stream7_IRQHandler+0x158>)
 800178c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001790:	60d3      	str	r3, [r2, #12]
	}
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40026000 	.word	0x40026000
 80017a0:	20000094 	.word	0x20000094
 80017a4:	200000ac 	.word	0x200000ac
 80017a8:	2000012c 	.word	0x2000012c
 80017ac:	2000021c 	.word	0x2000021c
 80017b0:	200001d4 	.word	0x200001d4
 80017b4:	200001e4 	.word	0x200001e4
 80017b8:	200002ac 	.word	0x200002ac

080017bc <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 80017c0:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d014      	beq.n	80017f6 <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 80017cc:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <DMA2_Stream0_IRQHandler+0x120>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 80017d2:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <DMA2_Stream0_IRQHandler+0x124>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 80017d8:	4b42      	ldr	r3, [pc, #264]	@ (80018e4 <DMA2_Stream0_IRQHandler+0x128>)
 80017da:	2201      	movs	r2, #1
 80017dc:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 80017de:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <DMA2_Stream0_IRQHandler+0x12c>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 80017e4:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <DMA2_Stream0_IRQHandler+0x130>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4a3a      	ldr	r2, [pc, #232]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 80017f6:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d014      	beq.n	800182c <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001802:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <DMA2_Stream0_IRQHandler+0x120>)
 8001804:	2201      	movs	r2, #1
 8001806:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001808:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <DMA2_Stream0_IRQHandler+0x124>)
 800180a:	2201      	movs	r2, #1
 800180c:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800180e:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <DMA2_Stream0_IRQHandler+0x128>)
 8001810:	2201      	movs	r2, #1
 8001812:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001814:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <DMA2_Stream0_IRQHandler+0x12c>)
 8001816:	2201      	movs	r2, #1
 8001818:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 800181a:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <DMA2_Stream0_IRQHandler+0x130>)
 800181c:	2201      	movs	r2, #1
 800181e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001820:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a2c      	ldr	r2, [pc, #176]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 800182c:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d014      	beq.n	8001862 <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001838:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <DMA2_Stream0_IRQHandler+0x120>)
 800183a:	2201      	movs	r2, #1
 800183c:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <DMA2_Stream0_IRQHandler+0x124>)
 8001840:	2201      	movs	r2, #1
 8001842:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <DMA2_Stream0_IRQHandler+0x128>)
 8001846:	2201      	movs	r2, #1
 8001848:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <DMA2_Stream0_IRQHandler+0x12c>)
 800184c:	2201      	movs	r2, #1
 800184e:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8001850:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <DMA2_Stream0_IRQHandler+0x130>)
 8001852:	2201      	movs	r2, #1
 8001854:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4a1f      	ldr	r2, [pc, #124]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8001862:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d014      	beq.n	8001898 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <DMA2_Stream0_IRQHandler+0x120>)
 8001870:	2201      	movs	r2, #1
 8001872:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001874:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <DMA2_Stream0_IRQHandler+0x124>)
 8001876:	2201      	movs	r2, #1
 8001878:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <DMA2_Stream0_IRQHandler+0x128>)
 800187c:	2201      	movs	r2, #1
 800187e:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <DMA2_Stream0_IRQHandler+0x12c>)
 8001882:	2201      	movs	r2, #1
 8001884:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <DMA2_Stream0_IRQHandler+0x130>)
 8001888:	2201      	movs	r2, #1
 800188a:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d014      	beq.n	80018ce <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <DMA2_Stream0_IRQHandler+0x120>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <DMA2_Stream0_IRQHandler+0x124>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <DMA2_Stream0_IRQHandler+0x128>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <DMA2_Stream0_IRQHandler+0x12c>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <DMA2_Stream0_IRQHandler+0x130>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <DMA2_Stream0_IRQHandler+0x11c>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	6093      	str	r3, [r2, #8]
	}
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40026400 	.word	0x40026400
 80018dc:	200000bc 	.word	0x200000bc
 80018e0:	2000025c 	.word	0x2000025c
 80018e4:	2000017c 	.word	0x2000017c
 80018e8:	20000184 	.word	0x20000184
 80018ec:	200002b4 	.word	0x200002b4

080018f0 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 80018f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01d      	beq.n	800193c <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8001900:	4b5a      	ldr	r3, [pc, #360]	@ (8001a6c <DMA2_Stream1_IRQHandler+0x17c>)
 8001902:	2201      	movs	r2, #1
 8001904:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001906:	4b5a      	ldr	r3, [pc, #360]	@ (8001a70 <DMA2_Stream1_IRQHandler+0x180>)
 8001908:	2201      	movs	r2, #1
 800190a:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 800190c:	4b59      	ldr	r3, [pc, #356]	@ (8001a74 <DMA2_Stream1_IRQHandler+0x184>)
 800190e:	2201      	movs	r2, #1
 8001910:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001912:	4b59      	ldr	r3, [pc, #356]	@ (8001a78 <DMA2_Stream1_IRQHandler+0x188>)
 8001914:	2201      	movs	r2, #1
 8001916:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8001918:	4b58      	ldr	r3, [pc, #352]	@ (8001a7c <DMA2_Stream1_IRQHandler+0x18c>)
 800191a:	2201      	movs	r2, #1
 800191c:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 800191e:	4b58      	ldr	r3, [pc, #352]	@ (8001a80 <DMA2_Stream1_IRQHandler+0x190>)
 8001920:	2201      	movs	r2, #1
 8001922:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001924:	4b57      	ldr	r3, [pc, #348]	@ (8001a84 <DMA2_Stream1_IRQHandler+0x194>)
 8001926:	2201      	movs	r2, #1
 8001928:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 800192a:	4b57      	ldr	r3, [pc, #348]	@ (8001a88 <DMA2_Stream1_IRQHandler+0x198>)
 800192c:	2201      	movs	r2, #1
 800192e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001930:	4b4d      	ldr	r3, [pc, #308]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a4c      	ldr	r2, [pc, #304]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800193a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 800193c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01d      	beq.n	8001984 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001948:	4b48      	ldr	r3, [pc, #288]	@ (8001a6c <DMA2_Stream1_IRQHandler+0x17c>)
 800194a:	2201      	movs	r2, #1
 800194c:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 800194e:	4b48      	ldr	r3, [pc, #288]	@ (8001a70 <DMA2_Stream1_IRQHandler+0x180>)
 8001950:	2201      	movs	r2, #1
 8001952:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001954:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <DMA2_Stream1_IRQHandler+0x184>)
 8001956:	2201      	movs	r2, #1
 8001958:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <DMA2_Stream1_IRQHandler+0x188>)
 800195c:	2201      	movs	r2, #1
 800195e:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001960:	4b46      	ldr	r3, [pc, #280]	@ (8001a7c <DMA2_Stream1_IRQHandler+0x18c>)
 8001962:	2201      	movs	r2, #1
 8001964:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001966:	4b46      	ldr	r3, [pc, #280]	@ (8001a80 <DMA2_Stream1_IRQHandler+0x190>)
 8001968:	2201      	movs	r2, #1
 800196a:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800196c:	4b45      	ldr	r3, [pc, #276]	@ (8001a84 <DMA2_Stream1_IRQHandler+0x194>)
 800196e:	2201      	movs	r2, #1
 8001970:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8001972:	4b45      	ldr	r3, [pc, #276]	@ (8001a88 <DMA2_Stream1_IRQHandler+0x198>)
 8001974:	2201      	movs	r2, #1
 8001976:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001982:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8001984:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01d      	beq.n	80019cc <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <DMA2_Stream1_IRQHandler+0x17c>)
 8001992:	2201      	movs	r2, #1
 8001994:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001996:	4b36      	ldr	r3, [pc, #216]	@ (8001a70 <DMA2_Stream1_IRQHandler+0x180>)
 8001998:	2201      	movs	r2, #1
 800199a:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 800199c:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <DMA2_Stream1_IRQHandler+0x184>)
 800199e:	2201      	movs	r2, #1
 80019a0:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80019a2:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <DMA2_Stream1_IRQHandler+0x188>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 80019a8:	4b34      	ldr	r3, [pc, #208]	@ (8001a7c <DMA2_Stream1_IRQHandler+0x18c>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <DMA2_Stream1_IRQHandler+0x190>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 80019b4:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <DMA2_Stream1_IRQHandler+0x194>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <DMA2_Stream1_IRQHandler+0x198>)
 80019bc:	2201      	movs	r2, #1
 80019be:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a28      	ldr	r2, [pc, #160]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ca:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 80019cc:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01d      	beq.n	8001a14 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019d8:	4b24      	ldr	r3, [pc, #144]	@ (8001a6c <DMA2_Stream1_IRQHandler+0x17c>)
 80019da:	2201      	movs	r2, #1
 80019dc:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <DMA2_Stream1_IRQHandler+0x180>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <DMA2_Stream1_IRQHandler+0x184>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <DMA2_Stream1_IRQHandler+0x188>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <DMA2_Stream1_IRQHandler+0x18c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019f6:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <DMA2_Stream1_IRQHandler+0x190>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80019fc:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <DMA2_Stream1_IRQHandler+0x194>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8001a02:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <DMA2_Stream1_IRQHandler+0x198>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a16      	ldr	r2, [pc, #88]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a12:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01d      	beq.n	8001a5c <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <DMA2_Stream1_IRQHandler+0x17c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <DMA2_Stream1_IRQHandler+0x180>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <DMA2_Stream1_IRQHandler+0x184>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <DMA2_Stream1_IRQHandler+0x188>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001a38:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <DMA2_Stream1_IRQHandler+0x18c>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <DMA2_Stream1_IRQHandler+0x190>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <DMA2_Stream1_IRQHandler+0x194>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <DMA2_Stream1_IRQHandler+0x198>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <DMA2_Stream1_IRQHandler+0x178>)
 8001a56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a5a:	6093      	str	r3, [r2, #8]
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40026400 	.word	0x40026400
 8001a6c:	2000026c 	.word	0x2000026c
 8001a70:	2000015c 	.word	0x2000015c
 8001a74:	2000018c 	.word	0x2000018c
 8001a78:	200001b4 	.word	0x200001b4
 8001a7c:	200001bc 	.word	0x200001bc
 8001a80:	20000254 	.word	0x20000254
 8001a84:	20000134 	.word	0x20000134
 8001a88:	200002bc 	.word	0x200002bc

08001a8c <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8001a90:	4b3e      	ldr	r3, [pc, #248]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d011      	beq.n	8001ac0 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b90 <DMA2_Stream2_IRQHandler+0x104>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <DMA2_Stream2_IRQHandler+0x108>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <DMA2_Stream2_IRQHandler+0x10c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <DMA2_Stream2_IRQHandler+0x110>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001ab4:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a34      	ldr	r2, [pc, #208]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001abe:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8001ac0:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d011      	beq.n	8001af0 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001acc:	4b30      	ldr	r3, [pc, #192]	@ (8001b90 <DMA2_Stream2_IRQHandler+0x104>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001ad2:	4b30      	ldr	r3, [pc, #192]	@ (8001b94 <DMA2_Stream2_IRQHandler+0x108>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b98 <DMA2_Stream2_IRQHandler+0x10c>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001ade:	4b2f      	ldr	r3, [pc, #188]	@ (8001b9c <DMA2_Stream2_IRQHandler+0x110>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001ae4:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a28      	ldr	r2, [pc, #160]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001aea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aee:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8001af0:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d011      	beq.n	8001b20 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <DMA2_Stream2_IRQHandler+0x104>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <DMA2_Stream2_IRQHandler+0x108>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001b08:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <DMA2_Stream2_IRQHandler+0x10c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <DMA2_Stream2_IRQHandler+0x110>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b1e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d011      	beq.n	8001b50 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <DMA2_Stream2_IRQHandler+0x104>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <DMA2_Stream2_IRQHandler+0x108>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <DMA2_Stream2_IRQHandler+0x10c>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <DMA2_Stream2_IRQHandler+0x110>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a10      	ldr	r2, [pc, #64]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b4e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d011      	beq.n	8001b80 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <DMA2_Stream2_IRQHandler+0x104>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <DMA2_Stream2_IRQHandler+0x108>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <DMA2_Stream2_IRQHandler+0x10c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <DMA2_Stream2_IRQHandler+0x110>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <DMA2_Stream2_IRQHandler+0x100>)
 8001b7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b7e:	6093      	str	r3, [r2, #8]
	}
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40026400 	.word	0x40026400
 8001b90:	20000194 	.word	0x20000194
 8001b94:	200000ec 	.word	0x200000ec
 8001b98:	20000264 	.word	0x20000264
 8001b9c:	200002c4 	.word	0x200002c4

08001ba0 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8001ba4:	4b36      	ldr	r3, [pc, #216]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00e      	beq.n	8001bce <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <DMA2_Stream3_IRQHandler+0xe4>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001bb6:	4b34      	ldr	r3, [pc, #208]	@ (8001c88 <DMA2_Stream3_IRQHandler+0xe8>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8001bbc:	4b33      	ldr	r3, [pc, #204]	@ (8001c8c <DMA2_Stream3_IRQHandler+0xec>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001bc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bcc:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8001bce:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00e      	beq.n	8001bf8 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001bda:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <DMA2_Stream3_IRQHandler+0xe4>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001be0:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <DMA2_Stream3_IRQHandler+0xe8>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8001be6:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <DMA2_Stream3_IRQHandler+0xec>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001bec:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a23      	ldr	r2, [pc, #140]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf6:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00e      	beq.n	8001c22 <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <DMA2_Stream3_IRQHandler+0xe4>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <DMA2_Stream3_IRQHandler+0xe8>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <DMA2_Stream3_IRQHandler+0xec>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4a19      	ldr	r2, [pc, #100]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c20:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00e      	beq.n	8001c4c <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <DMA2_Stream3_IRQHandler+0xe4>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <DMA2_Stream3_IRQHandler+0xe8>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <DMA2_Stream3_IRQHandler+0xec>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a0e      	ldr	r2, [pc, #56]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c4a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00e      	beq.n	8001c76 <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <DMA2_Stream3_IRQHandler+0xe4>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <DMA2_Stream3_IRQHandler+0xe8>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <DMA2_Stream3_IRQHandler+0xec>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <DMA2_Stream3_IRQHandler+0xe0>)
 8001c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c74:	6093      	str	r3, [r2, #8]
	}
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40026400 	.word	0x40026400
 8001c84:	2000024c 	.word	0x2000024c
 8001c88:	200000d4 	.word	0x200000d4
 8001c8c:	200002cc 	.word	0x200002cc

08001c90 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8001c94:	4b36      	ldr	r3, [pc, #216]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001ca0:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <DMA2_Stream4_IRQHandler+0xe4>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001ca6:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <DMA2_Stream4_IRQHandler+0xe8>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8001cac:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <DMA2_Stream4_IRQHandler+0xec>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00e      	beq.n	8001ce8 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <DMA2_Stream4_IRQHandler+0xe4>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <DMA2_Stream4_IRQHandler+0xe8>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001cd6:	4b29      	ldr	r3, [pc, #164]	@ (8001d7c <DMA2_Stream4_IRQHandler+0xec>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001ce8:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00e      	beq.n	8001d12 <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <DMA2_Stream4_IRQHandler+0xe4>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <DMA2_Stream4_IRQHandler+0xe8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <DMA2_Stream4_IRQHandler+0xec>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00e      	beq.n	8001d3c <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <DMA2_Stream4_IRQHandler+0xe4>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <DMA2_Stream4_IRQHandler+0xe8>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <DMA2_Stream4_IRQHandler+0xec>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <DMA2_Stream4_IRQHandler+0xe4>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <DMA2_Stream4_IRQHandler+0xe8>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <DMA2_Stream4_IRQHandler+0xec>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <DMA2_Stream4_IRQHandler+0xe0>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	60d3      	str	r3, [r2, #12]
	}
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40026400 	.word	0x40026400
 8001d74:	20000174 	.word	0x20000174
 8001d78:	2000019c 	.word	0x2000019c
 8001d7c:	200002d4 	.word	0x200002d4

08001d80 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001d84:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00b      	beq.n	8001da8 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001d90:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <DMA2_Stream5_IRQHandler+0xc8>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <DMA2_Stream5_IRQHandler+0xcc>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001d9c:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001da6:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8001da8:	4b26      	ldr	r3, [pc, #152]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001db4:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <DMA2_Stream5_IRQHandler+0xc8>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <DMA2_Stream5_IRQHandler+0xcc>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dca:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <DMA2_Stream5_IRQHandler+0xc8>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <DMA2_Stream5_IRQHandler+0xcc>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a16      	ldr	r2, [pc, #88]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dee:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <DMA2_Stream5_IRQHandler+0xc8>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <DMA2_Stream5_IRQHandler+0xcc>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e12:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <DMA2_Stream5_IRQHandler+0xc8>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <DMA2_Stream5_IRQHandler+0xcc>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <DMA2_Stream5_IRQHandler+0xc4>)
 8001e32:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e36:	60d3      	str	r3, [r2, #12]
	}
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40026400 	.word	0x40026400
 8001e48:	20000154 	.word	0x20000154
 8001e4c:	200002dc 	.word	0x200002dc

08001e50 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8001e54:	4b45      	ldr	r3, [pc, #276]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d014      	beq.n	8001e8a <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001e60:	4b43      	ldr	r3, [pc, #268]	@ (8001f70 <DMA2_Stream6_IRQHandler+0x120>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001e66:	4b43      	ldr	r3, [pc, #268]	@ (8001f74 <DMA2_Stream6_IRQHandler+0x124>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001e6c:	4b42      	ldr	r3, [pc, #264]	@ (8001f78 <DMA2_Stream6_IRQHandler+0x128>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001e72:	4b42      	ldr	r3, [pc, #264]	@ (8001f7c <DMA2_Stream6_IRQHandler+0x12c>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001e78:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <DMA2_Stream6_IRQHandler+0x130>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	4a3a      	ldr	r2, [pc, #232]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e88:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8001e8a:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d014      	beq.n	8001ec0 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8001e96:	4b36      	ldr	r3, [pc, #216]	@ (8001f70 <DMA2_Stream6_IRQHandler+0x120>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e9c:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <DMA2_Stream6_IRQHandler+0x124>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001ea2:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <DMA2_Stream6_IRQHandler+0x128>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001ea8:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <DMA2_Stream6_IRQHandler+0x12c>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001eae:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <DMA2_Stream6_IRQHandler+0x130>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001eba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ebe:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d014      	beq.n	8001ef6 <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <DMA2_Stream6_IRQHandler+0x120>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001ed2:	4b28      	ldr	r3, [pc, #160]	@ (8001f74 <DMA2_Stream6_IRQHandler+0x124>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001ed8:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <DMA2_Stream6_IRQHandler+0x128>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001ede:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <DMA2_Stream6_IRQHandler+0x12c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8001ee4:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <DMA2_Stream6_IRQHandler+0x130>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a1f      	ldr	r2, [pc, #124]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ef4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d014      	beq.n	8001f2c <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001f02:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <DMA2_Stream6_IRQHandler+0x120>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <DMA2_Stream6_IRQHandler+0x124>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <DMA2_Stream6_IRQHandler+0x128>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <DMA2_Stream6_IRQHandler+0x12c>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <DMA2_Stream6_IRQHandler+0x130>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f2a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d014      	beq.n	8001f62 <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <DMA2_Stream6_IRQHandler+0x120>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <DMA2_Stream6_IRQHandler+0x124>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <DMA2_Stream6_IRQHandler+0x128>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <DMA2_Stream6_IRQHandler+0x12c>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <DMA2_Stream6_IRQHandler+0x130>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <DMA2_Stream6_IRQHandler+0x11c>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f60:	60d3      	str	r3, [r2, #12]
	}
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40026400 	.word	0x40026400
 8001f70:	20000164 	.word	0x20000164
 8001f74:	2000016c 	.word	0x2000016c
 8001f78:	200001a4 	.word	0x200001a4
 8001f7c:	2000013c 	.word	0x2000013c
 8001f80:	200002e4 	.word	0x200002e4

08001f84 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8001f88:	4b36      	ldr	r3, [pc, #216]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00e      	beq.n	8001fb2 <DMA2_Stream7_IRQHandler+0x2e>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001f94:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a32      	ldr	r2, [pc, #200]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001f9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f9e:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001fa0:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <DMA2_Stream7_IRQHandler+0xe4>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	@ (800206c <DMA2_Stream7_IRQHandler+0xe8>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8001fac:	4b30      	ldr	r3, [pc, #192]	@ (8002070 <DMA2_Stream7_IRQHandler+0xec>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00e      	beq.n	8001fdc <DMA2_Stream7_IRQHandler+0x58>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001fc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc8:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <DMA2_Stream7_IRQHandler+0xe4>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <DMA2_Stream7_IRQHandler+0xe8>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001fd6:	4b26      	ldr	r3, [pc, #152]	@ (8002070 <DMA2_Stream7_IRQHandler+0xec>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <DMA2_Stream7_IRQHandler+0x82>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8001fee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <DMA2_Stream7_IRQHandler+0xe4>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <DMA2_Stream7_IRQHandler+0xe8>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <DMA2_Stream7_IRQHandler+0xec>)
 8002002:	2201      	movs	r2, #1
 8002004:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <DMA2_Stream7_IRQHandler+0xac>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	4a13      	ldr	r2, [pc, #76]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8002018:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800201c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <DMA2_Stream7_IRQHandler+0xe4>)
 8002020:	2201      	movs	r2, #1
 8002022:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <DMA2_Stream7_IRQHandler+0xe8>)
 8002026:	2201      	movs	r2, #1
 8002028:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <DMA2_Stream7_IRQHandler+0xec>)
 800202c:	2201      	movs	r2, #1
 800202e:	705a      	strb	r2, [r3, #1]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <DMA2_Stream7_IRQHandler+0xd6>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <DMA2_Stream7_IRQHandler+0xe0>)
 8002042:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002046:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8002048:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <DMA2_Stream7_IRQHandler+0xe4>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <DMA2_Stream7_IRQHandler+0xe8>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <DMA2_Stream7_IRQHandler+0xec>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]

	}
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40026400 	.word	0x40026400
 8002068:	200001ac 	.word	0x200001ac
 800206c:	200000f4 	.word	0x200000f4
 8002070:	200002ec 	.word	0x200002ec

08002074 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0c      	ldr	r2, [pc, #48]	@ (80020b4 <DMA_Clock_Enable+0x40>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d105      	bne.n	8002092 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <DMA_Clock_Enable+0x44>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a0b      	ldr	r2, [pc, #44]	@ (80020b8 <DMA_Clock_Enable+0x44>)
 800208c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a09      	ldr	r2, [pc, #36]	@ (80020bc <DMA_Clock_Enable+0x48>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d105      	bne.n	80020a8 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <DMA_Clock_Enable+0x44>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <DMA_Clock_Enable+0x44>)
 80020a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020a6:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40026000 	.word	0x40026000
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40026400 	.word	0x40026400

080020c0 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffd3 	bl	8002074 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7a1b      	ldrb	r3, [r3, #8]
 80020d8:	065a      	lsls	r2, r3, #25
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	6819      	ldr	r1, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2200      	movs	r2, #0
 8002154:	4293      	cmp	r3, r2
 8002156:	f000 80f4 	beq.w	8002342 <DMA_Init+0x282>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2280      	movs	r2, #128	@ 0x80
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	61da      	str	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <DMA_Init+0xc0>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	6959      	ldr	r1, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	430a      	orrs	r2, r1
 800217e:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2210      	movs	r2, #16
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	61da      	str	r2, [r3, #28]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <DMA_Init+0xe4>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f042 0210 	orr.w	r2, r2, #16
 80021a2:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2208      	movs	r2, #8
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	61da      	str	r2, [r3, #28]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <DMA_Init+0x108>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f042 0208 	orr.w	r2, r2, #8
 80021c6:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2204      	movs	r2, #4
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	61da      	str	r2, [r3, #28]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <DMA_Init+0x12c>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f042 0204 	orr.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2202      	movs	r2, #2
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	61da      	str	r2, [r3, #28]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <DMA_Init+0x150>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f042 0202 	orr.w	r2, r2, #2
 800220e:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a67      	ldr	r2, [pc, #412]	@ (80023b4 <DMA_Init+0x2f4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d147      	bne.n	80022aa <DMA_Init+0x1ea>
        {
            if(config->Request.Stream == DMA1_Stream0){
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a66      	ldr	r2, [pc, #408]	@ (80023b8 <DMA_Init+0x2f8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <DMA_Init+0x16c>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002224:	200b      	movs	r0, #11
 8002226:	f7fe fd5d 	bl	8000ce4 <__NVIC_EnableIRQ>
 800222a:	e08a      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a62      	ldr	r2, [pc, #392]	@ (80023bc <DMA_Init+0x2fc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d103      	bne.n	800223e <DMA_Init+0x17e>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002236:	200c      	movs	r0, #12
 8002238:	f7fe fd54 	bl	8000ce4 <__NVIC_EnableIRQ>
 800223c:	e081      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a5f      	ldr	r2, [pc, #380]	@ (80023c0 <DMA_Init+0x300>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <DMA_Init+0x190>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002248:	200d      	movs	r0, #13
 800224a:	f7fe fd4b 	bl	8000ce4 <__NVIC_EnableIRQ>
 800224e:	e078      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a5b      	ldr	r2, [pc, #364]	@ (80023c4 <DMA_Init+0x304>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d103      	bne.n	8002262 <DMA_Init+0x1a2>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800225a:	200e      	movs	r0, #14
 800225c:	f7fe fd42 	bl	8000ce4 <__NVIC_EnableIRQ>
 8002260:	e06f      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a58      	ldr	r2, [pc, #352]	@ (80023c8 <DMA_Init+0x308>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d103      	bne.n	8002274 <DMA_Init+0x1b4>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800226c:	200f      	movs	r0, #15
 800226e:	f7fe fd39 	bl	8000ce4 <__NVIC_EnableIRQ>
 8002272:	e066      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a54      	ldr	r2, [pc, #336]	@ (80023cc <DMA_Init+0x30c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d103      	bne.n	8002286 <DMA_Init+0x1c6>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800227e:	2010      	movs	r0, #16
 8002280:	f7fe fd30 	bl	8000ce4 <__NVIC_EnableIRQ>
 8002284:	e05d      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a51      	ldr	r2, [pc, #324]	@ (80023d0 <DMA_Init+0x310>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d103      	bne.n	8002298 <DMA_Init+0x1d8>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002290:	2011      	movs	r0, #17
 8002292:	f7fe fd27 	bl	8000ce4 <__NVIC_EnableIRQ>
 8002296:	e054      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a4d      	ldr	r2, [pc, #308]	@ (80023d4 <DMA_Init+0x314>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d14f      	bne.n	8002342 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80022a2:	202f      	movs	r0, #47	@ 0x2f
 80022a4:	f7fe fd1e 	bl	8000ce4 <__NVIC_EnableIRQ>
 80022a8:	e04b      	b.n	8002342 <DMA_Init+0x282>
            }
        }
        else if(config->Request.Controller == DMA2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a4a      	ldr	r2, [pc, #296]	@ (80023d8 <DMA_Init+0x318>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d146      	bne.n	8002342 <DMA_Init+0x282>
        {
            if(config->Request.Stream == DMA2_Stream0){
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a48      	ldr	r2, [pc, #288]	@ (80023dc <DMA_Init+0x31c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d103      	bne.n	80022c6 <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022be:	2038      	movs	r0, #56	@ 0x38
 80022c0:	f7fe fd10 	bl	8000ce4 <__NVIC_EnableIRQ>
 80022c4:	e03d      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a45      	ldr	r2, [pc, #276]	@ (80023e0 <DMA_Init+0x320>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d103      	bne.n	80022d8 <DMA_Init+0x218>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022d0:	2039      	movs	r0, #57	@ 0x39
 80022d2:	f7fe fd07 	bl	8000ce4 <__NVIC_EnableIRQ>
 80022d6:	e034      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a41      	ldr	r2, [pc, #260]	@ (80023e4 <DMA_Init+0x324>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d103      	bne.n	80022ea <DMA_Init+0x22a>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80022e2:	203a      	movs	r0, #58	@ 0x3a
 80022e4:	f7fe fcfe 	bl	8000ce4 <__NVIC_EnableIRQ>
 80022e8:	e02b      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a3e      	ldr	r2, [pc, #248]	@ (80023e8 <DMA_Init+0x328>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d103      	bne.n	80022fc <DMA_Init+0x23c>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80022f4:	203b      	movs	r0, #59	@ 0x3b
 80022f6:	f7fe fcf5 	bl	8000ce4 <__NVIC_EnableIRQ>
 80022fa:	e022      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a3a      	ldr	r2, [pc, #232]	@ (80023ec <DMA_Init+0x32c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d103      	bne.n	800230e <DMA_Init+0x24e>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002306:	203c      	movs	r0, #60	@ 0x3c
 8002308:	f7fe fcec 	bl	8000ce4 <__NVIC_EnableIRQ>
 800230c:	e019      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a37      	ldr	r2, [pc, #220]	@ (80023f0 <DMA_Init+0x330>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <DMA_Init+0x260>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002318:	2044      	movs	r0, #68	@ 0x44
 800231a:	f7fe fce3 	bl	8000ce4 <__NVIC_EnableIRQ>
 800231e:	e010      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a33      	ldr	r2, [pc, #204]	@ (80023f4 <DMA_Init+0x334>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d103      	bne.n	8002332 <DMA_Init+0x272>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800232a:	2045      	movs	r0, #69	@ 0x45
 800232c:	f7fe fcda 	bl	8000ce4 <__NVIC_EnableIRQ>
 8002330:	e007      	b.n	8002342 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a30      	ldr	r2, [pc, #192]	@ (80023f8 <DMA_Init+0x338>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d102      	bne.n	8002342 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800233c:	2046      	movs	r0, #70	@ 0x46
 800233e:	f7fe fcd1 	bl	8000ce4 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8c1b      	ldrh	r3, [r3, #32]
 800234c:	4619      	mov	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002360:	4619      	mov	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <DMA_Init+0x2c8>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e010      	b.n	80023aa <DMA_Init+0x2ea>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2200      	movs	r2, #0
 800238e:	4293      	cmp	r3, r2
 8002390:	d108      	bne.n	80023a4 <DMA_Init+0x2e4>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e002      	b.n	80023aa <DMA_Init+0x2ea>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
 80023a8:	e000      	b.n	80023ac <DMA_Init+0x2ec>
    }

    return 1;  // Return 1 on successful initialization
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40026000 	.word	0x40026000
 80023b8:	40026010 	.word	0x40026010
 80023bc:	40026028 	.word	0x40026028
 80023c0:	40026040 	.word	0x40026040
 80023c4:	40026058 	.word	0x40026058
 80023c8:	40026070 	.word	0x40026070
 80023cc:	40026088 	.word	0x40026088
 80023d0:	400260a0 	.word	0x400260a0
 80023d4:	400260b8 	.word	0x400260b8
 80023d8:	40026400 	.word	0x40026400
 80023dc:	40026410 	.word	0x40026410
 80023e0:	40026428 	.word	0x40026428
 80023e4:	40026440 	.word	0x40026440
 80023e8:	40026458 	.word	0x40026458
 80023ec:	40026470 	.word	0x40026470
 80023f0:	40026488 	.word	0x40026488
 80023f4:	400264a0 	.word	0x400264a0
 80023f8:	400264b8 	.word	0x400264b8

080023fc <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8002412:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8c1b      	ldrh	r3, [r3, #32]
 800244c:	4619      	mov	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800245e:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002468:	609a      	str	r2, [r3, #8]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	4a43      	ldr	r2, [pc, #268]	@ (800259c <DMA_Set_Trigger+0x124>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d003      	beq.n	800249c <DMA_Set_Trigger+0x24>
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4a42      	ldr	r2, [pc, #264]	@ (80025a0 <DMA_Set_Trigger+0x128>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d178      	bne.n	800258e <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4a41      	ldr	r2, [pc, #260]	@ (80025a4 <DMA_Set_Trigger+0x12c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d918      	bls.n	80024d6 <DMA_Set_Trigger+0x5e>
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4a40      	ldr	r2, [pc, #256]	@ (80025a8 <DMA_Set_Trigger+0x130>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d814      	bhi.n	80024d6 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <DMA_Set_Trigger+0x134>)
 80024b0:	4413      	add	r3, r2
 80024b2:	10db      	asrs	r3, r3, #3
 80024b4:	4a3e      	ldr	r2, [pc, #248]	@ (80025b0 <DMA_Set_Trigger+0x138>)
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <DMA_Set_Trigger+0x13c>)
 80024be:	5c9b      	ldrb	r3, [r3, r2]
 80024c0:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	213f      	movs	r1, #63	@ 0x3f
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	431a      	orrs	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e055      	b.n	8002582 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4a37      	ldr	r2, [pc, #220]	@ (80025b8 <DMA_Set_Trigger+0x140>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d918      	bls.n	8002510 <DMA_Set_Trigger+0x98>
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4a36      	ldr	r2, [pc, #216]	@ (80025bc <DMA_Set_Trigger+0x144>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d814      	bhi.n	8002510 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <DMA_Set_Trigger+0x148>)
 80024ea:	4413      	add	r3, r2
 80024ec:	10db      	asrs	r3, r3, #3
 80024ee:	4a30      	ldr	r2, [pc, #192]	@ (80025b0 <DMA_Set_Trigger+0x138>)
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b33      	ldr	r3, [pc, #204]	@ (80025c4 <DMA_Set_Trigger+0x14c>)
 80024f8:	5c9b      	ldrb	r3, [r3, r2]
 80024fa:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	213f      	movs	r1, #63	@ 0x3f
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	431a      	orrs	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	e038      	b.n	8002582 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <DMA_Set_Trigger+0x150>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d918      	bls.n	800254a <DMA_Set_Trigger+0xd2>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <DMA_Set_Trigger+0x154>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d814      	bhi.n	800254a <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <DMA_Set_Trigger+0x158>)
 8002524:	4413      	add	r3, r2
 8002526:	10db      	asrs	r3, r3, #3
 8002528:	4a21      	ldr	r2, [pc, #132]	@ (80025b0 <DMA_Set_Trigger+0x138>)
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	461a      	mov	r2, r3
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <DMA_Set_Trigger+0x13c>)
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	213f      	movs	r1, #63	@ 0x3f
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	431a      	orrs	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e01b      	b.n	8002582 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4a21      	ldr	r2, [pc, #132]	@ (80025d4 <DMA_Set_Trigger+0x15c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d917      	bls.n	8002582 <DMA_Set_Trigger+0x10a>
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <DMA_Set_Trigger+0x160>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d813      	bhi.n	8002582 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4b1f      	ldr	r3, [pc, #124]	@ (80025dc <DMA_Set_Trigger+0x164>)
 800255e:	4413      	add	r3, r2
 8002560:	10db      	asrs	r3, r3, #3
 8002562:	4a13      	ldr	r2, [pc, #76]	@ (80025b0 <DMA_Set_Trigger+0x138>)
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	461a      	mov	r2, r3
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <DMA_Set_Trigger+0x14c>)
 800256c:	5c9b      	ldrb	r3, [r3, r2]
 800256e:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	213f      	movs	r1, #63	@ 0x3f
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	601a      	str	r2, [r3, #0]
    }
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40026000 	.word	0x40026000
 80025a0:	40026400 	.word	0x40026400
 80025a4:	4002600f 	.word	0x4002600f
 80025a8:	40026058 	.word	0x40026058
 80025ac:	bffd9ff0 	.word	0xbffd9ff0
 80025b0:	aaaaaaab 	.word	0xaaaaaaab
 80025b4:	08004bb0 	.word	0x08004bb0
 80025b8:	4002606f 	.word	0x4002606f
 80025bc:	400260b8 	.word	0x400260b8
 80025c0:	bffd9f90 	.word	0xbffd9f90
 80025c4:	08004bb4 	.word	0x08004bb4
 80025c8:	4002640f 	.word	0x4002640f
 80025cc:	40026458 	.word	0x40026458
 80025d0:	bffd9bf0 	.word	0xbffd9bf0
 80025d4:	4002646f 	.word	0x4002646f
 80025d8:	400264b8 	.word	0x400264b8
 80025dc:	bffd9b90 	.word	0xbffd9b90

080025e0 <DMA_Memory_To_Memory_Transfer>:
 */
void DMA_Memory_To_Memory_Transfer(uint32_t *source,
                          uint8_t source_data_size, uint8_t dest_data_size,
                          uint32_t *destination, bool source_increment,
                          bool destination_increment, uint16_t length)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	72fb      	strb	r3, [r7, #11]
 80025ee:	4613      	mov	r3, r2
 80025f0:	72bb      	strb	r3, [r7, #10]
    // Enable DMA2 clock
    RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80025f2:	4b5a      	ldr	r3, [pc, #360]	@ (800275c <DMA_Memory_To_Memory_Transfer+0x17c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a59      	ldr	r2, [pc, #356]	@ (800275c <DMA_Memory_To_Memory_Transfer+0x17c>)
 80025f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30

    // Clear the channel selection and set the transfer direction to memory-to-memory
    DMA2_Stream0->CR &= (DMA_SxCR_CHSEL);
 80025fe:	4b58      	ldr	r3, [pc, #352]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a57      	ldr	r2, [pc, #348]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002604:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8002608:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= DMA_Configuration.Transfer_Direction.Memory_to_memory;
 800260a:	4b55      	ldr	r3, [pc, #340]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2180      	movs	r1, #128	@ 0x80
 8002610:	4a53      	ldr	r2, [pc, #332]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002612:	430b      	orrs	r3, r1
 8002614:	6013      	str	r3, [r2, #0]

    // Set the transfer complete interrupt and priority level
    DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 8002616:	4b52      	ldr	r3, [pc, #328]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a51      	ldr	r2, [pc, #324]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800261c:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	6013      	str	r3, [r2, #0]

    // Set the peripheral data size based on the source data size
    if(source_data_size == 32)
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	2b20      	cmp	r3, #32
 800262a:	d106      	bne.n	800263a <DMA_Memory_To_Memory_Transfer+0x5a>
    {
        DMA2_Stream0->CR |= DMA_SxCR_PSIZE;
 800262c:	4b4c      	ldr	r3, [pc, #304]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a4b      	ldr	r2, [pc, #300]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002632:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	e015      	b.n	8002666 <DMA_Memory_To_Memory_Transfer+0x86>
    }
    else if(source_data_size == 16)
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	2b10      	cmp	r3, #16
 800263e:	d10c      	bne.n	800265a <DMA_Memory_To_Memory_Transfer+0x7a>
    {
        DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8002640:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a46      	ldr	r2, [pc, #280]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002646:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800264a:	6013      	str	r3, [r2, #0]
        DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 800264c:	4b44      	ldr	r3, [pc, #272]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a43      	ldr	r2, [pc, #268]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002652:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e005      	b.n	8002666 <DMA_Memory_To_Memory_Transfer+0x86>
    }
    else
    {
        DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 800265a:	4b41      	ldr	r3, [pc, #260]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a40      	ldr	r2, [pc, #256]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002660:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002664:	6013      	str	r3, [r2, #0]
    }

    // Set the memory data size based on the destination data size
    if(dest_data_size == 32)
 8002666:	7abb      	ldrb	r3, [r7, #10]
 8002668:	2b20      	cmp	r3, #32
 800266a:	d106      	bne.n	800267a <DMA_Memory_To_Memory_Transfer+0x9a>
    {
        DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 800266c:	4b3c      	ldr	r3, [pc, #240]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3b      	ldr	r2, [pc, #236]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002672:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e015      	b.n	80026a6 <DMA_Memory_To_Memory_Transfer+0xc6>
    }
    else if(dest_data_size == 16)
 800267a:	7abb      	ldrb	r3, [r7, #10]
 800267c:	2b10      	cmp	r3, #16
 800267e:	d10c      	bne.n	800269a <DMA_Memory_To_Memory_Transfer+0xba>
    {
        DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8002680:	4b37      	ldr	r3, [pc, #220]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a36      	ldr	r2, [pc, #216]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002686:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800268a:	6013      	str	r3, [r2, #0]
        DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a33      	ldr	r2, [pc, #204]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002692:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e005      	b.n	80026a6 <DMA_Memory_To_Memory_Transfer+0xc6>
    }
    else
    {
        DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 800269a:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a30      	ldr	r2, [pc, #192]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026a0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80026a4:	6013      	str	r3, [r2, #0]
    }

    // Configure source address increment mode
    if(source_increment)
 80026a6:	7e3b      	ldrb	r3, [r7, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <DMA_Memory_To_Memory_Transfer+0xda>
    {
        DMA2_Stream0->CR |= DMA_SxCR_PINC;
 80026ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e005      	b.n	80026c6 <DMA_Memory_To_Memory_Transfer+0xe6>
    }
    else
    {
        DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 80026ba:	4b29      	ldr	r3, [pc, #164]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a28      	ldr	r2, [pc, #160]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026c4:	6013      	str	r3, [r2, #0]
    }

    // Configure destination address increment mode
    if(destination_increment)
 80026c6:	7f3b      	ldrb	r3, [r7, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <DMA_Memory_To_Memory_Transfer+0xfa>
    {
        DMA2_Stream0->CR |= DMA_SxCR_MINC;
 80026cc:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a23      	ldr	r2, [pc, #140]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e005      	b.n	80026e6 <DMA_Memory_To_Memory_Transfer+0x106>
    }
    else
    {
        DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 80026da:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a20      	ldr	r2, [pc, #128]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026e4:	6013      	str	r3, [r2, #0]
    }

    // Set the peripheral address (source)
    DMA2_Stream0->PAR = (uint32_t)(source);
 80026e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6093      	str	r3, [r2, #8]

    // Set the memory address (destination)
    DMA2_Stream0->M0AR = (uint32_t)(destination);
 80026ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60d3      	str	r3, [r2, #12]

    // Set the number of data items to transfer
    DMA2_Stream0->NDTR = (uint16_t)length;
 80026f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026f4:	8c3b      	ldrh	r3, [r7, #32]
 80026f6:	6053      	str	r3, [r2, #4]

    // Enable the DMA stream
    DMA2_Stream0->CR |= DMA_SxCR_EN;
 80026f8:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a18      	ldr	r2, [pc, #96]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

    // Wait for the transfer to complete
    while((DMA2->LISR & (DMA_LISR_TCIF0_Msk)) == 0) {}
 8002704:	bf00      	nop
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <DMA_Memory_To_Memory_Transfer+0x184>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f9      	beq.n	8002706 <DMA_Memory_To_Memory_Transfer+0x126>

    // Clear the transfer complete flag
    DMA2->LIFCR |= DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;
 8002712:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <DMA_Memory_To_Memory_Transfer+0x184>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <DMA_Memory_To_Memory_Transfer+0x184>)
 8002718:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800271c:	6093      	str	r3, [r2, #8]

    // Disable the DMA stream

    DMA2_Stream0->CR = 0;
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    DMA2_Stream0->FCR = 0;
 8002724:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
    DMA2_Stream0->M0AR = 0;
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
    DMA2_Stream0->M1AR = 0;
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
    DMA2_Stream0->NDTR= 0;
 8002736:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
    DMA2_Stream0->PAR = 0;
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]

    DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a06      	ldr	r2, [pc, #24]	@ (8002760 <DMA_Memory_To_Memory_Transfer+0x180>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40026410 	.word	0x40026410
 8002764:	40026400 	.word	0x40026400

08002768 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a25      	ldr	r2, [pc, #148]	@ (8002808 <GPIO_Clock_Enable+0xa0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d106      	bne.n	8002786 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	4a23      	ldr	r2, [pc, #140]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6313      	str	r3, [r2, #48]	@ 0x30
 8002784:	e039      	b.n	80027fa <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a21      	ldr	r2, [pc, #132]	@ (8002810 <GPIO_Clock_Enable+0xa8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d106      	bne.n	800279c <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 800278e:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a1e      	ldr	r2, [pc, #120]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	e02e      	b.n	80027fa <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <GPIO_Clock_Enable+0xac>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d106      	bne.n	80027b2 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	4a18      	ldr	r2, [pc, #96]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b0:	e023      	b.n	80027fa <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a18      	ldr	r2, [pc, #96]	@ (8002818 <GPIO_Clock_Enable+0xb0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d106      	bne.n	80027c8 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80027ba:	4b14      	ldr	r3, [pc, #80]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	e018      	b.n	80027fa <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a14      	ldr	r2, [pc, #80]	@ (800281c <GPIO_Clock_Enable+0xb4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d106      	bne.n	80027de <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80027d0:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	6313      	str	r3, [r2, #48]	@ 0x30
 80027dc:	e00d      	b.n	80027fa <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <GPIO_Clock_Enable+0xb8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d106      	bne.n	80027f4 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 80027e6:	4b09      	ldr	r3, [pc, #36]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a08      	ldr	r2, [pc, #32]	@ (800280c <GPIO_Clock_Enable+0xa4>)
 80027ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	e002      	b.n	80027fa <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	e000      	b.n	80027fc <GPIO_Clock_Enable+0x94>
	}

	return 1;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40020000 	.word	0x40020000
 800280c:	40023800 	.word	0x40023800
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021000 	.word	0x40021000
 8002820:	40021c00 	.word	0x40021c00

08002824 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	70fb      	strb	r3, [r7, #3]
 8002836:	460b      	mov	r3, r1
 8002838:	70bb      	strb	r3, [r7, #2]
 800283a:	4613      	mov	r3, r2
 800283c:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ff92 	bl	8002768 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	78b9      	ldrb	r1, [r7, #2]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	0052      	lsls	r2, r2, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8002858:	2202      	movs	r2, #2
 800285a:	787b      	ldrb	r3, [r7, #1]
 800285c:	4293      	cmp	r3, r2
 800285e:	d008      	beq.n	8002872 <GPIO_Pin_Init+0x4e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	7879      	ldrb	r1, [r7, #1]
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	fa01 f202 	lsl.w	r2, r1, r2
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 8002872:	2204      	movs	r2, #4
 8002874:	7c3b      	ldrb	r3, [r7, #16]
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <GPIO_Pin_Init+0x6a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	7c39      	ldrb	r1, [r7, #16]
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	0052      	lsls	r2, r2, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 800288e:	2204      	movs	r2, #4
 8002890:	7d3b      	ldrb	r3, [r7, #20]
 8002892:	4293      	cmp	r3, r2
 8002894:	d009      	beq.n	80028aa <GPIO_Pin_Init+0x86>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	7d39      	ldrb	r1, [r7, #20]
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	0052      	lsls	r2, r2, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	2b07      	cmp	r3, #7
 80028ae:	d80a      	bhi.n	80028c6 <GPIO_Pin_Init+0xa2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	7e39      	ldrb	r1, [r7, #24]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	0092      	lsls	r2, r2, #2
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80028c4:	e00a      	b.n	80028dc <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	7e39      	ldrb	r1, [r7, #24]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	3a08      	subs	r2, #8
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	fa01 f202 	lsl.w	r2, r1, r2
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <BSP_Init>:

#include "main.h"
#include "GPIO.h"

void BSP_Init(void)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af04      	add	r7, sp, #16



	GPIO_Pin_Init(GPIOD, 12,
			GPIO_Configuration.Mode.General_Purpose_Output,
 80028ea:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 80028ec:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 80028ee:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.No_Pull_Up_Down,
 80028f0:	2200      	movs	r2, #0
			GPIO_Configuration.Alternate_Functions.None);
 80028f2:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12,
 80028f4:	9102      	str	r1, [sp, #8]
 80028f6:	9201      	str	r2, [sp, #4]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	4623      	mov	r3, r4
 80028fc:	4602      	mov	r2, r0
 80028fe:	210c      	movs	r1, #12
 8002900:	4818      	ldr	r0, [pc, #96]	@ (8002964 <BSP_Init+0x80>)
 8002902:	f7ff ff8f 	bl	8002824 <GPIO_Pin_Init>

	GPIO_Pin_Init(GPIOD, 13,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8002906:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8002908:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 800290a:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.No_Pull_Up_Down,
 800290c:	2200      	movs	r2, #0
			GPIO_Configuration.Alternate_Functions.None);
 800290e:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 13,
 8002910:	9102      	str	r1, [sp, #8]
 8002912:	9201      	str	r2, [sp, #4]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4623      	mov	r3, r4
 8002918:	4602      	mov	r2, r0
 800291a:	210d      	movs	r1, #13
 800291c:	4811      	ldr	r0, [pc, #68]	@ (8002964 <BSP_Init+0x80>)
 800291e:	f7ff ff81 	bl	8002824 <GPIO_Pin_Init>

	GPIO_Pin_Init(GPIOD, 14,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8002922:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8002924:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8002926:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.No_Pull_Up_Down,
 8002928:	2200      	movs	r2, #0
			GPIO_Configuration.Alternate_Functions.None);
 800292a:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 14,
 800292c:	9102      	str	r1, [sp, #8]
 800292e:	9201      	str	r2, [sp, #4]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4623      	mov	r3, r4
 8002934:	4602      	mov	r2, r0
 8002936:	210e      	movs	r1, #14
 8002938:	480a      	ldr	r0, [pc, #40]	@ (8002964 <BSP_Init+0x80>)
 800293a:	f7ff ff73 	bl	8002824 <GPIO_Pin_Init>

	GPIO_Pin_Init(GPIOD, 15,
			GPIO_Configuration.Mode.General_Purpose_Output,
 800293e:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8002940:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8002942:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.No_Pull_Up_Down,
 8002944:	2200      	movs	r2, #0
			GPIO_Configuration.Alternate_Functions.None);
 8002946:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 15,
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9201      	str	r2, [sp, #4]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4623      	mov	r3, r4
 8002950:	4602      	mov	r2, r0
 8002952:	210f      	movs	r1, #15
 8002954:	4803      	ldr	r0, [pc, #12]	@ (8002964 <BSP_Init+0x80>)
 8002956:	f7ff ff65 	bl	8002824 <GPIO_Pin_Init>
}
 800295a:	bf00      	nop
 800295c:	3704      	adds	r7, #4
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	40020c00 	.word	0x40020c00

08002968 <__NVIC_EnableIRQ>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	@ (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	@ (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a08:	d301      	bcc.n	8002a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00f      	b.n	8002a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <SysTick_Config+0x40>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a16:	210f      	movs	r1, #15
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f7ff ffc2 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <SysTick_Config+0x40>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a26:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <SysTick_Config+0x40>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010

08002a3c <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a52:	43d2      	mvns	r2, r2
 8002a54:	401a      	ands	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	615a      	str	r2, [r3, #20]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2101      	movs	r1, #1
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	615a      	str	r2, [r3, #20]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	uint8_t pll_m = 8;
 8002a96:	2308      	movs	r3, #8
 8002a98:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8002a9a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a9e:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8002aa4:	2307      	movs	r3, #7
 8002aa6:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8002aae:	4b3b      	ldr	r3, [pc, #236]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a3a      	ldr	r2, [pc, #232]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8002aba:	bf00      	nop
 8002abc:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f9      	beq.n	8002abc <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8002ac8:	4b34      	ldr	r3, [pc, #208]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	4a33      	ldr	r2, [pc, #204]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8002ad4:	4b32      	ldr	r3, [pc, #200]	@ (8002ba0 <MCU_Clock_Setup+0x110>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a31      	ldr	r2, [pc, #196]	@ (8002ba0 <MCU_Clock_Setup+0x110>)
 8002ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ade:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8002ae0:	4b30      	ldr	r3, [pc, #192]	@ (8002ba4 <MCU_Clock_Setup+0x114>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ba4 <MCU_Clock_Setup+0x114>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aea:	f043 0305 	orr.w	r3, r3, #5
 8002aee:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8002af0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	78ba      	ldrb	r2, [r7, #2]
 8002af6:	0611      	lsls	r1, r2, #24
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	0412      	lsls	r2, r2, #16
 8002afc:	4311      	orrs	r1, r2
 8002afe:	88ba      	ldrh	r2, [r7, #4]
 8002b00:	0192      	lsls	r2, r2, #6
 8002b02:	4311      	orrs	r1, r2
 8002b04:	79fa      	ldrb	r2, [r7, #7]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4a24      	ldr	r2, [pc, #144]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002b10:	4b22      	ldr	r3, [pc, #136]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a21      	ldr	r2, [pc, #132]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b1a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a1c      	ldr	r2, [pc, #112]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b2a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002b2e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a19      	ldr	r2, [pc, #100]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b3a:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a16      	ldr	r2, [pc, #88]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b46:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8002b48:	bf00      	nop
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f9      	beq.n	8002b4a <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8002b56:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4a10      	ldr	r2, [pc, #64]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8002b62:	bf00      	nop
 8002b64:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d1f9      	bne.n	8002b64 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 8002b70:	f000 f928 	bl	8002dc4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8002b74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <MCU_Clock_Setup+0x118>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bac <MCU_Clock_Setup+0x11c>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff38 	bl	80029f8 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002b88:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	4a03      	ldr	r2, [pc, #12]	@ (8002b9c <MCU_Clock_Setup+0x10c>)
 8002b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b92:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	40023c00 	.word	0x40023c00
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	18618619 	.word	0x18618619

08002bb0 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <Delay_Config+0x2c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <Delay_Config+0x2c>)
 8002bbc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002bc0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <Delay_Config+0x2c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <Delay_Config+0x2c>)
 8002bca:	2205      	movs	r2, #5
 8002bcc:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <TIM6_DAC_IRQHandler>:

uint32_t tick = 0;
int32_t button1 = 0;

void TIM6_DAC_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	TIM6 -> SR &= ~TIM_SR_UIF;
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <TIM6_DAC_IRQHandler+0x38>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <TIM6_DAC_IRQHandler+0x38>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6113      	str	r3, [r2, #16]
	tick += 1;
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <TIM6_DAC_IRQHandler+0x3c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <TIM6_DAC_IRQHandler+0x3c>)
 8002bf8:	6013      	str	r3, [r2, #0]

	button1 = GPIOA->IDR & GPIO_IDR_ID0_Msk;
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <TIM6_DAC_IRQHandler+0x40>)
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <TIM6_DAC_IRQHandler+0x44>)
 8002c04:	6013      	str	r3, [r2, #0]

	printConsole("%d,\r\n",button1);
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <TIM6_DAC_IRQHandler+0x44>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4806      	ldr	r0, [pc, #24]	@ (8002c28 <TIM6_DAC_IRQHandler+0x48>)
 8002c0e:	f7fe f833 	bl	8000c78 <printConsole>
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40001000 	.word	0x40001000
 8002c1c:	200002f4 	.word	0x200002f4
 8002c20:	40020000 	.word	0x40020000
 8002c24:	200002f8 	.word	0x200002f8
 8002c28:	08004ba8 	.word	0x08004ba8

08002c2c <General_Timer_Update_Init>:

void General_Timer_Update_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8002c30:	4b16      	ldr	r3, [pc, #88]	@ (8002c8c <General_Timer_Update_Init+0x60>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	4a15      	ldr	r2, [pc, #84]	@ (8002c8c <General_Timer_Update_Init+0x60>)
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM6->PSC = 84-1;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c3e:	2253      	movs	r2, #83	@ 0x53
 8002c40:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 4000-1;
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c44:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8002c48:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6 -> EGR |= TIM_EGR_UG;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_URS;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6013      	str	r3, [r2, #0]
	TIM6->DIER |=  TIM_DIER_UIE;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <General_Timer_Update_Init+0x64>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM6_DAC_IRQn,1);
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2036      	movs	r0, #54	@ 0x36
 8002c7e:	f7ff fe91 	bl	80029a4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c82:	2036      	movs	r0, #54	@ 0x36
 8002c84:	f7ff fe70 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40001000 	.word	0x40001000

08002c94 <main>:


int main(void)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8002c9a:	f7ff fef9 	bl	8002a90 <MCU_Clock_Setup>
	Delay_Config();
 8002c9e:	f7ff ff87 	bl	8002bb0 <Delay_Config>
	Console_Init(9600); //921600
 8002ca2:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8002ca6:	f7fd ffbf 	bl	8000c28 <Console_Init>
	General_Timer_Update_Init();
 8002caa:	f7ff ffbf 	bl	8002c2c <General_Timer_Update_Init>
	BSP_Init();
 8002cae:	f7ff fe19 	bl	80028e4 <BSP_Init>

	GPIO_Pin_Init(GPIOA, 0,
			GPIO_Configuration.Mode.Input,
 8002cb2:	2000      	movs	r0, #0
			GPIO_Configuration.Output_Type.None,
 8002cb4:	2402      	movs	r4, #2
			GPIO_Configuration.Speed.None,
 8002cb6:	2304      	movs	r3, #4
			GPIO_Configuration.Pull.None,
 8002cb8:	2204      	movs	r2, #4
			GPIO_Configuration.Alternate_Functions.None);
 8002cba:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOA, 0,
 8002cbc:	9102      	str	r1, [sp, #8]
 8002cbe:	9201      	str	r2, [sp, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4817      	ldr	r0, [pc, #92]	@ (8002d28 <main+0x94>)
 8002cca:	f7ff fdab 	bl	8002824 <GPIO_Pin_Init>


	for(;;)
	{

		if(tick % 2 == 0)
 8002cce:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <main+0x98>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <main+0x66>
		{
			GPIO_Pin_High(GPIOD, 12);
 8002cda:	210c      	movs	r1, #12
 8002cdc:	4814      	ldr	r0, [pc, #80]	@ (8002d30 <main+0x9c>)
 8002cde:	f7ff fec2 	bl	8002a66 <GPIO_Pin_High>
			GPIO_Pin_Low(GPIOD, 13);
 8002ce2:	210d      	movs	r1, #13
 8002ce4:	4812      	ldr	r0, [pc, #72]	@ (8002d30 <main+0x9c>)
 8002ce6:	f7ff fea9 	bl	8002a3c <GPIO_Pin_Low>
			GPIO_Pin_High(GPIOD, 14);
 8002cea:	210e      	movs	r1, #14
 8002cec:	4810      	ldr	r0, [pc, #64]	@ (8002d30 <main+0x9c>)
 8002cee:	f7ff feba 	bl	8002a66 <GPIO_Pin_High>
			GPIO_Pin_Low(GPIOD, 15);
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	480e      	ldr	r0, [pc, #56]	@ (8002d30 <main+0x9c>)
 8002cf6:	f7ff fea1 	bl	8002a3c <GPIO_Pin_Low>
		}
		if(tick % 2 == 1)
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <main+0x98>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0e3      	beq.n	8002cce <main+0x3a>
		{
			GPIO_Pin_High(GPIOD, 13);
 8002d06:	210d      	movs	r1, #13
 8002d08:	4809      	ldr	r0, [pc, #36]	@ (8002d30 <main+0x9c>)
 8002d0a:	f7ff feac 	bl	8002a66 <GPIO_Pin_High>
			GPIO_Pin_High(GPIOD, 15);
 8002d0e:	210f      	movs	r1, #15
 8002d10:	4807      	ldr	r0, [pc, #28]	@ (8002d30 <main+0x9c>)
 8002d12:	f7ff fea8 	bl	8002a66 <GPIO_Pin_High>
			GPIO_Pin_Low(GPIOD, 12);
 8002d16:	210c      	movs	r1, #12
 8002d18:	4805      	ldr	r0, [pc, #20]	@ (8002d30 <main+0x9c>)
 8002d1a:	f7ff fe8f 	bl	8002a3c <GPIO_Pin_Low>
			GPIO_Pin_Low(GPIOD, 14);
 8002d1e:	210e      	movs	r1, #14
 8002d20:	4803      	ldr	r0, [pc, #12]	@ (8002d30 <main+0x9c>)
 8002d22:	f7ff fe8b 	bl	8002a3c <GPIO_Pin_Low>
		if(tick % 2 == 0)
 8002d26:	e7d2      	b.n	8002cce <main+0x3a>
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	200002f4 	.word	0x200002f4
 8002d30:	40020c00 	.word	0x40020c00

08002d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d3c:	4a14      	ldr	r2, [pc, #80]	@ (8002d90 <_sbrk+0x5c>)
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <_sbrk+0x60>)
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <_sbrk+0x64>)
 8002d52:	4a12      	ldr	r2, [pc, #72]	@ (8002d9c <_sbrk+0x68>)
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d56:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d207      	bcs.n	8002d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d64:	f001 fa1e 	bl	80041a4 <__errno>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	e009      	b.n	8002d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d7a:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <_sbrk+0x64>)
 8002d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20020000 	.word	0x20020000
 8002d94:	00000400 	.word	0x00000400
 8002d98:	200002fc 	.word	0x200002fc
 8002d9c:	200006f0 	.word	0x200006f0

08002da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <SystemInit+0x20>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	4a05      	ldr	r2, [pc, #20]	@ (8002dc0 <SystemInit+0x20>)
 8002dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	2302      	movs	r3, #2
 8002ddc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002dde:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d011      	beq.n	8002e12 <SystemCoreClockUpdate+0x4e>
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d844      	bhi.n	8002e7e <SystemCoreClockUpdate+0xba>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <SystemCoreClockUpdate+0x3e>
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d004      	beq.n	8002e0a <SystemCoreClockUpdate+0x46>
 8002e00:	e03d      	b.n	8002e7e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002e02:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e04:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb8 <SystemCoreClockUpdate+0xf4>)
 8002e06:	601a      	str	r2, [r3, #0]
      break;
 8002e08:	e03d      	b.n	8002e86 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ebc <SystemCoreClockUpdate+0xf8>)
 8002e0e:	601a      	str	r2, [r3, #0]
      break;
 8002e10:	e039      	b.n	8002e86 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002e12:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0d9b      	lsrs	r3, r3, #22
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e1e:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e26:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e2e:	4a23      	ldr	r2, [pc, #140]	@ (8002ebc <SystemCoreClockUpdate+0xf8>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	0992      	lsrs	r2, r2, #6
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e00b      	b.n	8002e60 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e48:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb8 <SystemCoreClockUpdate+0xf4>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e52:	6852      	ldr	r2, [r2, #4]
 8002e54:	0992      	lsrs	r2, r2, #6
 8002e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002e60:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e7a:	6013      	str	r3, [r2, #0]
      break;
 8002e7c:	e003      	b.n	8002e86 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e80:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <SystemCoreClockUpdate+0xf4>)
 8002e82:	601a      	str	r2, [r3, #0]
      break;
 8002e84:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec0 <SystemCoreClockUpdate+0xfc>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	017d7840 	.word	0x017d7840
 8002ec0:	08004bb8 	.word	0x08004bb8

08002ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec4:	480d      	ldr	r0, [pc, #52]	@ (8002efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ec6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ec8:	f7ff ff6a 	bl	8002da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f10 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ef2:	f001 f95d 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ef6:	f7ff fecd 	bl	8002c94 <main>

08002efa <LoopForever>:

LoopForever:
  b LoopForever
 8002efa:	e7fe      	b.n	8002efa <LoopForever>
  ldr   r0, =_estack
 8002efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002f08:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8002f0c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002f10:	200006ec 	.word	0x200006ec

08002f14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC_IRQHandler>

08002f16 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	ed87 0b02 	vstr	d0, [r7, #8]
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8002f24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f28:	f7fd fe28 	bl	8000b7c <__aeabi_d2lz>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	f7fd fb32 	bl	800059c <__aeabi_l2d>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f4c:	f7fd f99c 	bl	8000288 <__aeabi_dsub>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <Get_USART_Instance_Number>:
DMA_Config xUSART_TX[6];

int8_t usart_dma_instance_number;

static int8_t Get_USART_Instance_Number(USART_Config *config)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <Get_USART_Instance_Number+0x6c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <Get_USART_Instance_Number+0x16>
 8002f76:	2300      	movs	r3, #0
 8002f78:	e024      	b.n	8002fc4 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	@ (8002fd4 <Get_USART_Instance_Number+0x70>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <Get_USART_Instance_Number+0x24>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01d      	b.n	8002fc4 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <Get_USART_Instance_Number+0x74>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <Get_USART_Instance_Number+0x32>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e016      	b.n	8002fc4 <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a10      	ldr	r2, [pc, #64]	@ (8002fdc <Get_USART_Instance_Number+0x78>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <Get_USART_Instance_Number+0x40>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e00f      	b.n	8002fc4 <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <Get_USART_Instance_Number+0x7c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <Get_USART_Instance_Number+0x4e>
 8002fae:	2304      	movs	r3, #4
 8002fb0:	e008      	b.n	8002fc4 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe4 <Get_USART_Instance_Number+0x80>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <Get_USART_Instance_Number+0x5c>
 8002fbc:	2305      	movs	r3, #5
 8002fbe:	e001      	b.n	8002fc4 <Get_USART_Instance_Number+0x60>
	else {return -1;}
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40011000 	.word	0x40011000
 8002fd4:	40004400 	.word	0x40004400
 8002fd8:	40004800 	.word	0x40004800
 8002fdc:	40004c00 	.word	0x40004c00
 8002fe0:	40005000 	.word	0x40005000
 8002fe4:	40011400 	.word	0x40011400

08002fe8 <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003002:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 8003004:	2200      	movs	r2, #0
 8003006:	2300      	movs	r3, #0
 8003008:	4313      	orrs	r3, r2
 800300a:	b2da      	uxtb	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 8003010:	2300      	movs	r3, #0
 8003012:	b2da      	uxtb	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	739a      	strb	r2, [r3, #14]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <USART_Clock_Enable+0xac>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d106      	bne.n	8003044 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8003036:	4b27      	ldr	r3, [pc, #156]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	4a26      	ldr	r2, [pc, #152]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 800303c:	f043 0310 	orr.w	r3, r3, #16
 8003040:	6453      	str	r3, [r2, #68]	@ 0x44
 8003042:	e03e      	b.n	80030c2 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a23      	ldr	r2, [pc, #140]	@ (80030d8 <USART_Clock_Enable+0xb4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d106      	bne.n	800305c <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800304e:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	4a20      	ldr	r2, [pc, #128]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 8003054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003058:	6413      	str	r3, [r2, #64]	@ 0x40
 800305a:	e032      	b.n	80030c2 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <USART_Clock_Enable+0xb8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d106      	bne.n	8003074 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8003066:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	4a1a      	ldr	r2, [pc, #104]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003070:	6413      	str	r3, [r2, #64]	@ 0x40
 8003072:	e026      	b.n	80030c2 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	@ (80030e0 <USART_Clock_Enable+0xbc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d106      	bne.n	800308c <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800307e:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	4a14      	ldr	r2, [pc, #80]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 8003084:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003088:	6413      	str	r3, [r2, #64]	@ 0x40
 800308a:	e01a      	b.n	80030c2 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a14      	ldr	r2, [pc, #80]	@ (80030e4 <USART_Clock_Enable+0xc0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d106      	bne.n	80030a4 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 800309c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	e00e      	b.n	80030c2 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0f      	ldr	r2, [pc, #60]	@ (80030e8 <USART_Clock_Enable+0xc4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d106      	bne.n	80030bc <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <USART_Clock_Enable+0xb0>)
 80030b4:	f043 0320 	orr.w	r3, r3, #32
 80030b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ba:	e002      	b.n	80030c2 <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e000      	b.n	80030c4 <USART_Clock_Enable+0xa0>
	}
	return 1;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40004400 	.word	0x40004400
 80030dc:	40004800 	.word	0x40004800
 80030e0:	40004c00 	.word	0x40004c00
 80030e4:	40005000 	.word	0x40005000
 80030e8:	40011400 	.word	0x40011400

080030ec <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4aa0      	ldr	r2, [pc, #640]	@ (800337c <PIN_Setup+0x290>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	f040 810d 	bne.w	800331a <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7a1b      	ldrb	r3, [r3, #8]
 8003104:	2201      	movs	r2, #1
 8003106:	4293      	cmp	r3, r2
 8003108:	d00f      	beq.n	800312a <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7a1b      	ldrb	r3, [r3, #8]
 800310e:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003110:	4293      	cmp	r3, r2
 8003112:	d00a      	beq.n	800312a <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7a1b      	ldrb	r3, [r3, #8]
 8003118:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 800311a:	4293      	cmp	r3, r2
 800311c:	d005      	beq.n	800312a <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.LIN) )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7a1b      	ldrb	r3, [r3, #8]
 8003122:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003124:	4293      	cmp	r3, r2
 8003126:	f040 80be 	bne.w	80032a6 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7a5b      	ldrb	r3, [r3, #9]
 800312e:	2209      	movs	r2, #9
 8003130:	4293      	cmp	r3, r2
 8003132:	d10f      	bne.n	8003154 <PIN_Setup+0x68>
 8003134:	2009      	movs	r0, #9
 8003136:	2402      	movs	r4, #2
 8003138:	2500      	movs	r5, #0
 800313a:	2302      	movs	r3, #2
 800313c:	2200      	movs	r2, #0
 800313e:	2107      	movs	r1, #7
 8003140:	9102      	str	r1, [sp, #8]
 8003142:	9201      	str	r2, [sp, #4]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	462b      	mov	r3, r5
 8003148:	4622      	mov	r2, r4
 800314a:	4601      	mov	r1, r0
 800314c:	488c      	ldr	r0, [pc, #560]	@ (8003380 <PIN_Setup+0x294>)
 800314e:	f7ff fb69 	bl	8002824 <GPIO_Pin_Init>
 8003152:	e013      	b.n	800317c <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7a5b      	ldrb	r3, [r3, #9]
 8003158:	2206      	movs	r2, #6
 800315a:	4293      	cmp	r3, r2
 800315c:	d10e      	bne.n	800317c <PIN_Setup+0x90>
 800315e:	2006      	movs	r0, #6
 8003160:	2402      	movs	r4, #2
 8003162:	2500      	movs	r5, #0
 8003164:	2302      	movs	r3, #2
 8003166:	2200      	movs	r2, #0
 8003168:	2107      	movs	r1, #7
 800316a:	9102      	str	r1, [sp, #8]
 800316c:	9201      	str	r2, [sp, #4]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	462b      	mov	r3, r5
 8003172:	4622      	mov	r2, r4
 8003174:	4601      	mov	r1, r0
 8003176:	4883      	ldr	r0, [pc, #524]	@ (8003384 <PIN_Setup+0x298>)
 8003178:	f7ff fb54 	bl	8002824 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7a9b      	ldrb	r3, [r3, #10]
 8003180:	220a      	movs	r2, #10
 8003182:	4293      	cmp	r3, r2
 8003184:	d10f      	bne.n	80031a6 <PIN_Setup+0xba>
 8003186:	200a      	movs	r0, #10
 8003188:	2402      	movs	r4, #2
 800318a:	2500      	movs	r5, #0
 800318c:	2302      	movs	r3, #2
 800318e:	2200      	movs	r2, #0
 8003190:	2107      	movs	r1, #7
 8003192:	9102      	str	r1, [sp, #8]
 8003194:	9201      	str	r2, [sp, #4]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	462b      	mov	r3, r5
 800319a:	4622      	mov	r2, r4
 800319c:	4601      	mov	r1, r0
 800319e:	4878      	ldr	r0, [pc, #480]	@ (8003380 <PIN_Setup+0x294>)
 80031a0:	f7ff fb40 	bl	8002824 <GPIO_Pin_Init>
 80031a4:	e013      	b.n	80031ce <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7a9b      	ldrb	r3, [r3, #10]
 80031aa:	2207      	movs	r2, #7
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10e      	bne.n	80031ce <PIN_Setup+0xe2>
 80031b0:	2007      	movs	r0, #7
 80031b2:	2402      	movs	r4, #2
 80031b4:	2500      	movs	r5, #0
 80031b6:	2302      	movs	r3, #2
 80031b8:	2200      	movs	r2, #0
 80031ba:	2107      	movs	r1, #7
 80031bc:	9102      	str	r1, [sp, #8]
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	462b      	mov	r3, r5
 80031c4:	4622      	mov	r2, r4
 80031c6:	4601      	mov	r1, r0
 80031c8:	486e      	ldr	r0, [pc, #440]	@ (8003384 <PIN_Setup+0x298>)
 80031ca:	f7ff fb2b 	bl	8002824 <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7a1b      	ldrb	r3, [r3, #8]
 80031d2:	2202      	movs	r2, #2
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d113      	bne.n	8003200 <PIN_Setup+0x114>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7adb      	ldrb	r3, [r3, #11]
 80031dc:	2208      	movs	r2, #8
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10e      	bne.n	8003200 <PIN_Setup+0x114>
 80031e2:	2008      	movs	r0, #8
 80031e4:	2402      	movs	r4, #2
 80031e6:	2500      	movs	r5, #0
 80031e8:	2302      	movs	r3, #2
 80031ea:	2200      	movs	r2, #0
 80031ec:	2107      	movs	r1, #7
 80031ee:	9102      	str	r1, [sp, #8]
 80031f0:	9201      	str	r2, [sp, #4]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	462b      	mov	r3, r5
 80031f6:	4622      	mov	r2, r4
 80031f8:	4601      	mov	r1, r0
 80031fa:	4861      	ldr	r0, [pc, #388]	@ (8003380 <PIN_Setup+0x294>)
 80031fc:	f7ff fb12 	bl	8002824 <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7bdb      	ldrb	r3, [r3, #15]
 8003204:	2200      	movs	r2, #0
 8003206:	4293      	cmp	r3, r2
 8003208:	f000 83bb 	beq.w	8003982 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7bdb      	ldrb	r3, [r3, #15]
 8003210:	2201      	movs	r2, #1
 8003212:	4293      	cmp	r3, r2
 8003214:	d10e      	bne.n	8003234 <PIN_Setup+0x148>
 8003216:	200b      	movs	r0, #11
 8003218:	2402      	movs	r4, #2
 800321a:	2500      	movs	r5, #0
 800321c:	2302      	movs	r3, #2
 800321e:	2200      	movs	r2, #0
 8003220:	2107      	movs	r1, #7
 8003222:	9102      	str	r1, [sp, #8]
 8003224:	9201      	str	r2, [sp, #4]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	462b      	mov	r3, r5
 800322a:	4622      	mov	r2, r4
 800322c:	4601      	mov	r1, r0
 800322e:	4854      	ldr	r0, [pc, #336]	@ (8003380 <PIN_Setup+0x294>)
 8003230:	f7ff faf8 	bl	8002824 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7bdb      	ldrb	r3, [r3, #15]
 8003238:	2202      	movs	r2, #2
 800323a:	4293      	cmp	r3, r2
 800323c:	d10e      	bne.n	800325c <PIN_Setup+0x170>
 800323e:	200c      	movs	r0, #12
 8003240:	2402      	movs	r4, #2
 8003242:	2500      	movs	r5, #0
 8003244:	2302      	movs	r3, #2
 8003246:	2200      	movs	r2, #0
 8003248:	2107      	movs	r1, #7
 800324a:	9102      	str	r1, [sp, #8]
 800324c:	9201      	str	r2, [sp, #4]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	462b      	mov	r3, r5
 8003252:	4622      	mov	r2, r4
 8003254:	4601      	mov	r1, r0
 8003256:	484a      	ldr	r0, [pc, #296]	@ (8003380 <PIN_Setup+0x294>)
 8003258:	f7ff fae4 	bl	8002824 <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7bdb      	ldrb	r3, [r3, #15]
 8003260:	2203      	movs	r2, #3
 8003262:	4293      	cmp	r3, r2
 8003264:	f040 838d 	bne.w	8003982 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003268:	200b      	movs	r0, #11
 800326a:	2402      	movs	r4, #2
 800326c:	2500      	movs	r5, #0
 800326e:	2302      	movs	r3, #2
 8003270:	2200      	movs	r2, #0
 8003272:	2107      	movs	r1, #7
 8003274:	9102      	str	r1, [sp, #8]
 8003276:	9201      	str	r2, [sp, #4]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	462b      	mov	r3, r5
 800327c:	4622      	mov	r2, r4
 800327e:	4601      	mov	r1, r0
 8003280:	483f      	ldr	r0, [pc, #252]	@ (8003380 <PIN_Setup+0x294>)
 8003282:	f7ff facf 	bl	8002824 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003286:	200c      	movs	r0, #12
 8003288:	2402      	movs	r4, #2
 800328a:	2500      	movs	r5, #0
 800328c:	2302      	movs	r3, #2
 800328e:	2200      	movs	r2, #0
 8003290:	2107      	movs	r1, #7
 8003292:	9102      	str	r1, [sp, #8]
 8003294:	9201      	str	r2, [sp, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	462b      	mov	r3, r5
 800329a:	4622      	mov	r2, r4
 800329c:	4601      	mov	r1, r0
 800329e:	4838      	ldr	r0, [pc, #224]	@ (8003380 <PIN_Setup+0x294>)
 80032a0:	f7ff fac0 	bl	8002824 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80032a4:	e36d      	b.n	8003982 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7a1b      	ldrb	r3, [r3, #8]
 80032aa:	2206      	movs	r2, #6
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00a      	beq.n	80032c6 <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7a1b      	ldrb	r3, [r3, #8]
 80032b4:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d005      	beq.n	80032c6 <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7a1b      	ldrb	r3, [r3, #8]
 80032be:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 80032c0:	4293      	cmp	r3, r2
 80032c2:	f040 8363 	bne.w	800398c <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7a5b      	ldrb	r3, [r3, #9]
 80032ca:	2209      	movs	r2, #9
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10e      	bne.n	80032ee <PIN_Setup+0x202>
 80032d0:	2009      	movs	r0, #9
 80032d2:	2402      	movs	r4, #2
 80032d4:	2500      	movs	r5, #0
 80032d6:	2302      	movs	r3, #2
 80032d8:	2200      	movs	r2, #0
 80032da:	2107      	movs	r1, #7
 80032dc:	9102      	str	r1, [sp, #8]
 80032de:	9201      	str	r2, [sp, #4]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	462b      	mov	r3, r5
 80032e4:	4622      	mov	r2, r4
 80032e6:	4601      	mov	r1, r0
 80032e8:	4825      	ldr	r0, [pc, #148]	@ (8003380 <PIN_Setup+0x294>)
 80032ea:	f7ff fa9b 	bl	8002824 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7a1b      	ldrb	r3, [r3, #8]
 80032f2:	2207      	movs	r2, #7
 80032f4:	4293      	cmp	r3, r2
 80032f6:	f040 8349 	bne.w	800398c <PIN_Setup+0x8a0>
 80032fa:	2008      	movs	r0, #8
 80032fc:	2402      	movs	r4, #2
 80032fe:	2500      	movs	r5, #0
 8003300:	2302      	movs	r3, #2
 8003302:	2200      	movs	r2, #0
 8003304:	2107      	movs	r1, #7
 8003306:	9102      	str	r1, [sp, #8]
 8003308:	9201      	str	r2, [sp, #4]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	462b      	mov	r3, r5
 800330e:	4622      	mov	r2, r4
 8003310:	4601      	mov	r1, r0
 8003312:	481b      	ldr	r0, [pc, #108]	@ (8003380 <PIN_Setup+0x294>)
 8003314:	f7ff fa86 	bl	8002824 <GPIO_Pin_Init>
//
//		}
//	}


}
 8003318:	e338      	b.n	800398c <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <PIN_Setup+0x29c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	f040 817b 	bne.w	800361c <PIN_Setup+0x530>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7a1b      	ldrb	r3, [r3, #8]
 800332a:	2201      	movs	r2, #1
 800332c:	4293      	cmp	r3, r2
 800332e:	d00f      	beq.n	8003350 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7a1b      	ldrb	r3, [r3, #8]
 8003334:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003336:	4293      	cmp	r3, r2
 8003338:	d00a      	beq.n	8003350 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7a1b      	ldrb	r3, [r3, #8]
 800333e:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003340:	4293      	cmp	r3, r2
 8003342:	d005      	beq.n	8003350 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7a1b      	ldrb	r3, [r3, #8]
 8003348:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800334a:	4293      	cmp	r3, r2
 800334c:	f040 80f8 	bne.w	8003540 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7a5b      	ldrb	r3, [r3, #9]
 8003354:	2202      	movs	r2, #2
 8003356:	4293      	cmp	r3, r2
 8003358:	d118      	bne.n	800338c <PIN_Setup+0x2a0>
 800335a:	2002      	movs	r0, #2
 800335c:	2402      	movs	r4, #2
 800335e:	2500      	movs	r5, #0
 8003360:	2302      	movs	r3, #2
 8003362:	2200      	movs	r2, #0
 8003364:	2107      	movs	r1, #7
 8003366:	9102      	str	r1, [sp, #8]
 8003368:	9201      	str	r2, [sp, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	462b      	mov	r3, r5
 800336e:	4622      	mov	r2, r4
 8003370:	4601      	mov	r1, r0
 8003372:	4803      	ldr	r0, [pc, #12]	@ (8003380 <PIN_Setup+0x294>)
 8003374:	f7ff fa56 	bl	8002824 <GPIO_Pin_Init>
 8003378:	e01c      	b.n	80033b4 <PIN_Setup+0x2c8>
 800337a:	bf00      	nop
 800337c:	40011000 	.word	0x40011000
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400
 8003388:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7a5b      	ldrb	r3, [r3, #9]
 8003390:	2205      	movs	r2, #5
 8003392:	4293      	cmp	r3, r2
 8003394:	d10e      	bne.n	80033b4 <PIN_Setup+0x2c8>
 8003396:	2005      	movs	r0, #5
 8003398:	2402      	movs	r4, #2
 800339a:	2500      	movs	r5, #0
 800339c:	2302      	movs	r3, #2
 800339e:	2200      	movs	r2, #0
 80033a0:	2107      	movs	r1, #7
 80033a2:	9102      	str	r1, [sp, #8]
 80033a4:	9201      	str	r2, [sp, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	462b      	mov	r3, r5
 80033aa:	4622      	mov	r2, r4
 80033ac:	4601      	mov	r1, r0
 80033ae:	4899      	ldr	r0, [pc, #612]	@ (8003614 <PIN_Setup+0x528>)
 80033b0:	f7ff fa38 	bl	8002824 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7a9b      	ldrb	r3, [r3, #10]
 80033b8:	2203      	movs	r2, #3
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10f      	bne.n	80033de <PIN_Setup+0x2f2>
 80033be:	2003      	movs	r0, #3
 80033c0:	2402      	movs	r4, #2
 80033c2:	2500      	movs	r5, #0
 80033c4:	2302      	movs	r3, #2
 80033c6:	2200      	movs	r2, #0
 80033c8:	2107      	movs	r1, #7
 80033ca:	9102      	str	r1, [sp, #8]
 80033cc:	9201      	str	r2, [sp, #4]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	462b      	mov	r3, r5
 80033d2:	4622      	mov	r2, r4
 80033d4:	4601      	mov	r1, r0
 80033d6:	4890      	ldr	r0, [pc, #576]	@ (8003618 <PIN_Setup+0x52c>)
 80033d8:	f7ff fa24 	bl	8002824 <GPIO_Pin_Init>
 80033dc:	e013      	b.n	8003406 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7a9b      	ldrb	r3, [r3, #10]
 80033e2:	2206      	movs	r2, #6
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10e      	bne.n	8003406 <PIN_Setup+0x31a>
 80033e8:	2006      	movs	r0, #6
 80033ea:	2402      	movs	r4, #2
 80033ec:	2500      	movs	r5, #0
 80033ee:	2302      	movs	r3, #2
 80033f0:	2200      	movs	r2, #0
 80033f2:	2107      	movs	r1, #7
 80033f4:	9102      	str	r1, [sp, #8]
 80033f6:	9201      	str	r2, [sp, #4]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	462b      	mov	r3, r5
 80033fc:	4622      	mov	r2, r4
 80033fe:	4601      	mov	r1, r0
 8003400:	4884      	ldr	r0, [pc, #528]	@ (8003614 <PIN_Setup+0x528>)
 8003402:	f7ff fa0f 	bl	8002824 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7a1b      	ldrb	r3, [r3, #8]
 800340a:	2202      	movs	r2, #2
 800340c:	4293      	cmp	r3, r2
 800340e:	d128      	bne.n	8003462 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7adb      	ldrb	r3, [r3, #11]
 8003414:	2204      	movs	r2, #4
 8003416:	4293      	cmp	r3, r2
 8003418:	d10f      	bne.n	800343a <PIN_Setup+0x34e>
 800341a:	2004      	movs	r0, #4
 800341c:	2402      	movs	r4, #2
 800341e:	2500      	movs	r5, #0
 8003420:	2302      	movs	r3, #2
 8003422:	2200      	movs	r2, #0
 8003424:	2107      	movs	r1, #7
 8003426:	9102      	str	r1, [sp, #8]
 8003428:	9201      	str	r2, [sp, #4]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	462b      	mov	r3, r5
 800342e:	4622      	mov	r2, r4
 8003430:	4601      	mov	r1, r0
 8003432:	4879      	ldr	r0, [pc, #484]	@ (8003618 <PIN_Setup+0x52c>)
 8003434:	f7ff f9f6 	bl	8002824 <GPIO_Pin_Init>
 8003438:	e013      	b.n	8003462 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7adb      	ldrb	r3, [r3, #11]
 800343e:	2207      	movs	r2, #7
 8003440:	4293      	cmp	r3, r2
 8003442:	d10e      	bne.n	8003462 <PIN_Setup+0x376>
 8003444:	2007      	movs	r0, #7
 8003446:	2402      	movs	r4, #2
 8003448:	2500      	movs	r5, #0
 800344a:	2302      	movs	r3, #2
 800344c:	2200      	movs	r2, #0
 800344e:	2107      	movs	r1, #7
 8003450:	9102      	str	r1, [sp, #8]
 8003452:	9201      	str	r2, [sp, #4]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	462b      	mov	r3, r5
 8003458:	4622      	mov	r2, r4
 800345a:	4601      	mov	r1, r0
 800345c:	486e      	ldr	r0, [pc, #440]	@ (8003618 <PIN_Setup+0x52c>)
 800345e:	f7ff f9e1 	bl	8002824 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7bdb      	ldrb	r3, [r3, #15]
 8003466:	2200      	movs	r2, #0
 8003468:	4293      	cmp	r3, r2
 800346a:	d105      	bne.n	8003478 <PIN_Setup+0x38c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7bdb      	ldrb	r3, [r3, #15]
 8003470:	2203      	movs	r2, #3
 8003472:	4293      	cmp	r3, r2
 8003474:	f040 8287 	bne.w	8003986 <PIN_Setup+0x89a>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7bdb      	ldrb	r3, [r3, #15]
 800347c:	2201      	movs	r2, #1
 800347e:	4293      	cmp	r3, r2
 8003480:	d128      	bne.n	80034d4 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7adb      	ldrb	r3, [r3, #11]
 8003486:	2200      	movs	r2, #0
 8003488:	4293      	cmp	r3, r2
 800348a:	d10f      	bne.n	80034ac <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800348c:	2000      	movs	r0, #0
 800348e:	2402      	movs	r4, #2
 8003490:	2500      	movs	r5, #0
 8003492:	2302      	movs	r3, #2
 8003494:	2200      	movs	r2, #0
 8003496:	2107      	movs	r1, #7
 8003498:	9102      	str	r1, [sp, #8]
 800349a:	9201      	str	r2, [sp, #4]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	462b      	mov	r3, r5
 80034a0:	4622      	mov	r2, r4
 80034a2:	4601      	mov	r1, r0
 80034a4:	485c      	ldr	r0, [pc, #368]	@ (8003618 <PIN_Setup+0x52c>)
 80034a6:	f7ff f9bd 	bl	8002824 <GPIO_Pin_Init>
 80034aa:	e013      	b.n	80034d4 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7adb      	ldrb	r3, [r3, #11]
 80034b0:	2203      	movs	r2, #3
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10e      	bne.n	80034d4 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80034b6:	2003      	movs	r0, #3
 80034b8:	2402      	movs	r4, #2
 80034ba:	2500      	movs	r5, #0
 80034bc:	2302      	movs	r3, #2
 80034be:	2200      	movs	r2, #0
 80034c0:	2107      	movs	r1, #7
 80034c2:	9102      	str	r1, [sp, #8]
 80034c4:	9201      	str	r2, [sp, #4]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	462b      	mov	r3, r5
 80034ca:	4622      	mov	r2, r4
 80034cc:	4601      	mov	r1, r0
 80034ce:	4851      	ldr	r0, [pc, #324]	@ (8003614 <PIN_Setup+0x528>)
 80034d0:	f7ff f9a8 	bl	8002824 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7bdb      	ldrb	r3, [r3, #15]
 80034d8:	2202      	movs	r2, #2
 80034da:	4293      	cmp	r3, r2
 80034dc:	d005      	beq.n	80034ea <PIN_Setup+0x3fe>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7bdb      	ldrb	r3, [r3, #15]
 80034e2:	2203      	movs	r2, #3
 80034e4:	4293      	cmp	r3, r2
 80034e6:	f040 824e 	bne.w	8003986 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7adb      	ldrb	r3, [r3, #11]
 80034ee:	2201      	movs	r2, #1
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10f      	bne.n	8003514 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80034f4:	2001      	movs	r0, #1
 80034f6:	2402      	movs	r4, #2
 80034f8:	2500      	movs	r5, #0
 80034fa:	2302      	movs	r3, #2
 80034fc:	2200      	movs	r2, #0
 80034fe:	2107      	movs	r1, #7
 8003500:	9102      	str	r1, [sp, #8]
 8003502:	9201      	str	r2, [sp, #4]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	462b      	mov	r3, r5
 8003508:	4622      	mov	r2, r4
 800350a:	4601      	mov	r1, r0
 800350c:	4842      	ldr	r0, [pc, #264]	@ (8003618 <PIN_Setup+0x52c>)
 800350e:	f7ff f989 	bl	8002824 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003512:	e238      	b.n	8003986 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7adb      	ldrb	r3, [r3, #11]
 8003518:	2204      	movs	r2, #4
 800351a:	4293      	cmp	r3, r2
 800351c:	f040 8233 	bne.w	8003986 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003520:	2004      	movs	r0, #4
 8003522:	2402      	movs	r4, #2
 8003524:	2500      	movs	r5, #0
 8003526:	2302      	movs	r3, #2
 8003528:	2200      	movs	r2, #0
 800352a:	2107      	movs	r1, #7
 800352c:	9102      	str	r1, [sp, #8]
 800352e:	9201      	str	r2, [sp, #4]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	462b      	mov	r3, r5
 8003534:	4622      	mov	r2, r4
 8003536:	4601      	mov	r1, r0
 8003538:	4836      	ldr	r0, [pc, #216]	@ (8003614 <PIN_Setup+0x528>)
 800353a:	f7ff f973 	bl	8002824 <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800353e:	e222      	b.n	8003986 <PIN_Setup+0x89a>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7a1b      	ldrb	r3, [r3, #8]
 8003544:	2206      	movs	r2, #6
 8003546:	4293      	cmp	r3, r2
 8003548:	d00a      	beq.n	8003560 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7a1b      	ldrb	r3, [r3, #8]
 800354e:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d005      	beq.n	8003560 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7a1b      	ldrb	r3, [r3, #8]
 8003558:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800355a:	4293      	cmp	r3, r2
 800355c:	f040 8216 	bne.w	800398c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7a5b      	ldrb	r3, [r3, #9]
 8003564:	2202      	movs	r2, #2
 8003566:	4293      	cmp	r3, r2
 8003568:	d10f      	bne.n	800358a <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 800356a:	2002      	movs	r0, #2
 800356c:	2402      	movs	r4, #2
 800356e:	2500      	movs	r5, #0
 8003570:	2302      	movs	r3, #2
 8003572:	2200      	movs	r2, #0
 8003574:	2107      	movs	r1, #7
 8003576:	9102      	str	r1, [sp, #8]
 8003578:	9201      	str	r2, [sp, #4]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	462b      	mov	r3, r5
 800357e:	4622      	mov	r2, r4
 8003580:	4601      	mov	r1, r0
 8003582:	4825      	ldr	r0, [pc, #148]	@ (8003618 <PIN_Setup+0x52c>)
 8003584:	f7ff f94e 	bl	8002824 <GPIO_Pin_Init>
 8003588:	e013      	b.n	80035b2 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7a5b      	ldrb	r3, [r3, #9]
 800358e:	2205      	movs	r2, #5
 8003590:	4293      	cmp	r3, r2
 8003592:	d10e      	bne.n	80035b2 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003594:	2005      	movs	r0, #5
 8003596:	2402      	movs	r4, #2
 8003598:	2500      	movs	r5, #0
 800359a:	2302      	movs	r3, #2
 800359c:	2200      	movs	r2, #0
 800359e:	2107      	movs	r1, #7
 80035a0:	9102      	str	r1, [sp, #8]
 80035a2:	9201      	str	r2, [sp, #4]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	462b      	mov	r3, r5
 80035a8:	4622      	mov	r2, r4
 80035aa:	4601      	mov	r1, r0
 80035ac:	4819      	ldr	r0, [pc, #100]	@ (8003614 <PIN_Setup+0x528>)
 80035ae:	f7ff f939 	bl	8002824 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	7a1b      	ldrb	r3, [r3, #8]
 80035b6:	2207      	movs	r2, #7
 80035b8:	4293      	cmp	r3, r2
 80035ba:	f040 81e7 	bne.w	800398c <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7adb      	ldrb	r3, [r3, #11]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d10f      	bne.n	80035e8 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80035c8:	2004      	movs	r0, #4
 80035ca:	2402      	movs	r4, #2
 80035cc:	2500      	movs	r5, #0
 80035ce:	2302      	movs	r3, #2
 80035d0:	2200      	movs	r2, #0
 80035d2:	2107      	movs	r1, #7
 80035d4:	9102      	str	r1, [sp, #8]
 80035d6:	9201      	str	r2, [sp, #4]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	462b      	mov	r3, r5
 80035dc:	4622      	mov	r2, r4
 80035de:	4601      	mov	r1, r0
 80035e0:	480d      	ldr	r0, [pc, #52]	@ (8003618 <PIN_Setup+0x52c>)
 80035e2:	f7ff f91f 	bl	8002824 <GPIO_Pin_Init>
}
 80035e6:	e1d1      	b.n	800398c <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7adb      	ldrb	r3, [r3, #11]
 80035ec:	2207      	movs	r2, #7
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f040 81cc 	bne.w	800398c <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 80035f4:	2007      	movs	r0, #7
 80035f6:	2402      	movs	r4, #2
 80035f8:	2500      	movs	r5, #0
 80035fa:	2302      	movs	r3, #2
 80035fc:	2200      	movs	r2, #0
 80035fe:	2107      	movs	r1, #7
 8003600:	9102      	str	r1, [sp, #8]
 8003602:	9201      	str	r2, [sp, #4]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	462b      	mov	r3, r5
 8003608:	4622      	mov	r2, r4
 800360a:	4601      	mov	r1, r0
 800360c:	4802      	ldr	r0, [pc, #8]	@ (8003618 <PIN_Setup+0x52c>)
 800360e:	f7ff f909 	bl	8002824 <GPIO_Pin_Init>
}
 8003612:	e1bb      	b.n	800398c <PIN_Setup+0x8a0>
 8003614:	40020c00 	.word	0x40020c00
 8003618:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4aaa      	ldr	r2, [pc, #680]	@ (80038cc <PIN_Setup+0x7e0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	f040 81b2 	bne.w	800398c <PIN_Setup+0x8a0>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7a1b      	ldrb	r3, [r3, #8]
 800362c:	2201      	movs	r2, #1
 800362e:	4293      	cmp	r3, r2
 8003630:	d00f      	beq.n	8003652 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7a1b      	ldrb	r3, [r3, #8]
 8003636:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003638:	4293      	cmp	r3, r2
 800363a:	d00a      	beq.n	8003652 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7a1b      	ldrb	r3, [r3, #8]
 8003640:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003642:	4293      	cmp	r3, r2
 8003644:	d005      	beq.n	8003652 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7a1b      	ldrb	r3, [r3, #8]
 800364a:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 800364c:	4293      	cmp	r3, r2
 800364e:	f040 8119 	bne.w	8003884 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7a5b      	ldrb	r3, [r3, #9]
 8003656:	220b      	movs	r2, #11
 8003658:	4293      	cmp	r3, r2
 800365a:	d10f      	bne.n	800367c <PIN_Setup+0x590>
 800365c:	200b      	movs	r0, #11
 800365e:	2402      	movs	r4, #2
 8003660:	2500      	movs	r5, #0
 8003662:	2302      	movs	r3, #2
 8003664:	2200      	movs	r2, #0
 8003666:	2107      	movs	r1, #7
 8003668:	9102      	str	r1, [sp, #8]
 800366a:	9201      	str	r2, [sp, #4]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	462b      	mov	r3, r5
 8003670:	4622      	mov	r2, r4
 8003672:	4601      	mov	r1, r0
 8003674:	4896      	ldr	r0, [pc, #600]	@ (80038d0 <PIN_Setup+0x7e4>)
 8003676:	f7ff f8d5 	bl	8002824 <GPIO_Pin_Init>
 800367a:	e028      	b.n	80036ce <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7a5b      	ldrb	r3, [r3, #9]
 8003680:	220a      	movs	r2, #10
 8003682:	4293      	cmp	r3, r2
 8003684:	d10f      	bne.n	80036a6 <PIN_Setup+0x5ba>
 8003686:	200a      	movs	r0, #10
 8003688:	2402      	movs	r4, #2
 800368a:	2500      	movs	r5, #0
 800368c:	2302      	movs	r3, #2
 800368e:	2200      	movs	r2, #0
 8003690:	2107      	movs	r1, #7
 8003692:	9102      	str	r1, [sp, #8]
 8003694:	9201      	str	r2, [sp, #4]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	462b      	mov	r3, r5
 800369a:	4622      	mov	r2, r4
 800369c:	4601      	mov	r1, r0
 800369e:	488d      	ldr	r0, [pc, #564]	@ (80038d4 <PIN_Setup+0x7e8>)
 80036a0:	f7ff f8c0 	bl	8002824 <GPIO_Pin_Init>
 80036a4:	e013      	b.n	80036ce <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7a5b      	ldrb	r3, [r3, #9]
 80036aa:	2208      	movs	r2, #8
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10e      	bne.n	80036ce <PIN_Setup+0x5e2>
 80036b0:	2008      	movs	r0, #8
 80036b2:	2402      	movs	r4, #2
 80036b4:	2500      	movs	r5, #0
 80036b6:	2302      	movs	r3, #2
 80036b8:	2200      	movs	r2, #0
 80036ba:	2107      	movs	r1, #7
 80036bc:	9102      	str	r1, [sp, #8]
 80036be:	9201      	str	r2, [sp, #4]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	462b      	mov	r3, r5
 80036c4:	4622      	mov	r2, r4
 80036c6:	4601      	mov	r1, r0
 80036c8:	4882      	ldr	r0, [pc, #520]	@ (80038d4 <PIN_Setup+0x7e8>)
 80036ca:	f7ff f8ab 	bl	8002824 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7a9b      	ldrb	r3, [r3, #10]
 80036d2:	220a      	movs	r2, #10
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10f      	bne.n	80036f8 <PIN_Setup+0x60c>
 80036d8:	200a      	movs	r0, #10
 80036da:	2402      	movs	r4, #2
 80036dc:	2500      	movs	r5, #0
 80036de:	2302      	movs	r3, #2
 80036e0:	2200      	movs	r2, #0
 80036e2:	2107      	movs	r1, #7
 80036e4:	9102      	str	r1, [sp, #8]
 80036e6:	9201      	str	r2, [sp, #4]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	462b      	mov	r3, r5
 80036ec:	4622      	mov	r2, r4
 80036ee:	4601      	mov	r1, r0
 80036f0:	4877      	ldr	r0, [pc, #476]	@ (80038d0 <PIN_Setup+0x7e4>)
 80036f2:	f7ff f897 	bl	8002824 <GPIO_Pin_Init>
 80036f6:	e028      	b.n	800374a <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7a9b      	ldrb	r3, [r3, #10]
 80036fc:	220b      	movs	r2, #11
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10f      	bne.n	8003722 <PIN_Setup+0x636>
 8003702:	200b      	movs	r0, #11
 8003704:	2402      	movs	r4, #2
 8003706:	2500      	movs	r5, #0
 8003708:	2302      	movs	r3, #2
 800370a:	2200      	movs	r2, #0
 800370c:	2107      	movs	r1, #7
 800370e:	9102      	str	r1, [sp, #8]
 8003710:	9201      	str	r2, [sp, #4]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	462b      	mov	r3, r5
 8003716:	4622      	mov	r2, r4
 8003718:	4601      	mov	r1, r0
 800371a:	486e      	ldr	r0, [pc, #440]	@ (80038d4 <PIN_Setup+0x7e8>)
 800371c:	f7ff f882 	bl	8002824 <GPIO_Pin_Init>
 8003720:	e013      	b.n	800374a <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7a5b      	ldrb	r3, [r3, #9]
 8003726:	2208      	movs	r2, #8
 8003728:	4293      	cmp	r3, r2
 800372a:	d10e      	bne.n	800374a <PIN_Setup+0x65e>
 800372c:	2008      	movs	r0, #8
 800372e:	2402      	movs	r4, #2
 8003730:	2500      	movs	r5, #0
 8003732:	2302      	movs	r3, #2
 8003734:	2200      	movs	r2, #0
 8003736:	2107      	movs	r1, #7
 8003738:	9102      	str	r1, [sp, #8]
 800373a:	9201      	str	r2, [sp, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	462b      	mov	r3, r5
 8003740:	4622      	mov	r2, r4
 8003742:	4601      	mov	r1, r0
 8003744:	4863      	ldr	r0, [pc, #396]	@ (80038d4 <PIN_Setup+0x7e8>)
 8003746:	f7ff f86d 	bl	8002824 <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7a1b      	ldrb	r3, [r3, #8]
 800374e:	2202      	movs	r2, #2
 8003750:	4293      	cmp	r3, r2
 8003752:	d128      	bne.n	80037a6 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7adb      	ldrb	r3, [r3, #11]
 8003758:	220c      	movs	r2, #12
 800375a:	4293      	cmp	r3, r2
 800375c:	d10f      	bne.n	800377e <PIN_Setup+0x692>
 800375e:	200c      	movs	r0, #12
 8003760:	2402      	movs	r4, #2
 8003762:	2500      	movs	r5, #0
 8003764:	2302      	movs	r3, #2
 8003766:	2200      	movs	r2, #0
 8003768:	2107      	movs	r1, #7
 800376a:	9102      	str	r1, [sp, #8]
 800376c:	9201      	str	r2, [sp, #4]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	462b      	mov	r3, r5
 8003772:	4622      	mov	r2, r4
 8003774:	4601      	mov	r1, r0
 8003776:	4857      	ldr	r0, [pc, #348]	@ (80038d4 <PIN_Setup+0x7e8>)
 8003778:	f7ff f854 	bl	8002824 <GPIO_Pin_Init>
 800377c:	e013      	b.n	80037a6 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7adb      	ldrb	r3, [r3, #11]
 8003782:	220a      	movs	r2, #10
 8003784:	4293      	cmp	r3, r2
 8003786:	d10e      	bne.n	80037a6 <PIN_Setup+0x6ba>
 8003788:	200a      	movs	r0, #10
 800378a:	2402      	movs	r4, #2
 800378c:	2500      	movs	r5, #0
 800378e:	2302      	movs	r3, #2
 8003790:	2200      	movs	r2, #0
 8003792:	2107      	movs	r1, #7
 8003794:	9102      	str	r1, [sp, #8]
 8003796:	9201      	str	r2, [sp, #4]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	462b      	mov	r3, r5
 800379c:	4622      	mov	r2, r4
 800379e:	4601      	mov	r1, r0
 80037a0:	484d      	ldr	r0, [pc, #308]	@ (80038d8 <PIN_Setup+0x7ec>)
 80037a2:	f7ff f83f 	bl	8002824 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7bdb      	ldrb	r3, [r3, #15]
 80037aa:	2200      	movs	r2, #0
 80037ac:	4293      	cmp	r3, r2
 80037ae:	f000 80ec 	beq.w	800398a <PIN_Setup+0x89e>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	7bdb      	ldrb	r3, [r3, #15]
 80037b6:	2201      	movs	r2, #1
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <PIN_Setup+0x6da>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7bdb      	ldrb	r3, [r3, #15]
 80037c0:	2203      	movs	r2, #3
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d128      	bne.n	8003818 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7adb      	ldrb	r3, [r3, #11]
 80037ca:	2200      	movs	r2, #0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10f      	bne.n	80037f0 <PIN_Setup+0x704>
 80037d0:	2000      	movs	r0, #0
 80037d2:	2402      	movs	r4, #2
 80037d4:	2500      	movs	r5, #0
 80037d6:	2302      	movs	r3, #2
 80037d8:	2200      	movs	r2, #0
 80037da:	2107      	movs	r1, #7
 80037dc:	9102      	str	r1, [sp, #8]
 80037de:	9201      	str	r2, [sp, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	462b      	mov	r3, r5
 80037e4:	4622      	mov	r2, r4
 80037e6:	4601      	mov	r1, r0
 80037e8:	483a      	ldr	r0, [pc, #232]	@ (80038d4 <PIN_Setup+0x7e8>)
 80037ea:	f7ff f81b 	bl	8002824 <GPIO_Pin_Init>
 80037ee:	e013      	b.n	8003818 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7adb      	ldrb	r3, [r3, #11]
 80037f4:	2203      	movs	r2, #3
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10e      	bne.n	8003818 <PIN_Setup+0x72c>
 80037fa:	2003      	movs	r0, #3
 80037fc:	2402      	movs	r4, #2
 80037fe:	2500      	movs	r5, #0
 8003800:	2302      	movs	r3, #2
 8003802:	2200      	movs	r2, #0
 8003804:	2107      	movs	r1, #7
 8003806:	9102      	str	r1, [sp, #8]
 8003808:	9201      	str	r2, [sp, #4]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	462b      	mov	r3, r5
 800380e:	4622      	mov	r2, r4
 8003810:	4601      	mov	r1, r0
 8003812:	4831      	ldr	r0, [pc, #196]	@ (80038d8 <PIN_Setup+0x7ec>)
 8003814:	f7ff f806 	bl	8002824 <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	7bdb      	ldrb	r3, [r3, #15]
 800381c:	2202      	movs	r2, #2
 800381e:	4293      	cmp	r3, r2
 8003820:	d005      	beq.n	800382e <PIN_Setup+0x742>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7bdb      	ldrb	r3, [r3, #15]
 8003826:	2203      	movs	r2, #3
 8003828:	4293      	cmp	r3, r2
 800382a:	f040 80ae 	bne.w	800398a <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7adb      	ldrb	r3, [r3, #11]
 8003832:	2201      	movs	r2, #1
 8003834:	4293      	cmp	r3, r2
 8003836:	d10f      	bne.n	8003858 <PIN_Setup+0x76c>
 8003838:	2001      	movs	r0, #1
 800383a:	2402      	movs	r4, #2
 800383c:	2500      	movs	r5, #0
 800383e:	2302      	movs	r3, #2
 8003840:	2200      	movs	r2, #0
 8003842:	2107      	movs	r1, #7
 8003844:	9102      	str	r1, [sp, #8]
 8003846:	9201      	str	r2, [sp, #4]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	462b      	mov	r3, r5
 800384c:	4622      	mov	r2, r4
 800384e:	4601      	mov	r1, r0
 8003850:	4820      	ldr	r0, [pc, #128]	@ (80038d4 <PIN_Setup+0x7e8>)
 8003852:	f7fe ffe7 	bl	8002824 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003856:	e098      	b.n	800398a <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7adb      	ldrb	r3, [r3, #11]
 800385c:	2204      	movs	r2, #4
 800385e:	4293      	cmp	r3, r2
 8003860:	f040 8093 	bne.w	800398a <PIN_Setup+0x89e>
 8003864:	2004      	movs	r0, #4
 8003866:	2402      	movs	r4, #2
 8003868:	2500      	movs	r5, #0
 800386a:	2302      	movs	r3, #2
 800386c:	2200      	movs	r2, #0
 800386e:	2107      	movs	r1, #7
 8003870:	9102      	str	r1, [sp, #8]
 8003872:	9201      	str	r2, [sp, #4]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	462b      	mov	r3, r5
 8003878:	4622      	mov	r2, r4
 800387a:	4601      	mov	r1, r0
 800387c:	4816      	ldr	r0, [pc, #88]	@ (80038d8 <PIN_Setup+0x7ec>)
 800387e:	f7fe ffd1 	bl	8002824 <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003882:	e082      	b.n	800398a <PIN_Setup+0x89e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7a1b      	ldrb	r3, [r3, #8]
 8003888:	2206      	movs	r2, #6
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7a1b      	ldrb	r3, [r3, #8]
 8003892:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7a1b      	ldrb	r3, [r3, #8]
 800389c:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 800389e:	4293      	cmp	r3, r2
 80038a0:	d174      	bne.n	800398c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	7a5b      	ldrb	r3, [r3, #9]
 80038a6:	220b      	movs	r2, #11
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d117      	bne.n	80038dc <PIN_Setup+0x7f0>
 80038ac:	200b      	movs	r0, #11
 80038ae:	2402      	movs	r4, #2
 80038b0:	2500      	movs	r5, #0
 80038b2:	2302      	movs	r3, #2
 80038b4:	2200      	movs	r2, #0
 80038b6:	2107      	movs	r1, #7
 80038b8:	9102      	str	r1, [sp, #8]
 80038ba:	9201      	str	r2, [sp, #4]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	462b      	mov	r3, r5
 80038c0:	4622      	mov	r2, r4
 80038c2:	4601      	mov	r1, r0
 80038c4:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <PIN_Setup+0x7e4>)
 80038c6:	f7fe ffad 	bl	8002824 <GPIO_Pin_Init>
 80038ca:	e030      	b.n	800392e <PIN_Setup+0x842>
 80038cc:	40004800 	.word	0x40004800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40020400 	.word	0x40020400
 80038d8:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7a5b      	ldrb	r3, [r3, #9]
 80038e0:	220a      	movs	r2, #10
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10f      	bne.n	8003906 <PIN_Setup+0x81a>
 80038e6:	200a      	movs	r0, #10
 80038e8:	2402      	movs	r4, #2
 80038ea:	2500      	movs	r5, #0
 80038ec:	2302      	movs	r3, #2
 80038ee:	2200      	movs	r2, #0
 80038f0:	2107      	movs	r1, #7
 80038f2:	9102      	str	r1, [sp, #8]
 80038f4:	9201      	str	r2, [sp, #4]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	462b      	mov	r3, r5
 80038fa:	4622      	mov	r2, r4
 80038fc:	4601      	mov	r1, r0
 80038fe:	4825      	ldr	r0, [pc, #148]	@ (8003994 <PIN_Setup+0x8a8>)
 8003900:	f7fe ff90 	bl	8002824 <GPIO_Pin_Init>
 8003904:	e013      	b.n	800392e <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7a5b      	ldrb	r3, [r3, #9]
 800390a:	2208      	movs	r2, #8
 800390c:	4293      	cmp	r3, r2
 800390e:	d10e      	bne.n	800392e <PIN_Setup+0x842>
 8003910:	2008      	movs	r0, #8
 8003912:	2402      	movs	r4, #2
 8003914:	2500      	movs	r5, #0
 8003916:	2302      	movs	r3, #2
 8003918:	2200      	movs	r2, #0
 800391a:	2107      	movs	r1, #7
 800391c:	9102      	str	r1, [sp, #8]
 800391e:	9201      	str	r2, [sp, #4]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	462b      	mov	r3, r5
 8003924:	4622      	mov	r2, r4
 8003926:	4601      	mov	r1, r0
 8003928:	481a      	ldr	r0, [pc, #104]	@ (8003994 <PIN_Setup+0x8a8>)
 800392a:	f7fe ff7b 	bl	8002824 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7adb      	ldrb	r3, [r3, #11]
 8003932:	220c      	movs	r2, #12
 8003934:	4293      	cmp	r3, r2
 8003936:	d10f      	bne.n	8003958 <PIN_Setup+0x86c>
 8003938:	200c      	movs	r0, #12
 800393a:	2402      	movs	r4, #2
 800393c:	2500      	movs	r5, #0
 800393e:	2302      	movs	r3, #2
 8003940:	2200      	movs	r2, #0
 8003942:	2107      	movs	r1, #7
 8003944:	9102      	str	r1, [sp, #8]
 8003946:	9201      	str	r2, [sp, #4]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	462b      	mov	r3, r5
 800394c:	4622      	mov	r2, r4
 800394e:	4601      	mov	r1, r0
 8003950:	4810      	ldr	r0, [pc, #64]	@ (8003994 <PIN_Setup+0x8a8>)
 8003952:	f7fe ff67 	bl	8002824 <GPIO_Pin_Init>
}
 8003956:	e019      	b.n	800398c <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7adb      	ldrb	r3, [r3, #11]
 800395c:	220a      	movs	r2, #10
 800395e:	4293      	cmp	r3, r2
 8003960:	d114      	bne.n	800398c <PIN_Setup+0x8a0>
 8003962:	200a      	movs	r0, #10
 8003964:	2402      	movs	r4, #2
 8003966:	2500      	movs	r5, #0
 8003968:	2302      	movs	r3, #2
 800396a:	2200      	movs	r2, #0
 800396c:	2107      	movs	r1, #7
 800396e:	9102      	str	r1, [sp, #8]
 8003970:	9201      	str	r2, [sp, #4]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	462b      	mov	r3, r5
 8003976:	4622      	mov	r2, r4
 8003978:	4601      	mov	r1, r0
 800397a:	4807      	ldr	r0, [pc, #28]	@ (8003998 <PIN_Setup+0x8ac>)
 800397c:	f7fe ff52 	bl	8002824 <GPIO_Pin_Init>
}
 8003980:	e004      	b.n	800398c <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <PIN_Setup+0x8a0>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800398a:	bf00      	nop
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bdb0      	pop	{r4, r5, r7, pc}
 8003994:	40020400 	.word	0x40020400
 8003998:	40020c00 	.word	0x40020c00
 800399c:	00000000 	.word	0x00000000

080039a0 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b08b      	sub	sp, #44	@ 0x2c
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fb3b 	bl	8003024 <USART_Clock_Enable>
	PIN_Setup(config);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fb9c 	bl	80030ec <PIN_Setup>

	usart_dma_instance_number = Get_USART_Instance_Number(config);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fad5 	bl	8002f64 <Get_USART_Instance_Number>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	4bb0      	ldr	r3, [pc, #704]	@ (8003c80 <USART_Init+0x2e0>)
 80039c0:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 80039c2:	4baf      	ldr	r3, [pc, #700]	@ (8003c80 <USART_Init+0x2e0>)
 80039c4:	f993 3000 	ldrsb.w	r3, [r3]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d102      	bne.n	80039d4 <USART_Init+0x34>
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	e288      	b.n	8003ee6 <USART_Init+0x546>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fd93 	bl	8000504 <__aeabi_ui2d>
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	4ba8      	ldr	r3, [pc, #672]	@ (8003c84 <USART_Init+0x2e4>)
 80039e4:	f7fc fe08 	bl	80005f8 <__aeabi_dmul>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	a1a2      	add	r1, pc, #648	@ (adr r1, 8003c78 <USART_Init+0x2d8>)
 80039ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039f2:	f7fc ff2b 	bl	800084c <__aeabi_ddiv>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80039fe:	f107 0208 	add.w	r2, r7, #8
 8003a02:	f107 0310 	add.w	r3, r7, #16
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	ed97 0b08 	vldr	d0, [r7, #32]
 8003a0e:	f7ff fa82 	bl	8002f16 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 8003a12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	4b9b      	ldr	r3, [pc, #620]	@ (8003c88 <USART_Init+0x2e8>)
 8003a1c:	f7fc fdec 	bl	80005f8 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	ec43 2b17 	vmov	d7, r2, r3
 8003a28:	eeb0 0a47 	vmov.f32	s0, s14
 8003a2c:	eef0 0a67 	vmov.f32	s1, s15
 8003a30:	f001 f832 	bl	8004a98 <ceil>
 8003a34:	ec53 2b10 	vmov	r2, r3, d0
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f7fd f876 	bl	8000b2c <__aeabi_d2iz>
 8003a40:	4603      	mov	r3, r0
 8003a42:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 8003a44:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a48:	eeb0 0a47 	vmov.f32	s0, s14
 8003a4c:	eef0 0a67 	vmov.f32	s1, s15
 8003a50:	f001 f822 	bl	8004a98 <ceil>
 8003a54:	ec53 2b10 	vmov	r2, r3, d0
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7fd f866 	bl	8000b2c <__aeabi_d2iz>
 8003a60:	4603      	mov	r3, r0
 8003a62:	61bb      	str	r3, [r7, #24]

//	config->Port-> CR1 |= USART_CR1_UE;
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	011a      	lsls	r2, r3, #4
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7c9b      	ldrb	r3, [r3, #18]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7b9b      	ldrb	r3, [r3, #14]
 8003a90:	4619      	mov	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7c1b      	ldrb	r3, [r3, #16]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	611a      	str	r2, [r3, #16]

	if(config->dma_enable == USART_Configuration.DMA_Enable.RX_Enable)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7c5b      	ldrb	r3, [r3, #17]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f040 80f7 	bne.w	8003ca8 <USART_Init+0x308>
	{
		config -> Port -> CR3 |= USART_CR3_DMAR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ac8:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6f      	ldr	r2, [pc, #444]	@ (8003c8c <USART_Init+0x2ec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <USART_Init+0x146>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8003ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8003c90 <USART_Init+0x2f0>)
 8003ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c94 <USART_Init+0x2f4>)
 8003ad8:	4614      	mov	r4, r2
 8003ada:	33c0      	adds	r3, #192	@ 0xc0
 8003adc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ae4:	e03e      	b.n	8003b64 <USART_Init+0x1c4>
		}
		else if(config->Port == USART2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6b      	ldr	r2, [pc, #428]	@ (8003c98 <USART_Init+0x2f8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d107      	bne.n	8003b00 <USART_Init+0x160>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 8003af0:	4b67      	ldr	r3, [pc, #412]	@ (8003c90 <USART_Init+0x2f0>)
 8003af2:	4a68      	ldr	r2, [pc, #416]	@ (8003c94 <USART_Init+0x2f4>)
 8003af4:	3338      	adds	r3, #56	@ 0x38
 8003af6:	32d8      	adds	r2, #216	@ 0xd8
 8003af8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003afa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003afe:	e031      	b.n	8003b64 <USART_Init+0x1c4>
		}
		else if(config->Port == USART3)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a65      	ldr	r2, [pc, #404]	@ (8003c9c <USART_Init+0x2fc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d107      	bne.n	8003b1a <USART_Init+0x17a>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 8003b0a:	4b61      	ldr	r3, [pc, #388]	@ (8003c90 <USART_Init+0x2f0>)
 8003b0c:	4a61      	ldr	r2, [pc, #388]	@ (8003c94 <USART_Init+0x2f4>)
 8003b0e:	3370      	adds	r3, #112	@ 0x70
 8003b10:	32f0      	adds	r2, #240	@ 0xf0
 8003b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b18:	e024      	b.n	8003b64 <USART_Init+0x1c4>
		}
		else if(config->Port == UART4)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a60      	ldr	r2, [pc, #384]	@ (8003ca0 <USART_Init+0x300>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d108      	bne.n	8003b36 <USART_Init+0x196>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 8003b24:	4b5a      	ldr	r3, [pc, #360]	@ (8003c90 <USART_Init+0x2f0>)
 8003b26:	4a5b      	ldr	r2, [pc, #364]	@ (8003c94 <USART_Init+0x2f4>)
 8003b28:	33a8      	adds	r3, #168	@ 0xa8
 8003b2a:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8003b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b34:	e016      	b.n	8003b64 <USART_Init+0x1c4>
		}
		else if(config->Port == UART5)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca4 <USART_Init+0x304>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d108      	bne.n	8003b52 <USART_Init+0x1b2>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 8003b40:	4b53      	ldr	r3, [pc, #332]	@ (8003c90 <USART_Init+0x2f0>)
 8003b42:	4a54      	ldr	r2, [pc, #336]	@ (8003c94 <USART_Init+0x2f4>)
 8003b44:	33e0      	adds	r3, #224	@ 0xe0
 8003b46:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 8003b4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b50:	e008      	b.n	8003b64 <USART_Init+0x1c4>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 8003b52:	4b4f      	ldr	r3, [pc, #316]	@ (8003c90 <USART_Init+0x2f0>)
 8003b54:	4a4f      	ldr	r2, [pc, #316]	@ (8003c94 <USART_Init+0x2f4>)
 8003b56:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003b5a:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 8003b5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003b64:	4b46      	ldr	r3, [pc, #280]	@ (8003c80 <USART_Init+0x2e0>)
 8003b66:	f993 3000 	ldrsb.w	r3, [r3]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4948      	ldr	r1, [pc, #288]	@ (8003c90 <USART_Init+0x2f0>)
 8003b70:	4603      	mov	r3, r0
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a1b      	subs	r3, r3, r0
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	3318      	adds	r3, #24
 8003b7c:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003b7e:	4b40      	ldr	r3, [pc, #256]	@ (8003c80 <USART_Init+0x2e0>)
 8003b80:	f993 3000 	ldrsb.w	r3, [r3]
 8003b84:	4618      	mov	r0, r3
 8003b86:	2200      	movs	r2, #0
 8003b88:	4941      	ldr	r1, [pc, #260]	@ (8003c90 <USART_Init+0x2f0>)
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a1b      	subs	r3, r3, r0
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	330c      	adds	r3, #12
 8003b96:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete | DMA_Configuration.DMA_Interrupts.Transfer_Error;
 8003b98:	2210      	movs	r2, #16
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	4938      	ldr	r1, [pc, #224]	@ (8003c80 <USART_Init+0x2e0>)
 8003b9e:	f991 1000 	ldrsb.w	r1, [r1]
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	493a      	ldr	r1, [pc, #232]	@ (8003c90 <USART_Init+0x2f0>)
 8003ba8:	4603      	mov	r3, r0
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a1b      	subs	r3, r3, r0
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	331c      	adds	r3, #28
 8003bb4:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003bb6:	4b32      	ldr	r3, [pc, #200]	@ (8003c80 <USART_Init+0x2e0>)
 8003bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4933      	ldr	r1, [pc, #204]	@ (8003c90 <USART_Init+0x2f0>)
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	1a1b      	subs	r3, r3, r0
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	3328      	adds	r3, #40	@ 0x28
 8003bce:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c80 <USART_Init+0x2e0>)
 8003bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	2200      	movs	r2, #0
 8003bda:	492d      	ldr	r1, [pc, #180]	@ (8003c90 <USART_Init+0x2f0>)
 8003bdc:	4603      	mov	r3, r0
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a1b      	subs	r3, r3, r0
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	440b      	add	r3, r1
 8003be6:	3324      	adds	r3, #36	@ 0x24
 8003be8:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8003bea:	2200      	movs	r2, #0
 8003bec:	4b24      	ldr	r3, [pc, #144]	@ (8003c80 <USART_Init+0x2e0>)
 8003bee:	f993 3000 	ldrsb.w	r3, [r3]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	b290      	uxth	r0, r2
 8003bf6:	4a26      	ldr	r2, [pc, #152]	@ (8003c90 <USART_Init+0x2f0>)
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	1a5b      	subs	r3, r3, r1
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	3322      	adds	r3, #34	@ 0x22
 8003c04:	4602      	mov	r2, r0
 8003c06:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Disable;
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <USART_Init+0x2e0>)
 8003c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c10:	4619      	mov	r1, r3
 8003c12:	b290      	uxth	r0, r2
 8003c14:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <USART_Init+0x2f0>)
 8003c16:	460b      	mov	r3, r1
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	1a5b      	subs	r3, r3, r1
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3320      	adds	r3, #32
 8003c22:	4602      	mov	r2, r0
 8003c24:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 8003c26:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <USART_Init+0x2e0>)
 8003c28:	f993 3000 	ldrsb.w	r3, [r3]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c32:	4917      	ldr	r1, [pc, #92]	@ (8003c90 <USART_Init+0x2f0>)
 8003c34:	4603      	mov	r3, r0
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	1a1b      	subs	r3, r3, r0
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3314      	adds	r3, #20
 8003c40:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8003c42:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <USART_Init+0x2e0>)
 8003c44:	f993 3000 	ldrsb.w	r3, [r3]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	4910      	ldr	r1, [pc, #64]	@ (8003c90 <USART_Init+0x2f0>)
 8003c4e:	4603      	mov	r3, r0
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	1a1b      	subs	r3, r3, r0
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	3310      	adds	r3, #16
 8003c5a:	601a      	str	r2, [r3, #0]
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 8003c5c:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <USART_Init+0x2e0>)
 8003c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4a08      	ldr	r2, [pc, #32]	@ (8003c90 <USART_Init+0x2f0>)
 8003c6e:	4413      	add	r3, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fa25 	bl	80020c0 <DMA_Init>
 8003c76:	e01f      	b.n	8003cb8 <USART_Init+0x318>
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	41a406f4 	.word	0x41a406f4
 8003c80:	200005a0 	.word	0x200005a0
 8003c84:	40400000 	.word	0x40400000
 8003c88:	40300000 	.word	0x40300000
 8003c8c:	40011000 	.word	0x40011000
 8003c90:	20000300 	.word	0x20000300
 8003c94:	08004bc8 	.word	0x08004bc8
 8003c98:	40004400 	.word	0x40004400
 8003c9c:	40004800 	.word	0x40004800
 8003ca0:	40004c00 	.word	0x40004c00
 8003ca4:	40005000 	.word	0x40005000
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cb6:	615a      	str	r2, [r3, #20]
	}

	if(config->dma_enable == USART_Configuration.DMA_Enable.TX_Enable)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7c5b      	ldrb	r3, [r3, #17]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	f040 80de 	bne.w	8003e80 <USART_Init+0x4e0>
	{

		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cd2:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a85      	ldr	r2, [pc, #532]	@ (8003ef0 <USART_Init+0x550>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <USART_Init+0x350>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 8003cde:	4a85      	ldr	r2, [pc, #532]	@ (8003ef4 <USART_Init+0x554>)
 8003ce0:	4b85      	ldr	r3, [pc, #532]	@ (8003ef8 <USART_Init+0x558>)
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	33cc      	adds	r3, #204	@ 0xcc
 8003ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cee:	e03e      	b.n	8003d6e <USART_Init+0x3ce>
		}
		else if(config->Port == USART2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a81      	ldr	r2, [pc, #516]	@ (8003efc <USART_Init+0x55c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d107      	bne.n	8003d0a <USART_Init+0x36a>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 8003cfa:	4b7e      	ldr	r3, [pc, #504]	@ (8003ef4 <USART_Init+0x554>)
 8003cfc:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef8 <USART_Init+0x558>)
 8003cfe:	3338      	adds	r3, #56	@ 0x38
 8003d00:	32e4      	adds	r2, #228	@ 0xe4
 8003d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d08:	e031      	b.n	8003d6e <USART_Init+0x3ce>
		}
		else if(config->Port == USART3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f00 <USART_Init+0x560>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d107      	bne.n	8003d24 <USART_Init+0x384>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 8003d14:	4b77      	ldr	r3, [pc, #476]	@ (8003ef4 <USART_Init+0x554>)
 8003d16:	4a78      	ldr	r2, [pc, #480]	@ (8003ef8 <USART_Init+0x558>)
 8003d18:	3370      	adds	r3, #112	@ 0x70
 8003d1a:	32fc      	adds	r2, #252	@ 0xfc
 8003d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d22:	e024      	b.n	8003d6e <USART_Init+0x3ce>
		}
		else if(config->Port == UART4)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a76      	ldr	r2, [pc, #472]	@ (8003f04 <USART_Init+0x564>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <USART_Init+0x3a0>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 8003d2e:	4b71      	ldr	r3, [pc, #452]	@ (8003ef4 <USART_Init+0x554>)
 8003d30:	4a71      	ldr	r2, [pc, #452]	@ (8003ef8 <USART_Init+0x558>)
 8003d32:	33a8      	adds	r3, #168	@ 0xa8
 8003d34:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 8003d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d3e:	e016      	b.n	8003d6e <USART_Init+0x3ce>
		}
		else if(config->Port == UART5)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a70      	ldr	r2, [pc, #448]	@ (8003f08 <USART_Init+0x568>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <USART_Init+0x3bc>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 8003d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef4 <USART_Init+0x554>)
 8003d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef8 <USART_Init+0x558>)
 8003d4e:	33e0      	adds	r3, #224	@ 0xe0
 8003d50:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8003d54:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d5a:	e008      	b.n	8003d6e <USART_Init+0x3ce>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 8003d5c:	4b65      	ldr	r3, [pc, #404]	@ (8003ef4 <USART_Init+0x554>)
 8003d5e:	4a66      	ldr	r2, [pc, #408]	@ (8003ef8 <USART_Init+0x558>)
 8003d60:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003d64:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 8003d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003d6e:	4b67      	ldr	r3, [pc, #412]	@ (8003f0c <USART_Init+0x56c>)
 8003d70:	f993 3000 	ldrsb.w	r3, [r3]
 8003d74:	4618      	mov	r0, r3
 8003d76:	2200      	movs	r2, #0
 8003d78:	495e      	ldr	r1, [pc, #376]	@ (8003ef4 <USART_Init+0x554>)
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	1a1b      	subs	r3, r3, r0
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	3318      	adds	r3, #24
 8003d86:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003d88:	4b60      	ldr	r3, [pc, #384]	@ (8003f0c <USART_Init+0x56c>)
 8003d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	2200      	movs	r2, #0
 8003d92:	4958      	ldr	r1, [pc, #352]	@ (8003ef4 <USART_Init+0x554>)
 8003d94:	4603      	mov	r3, r0
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	1a1b      	subs	r3, r3, r0
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	330c      	adds	r3, #12
 8003da0:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete ;
 8003da2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f0c <USART_Init+0x56c>)
 8003da4:	f993 3000 	ldrsb.w	r3, [r3]
 8003da8:	4618      	mov	r0, r3
 8003daa:	2210      	movs	r2, #16
 8003dac:	4951      	ldr	r1, [pc, #324]	@ (8003ef4 <USART_Init+0x554>)
 8003dae:	4603      	mov	r3, r0
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	1a1b      	subs	r3, r3, r0
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	331c      	adds	r3, #28
 8003dba:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003dbc:	4b53      	ldr	r3, [pc, #332]	@ (8003f0c <USART_Init+0x56c>)
 8003dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	494b      	ldr	r1, [pc, #300]	@ (8003ef4 <USART_Init+0x554>)
 8003dc8:	4603      	mov	r3, r0
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	1a1b      	subs	r3, r3, r0
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3328      	adds	r3, #40	@ 0x28
 8003dd4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8003f0c <USART_Init+0x56c>)
 8003dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	4944      	ldr	r1, [pc, #272]	@ (8003ef4 <USART_Init+0x554>)
 8003de2:	4603      	mov	r3, r0
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	1a1b      	subs	r3, r3, r0
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	3324      	adds	r3, #36	@ 0x24
 8003dee:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8003df0:	2200      	movs	r2, #0
 8003df2:	4b46      	ldr	r3, [pc, #280]	@ (8003f0c <USART_Init+0x56c>)
 8003df4:	f993 3000 	ldrsb.w	r3, [r3]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	b290      	uxth	r0, r2
 8003dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ef4 <USART_Init+0x554>)
 8003dfe:	460b      	mov	r3, r1
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	1a5b      	subs	r3, r3, r1
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	3322      	adds	r3, #34	@ 0x22
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e12:	4b3e      	ldr	r3, [pc, #248]	@ (8003f0c <USART_Init+0x56c>)
 8003e14:	f993 3000 	ldrsb.w	r3, [r3]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	b290      	uxth	r0, r2
 8003e1c:	4a35      	ldr	r2, [pc, #212]	@ (8003ef4 <USART_Init+0x554>)
 8003e1e:	460b      	mov	r3, r1
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	1a5b      	subs	r3, r3, r1
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	3320      	adds	r3, #32
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003e2e:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <USART_Init+0x56c>)
 8003e30:	f993 3000 	ldrsb.w	r3, [r3]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003e3a:	492e      	ldr	r1, [pc, #184]	@ (8003ef4 <USART_Init+0x554>)
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	1a1b      	subs	r3, r3, r0
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	3314      	adds	r3, #20
 8003e48:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8003e4a:	4b30      	ldr	r3, [pc, #192]	@ (8003f0c <USART_Init+0x56c>)
 8003e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e50:	4618      	mov	r0, r3
 8003e52:	2240      	movs	r2, #64	@ 0x40
 8003e54:	4927      	ldr	r1, [pc, #156]	@ (8003ef4 <USART_Init+0x554>)
 8003e56:	4603      	mov	r3, r0
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	1a1b      	subs	r3, r3, r0
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	3310      	adds	r3, #16
 8003e62:	601a      	str	r2, [r3, #0]
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8003e64:	4b29      	ldr	r3, [pc, #164]	@ (8003f0c <USART_Init+0x56c>)
 8003e66:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <USART_Init+0x554>)
 8003e76:	4413      	add	r3, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe f921 	bl	80020c0 <DMA_Init>
 8003e7e:	e007      	b.n	8003e90 <USART_Init+0x4f0>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8e:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	7a1b      	ldrb	r3, [r3, #8]
 8003e94:	2203      	movs	r2, #3
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d107      	bne.n	8003eaa <USART_Init+0x50a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0208 	orr.w	r2, r2, #8
 8003ea8:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	7a1b      	ldrb	r3, [r3, #8]
 8003eae:	2205      	movs	r2, #5
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d107      	bne.n	8003ec4 <USART_Init+0x524>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ec2:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 020c 	orr.w	r2, r2, #12
 8003ed2:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ee2:	60da      	str	r2, [r3, #12]

	return 1;
 8003ee4:	2301      	movs	r3, #1
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	372c      	adds	r7, #44	@ 0x2c
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd90      	pop	{r4, r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40011000 	.word	0x40011000
 8003ef4:	20000450 	.word	0x20000450
 8003ef8:	08004bc8 	.word	0x08004bc8
 8003efc:	40004400 	.word	0x40004400
 8003f00:	40004800 	.word	0x40004800
 8003f04:	40004c00 	.word	0x40004c00
 8003f08:	40005000 	.word	0x40005000
 8003f0c:	200005a0 	.word	0x200005a0

08003f10 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	7c5b      	ldrb	r3, [r3, #17]
 8003f22:	2201      	movs	r2, #1
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	745a      	strb	r2, [r3, #17]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	7c5b      	ldrb	r3, [r3, #17]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80dc 	beq.w	80040ee <USART_TX_Buffer+0x1de>
	{
		config -> Port -> SR &= ~USART_SR_TC;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f44:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 8003f46:	4b79      	ldr	r3, [pc, #484]	@ (800412c <USART_TX_Buffer+0x21c>)
 8003f48:	f993 3000 	ldrsb.w	r3, [r3]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4977      	ldr	r1, [pc, #476]	@ (8004130 <USART_TX_Buffer+0x220>)
 8003f52:	4603      	mov	r3, r0
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	1a1b      	subs	r3, r3, r0
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3330      	adds	r3, #48	@ 0x30
 8003f5e:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	1d1a      	adds	r2, r3, #4
 8003f66:	4b71      	ldr	r3, [pc, #452]	@ (800412c <USART_TX_Buffer+0x21c>)
 8003f68:	f993 3000 	ldrsb.w	r3, [r3]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4a6f      	ldr	r2, [pc, #444]	@ (8004130 <USART_TX_Buffer+0x220>)
 8003f72:	460b      	mov	r3, r1
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	1a5b      	subs	r3, r3, r1
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	332c      	adds	r3, #44	@ 0x2c
 8003f7e:	6018      	str	r0, [r3, #0]
//		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&USART1->DR;
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8003f80:	4b6a      	ldr	r3, [pc, #424]	@ (800412c <USART_TX_Buffer+0x21c>)
 8003f82:	f993 3000 	ldrsb.w	r3, [r3]
 8003f86:	4619      	mov	r1, r3
 8003f88:	4a69      	ldr	r2, [pc, #420]	@ (8004130 <USART_TX_Buffer+0x220>)
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	1a5b      	subs	r3, r3, r1
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	3334      	adds	r3, #52	@ 0x34
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 8003f9a:	4b64      	ldr	r3, [pc, #400]	@ (800412c <USART_TX_Buffer+0x21c>)
 8003f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4a61      	ldr	r2, [pc, #388]	@ (8004130 <USART_TX_Buffer+0x220>)
 8003fac:	4413      	add	r3, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fa24 	bl	80023fc <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8003fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800412c <USART_TX_Buffer+0x21c>)
 8003fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8004130 <USART_TX_Buffer+0x220>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fa55 	bl	8002478 <DMA_Set_Trigger>

		if(config->Port == USART1)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a58      	ldr	r2, [pc, #352]	@ (8004134 <USART_TX_Buffer+0x224>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d112      	bne.n	8003ffe <USART_TX_Buffer+0xee>
		{
			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003fd8:	e006      	b.n	8003fe8 <USART_TX_Buffer+0xd8>
			{
				if(USART1_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 8003fda:	4b57      	ldr	r3, [pc, #348]	@ (8004138 <USART_TX_Buffer+0x228>)
 8003fdc:	789b      	ldrb	r3, [r3, #2]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <USART_TX_Buffer+0xd8>
 8003fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe6:	e09c      	b.n	8004122 <USART_TX_Buffer+0x212>
			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8003fe8:	4b53      	ldr	r3, [pc, #332]	@ (8004138 <USART_TX_Buffer+0x228>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f083 0301 	eor.w	r3, r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f1      	bne.n	8003fda <USART_TX_Buffer+0xca>
			}
			USART1_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8003ff6:	4b50      	ldr	r3, [pc, #320]	@ (8004138 <USART_TX_Buffer+0x228>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e090      	b.n	8004120 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == USART2)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a4e      	ldr	r2, [pc, #312]	@ (800413c <USART_TX_Buffer+0x22c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d112      	bne.n	800402e <USART_TX_Buffer+0x11e>
		{
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004008:	e006      	b.n	8004018 <USART_TX_Buffer+0x108>
			{
				if(USART2_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 800400a:	4b4d      	ldr	r3, [pc, #308]	@ (8004140 <USART_TX_Buffer+0x230>)
 800400c:	789b      	ldrb	r3, [r3, #2]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <USART_TX_Buffer+0x108>
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e084      	b.n	8004122 <USART_TX_Buffer+0x212>
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004018:	4b49      	ldr	r3, [pc, #292]	@ (8004140 <USART_TX_Buffer+0x230>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	f083 0301 	eor.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f1      	bne.n	800400a <USART_TX_Buffer+0xfa>
			}
			USART2_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8004026:	4b46      	ldr	r3, [pc, #280]	@ (8004140 <USART_TX_Buffer+0x230>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e078      	b.n	8004120 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == USART3)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a44      	ldr	r2, [pc, #272]	@ (8004144 <USART_TX_Buffer+0x234>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d112      	bne.n	800405e <USART_TX_Buffer+0x14e>
		{
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004038:	e006      	b.n	8004048 <USART_TX_Buffer+0x138>
			{
				if(USART3_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 800403a:	4b43      	ldr	r3, [pc, #268]	@ (8004148 <USART_TX_Buffer+0x238>)
 800403c:	789b      	ldrb	r3, [r3, #2]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <USART_TX_Buffer+0x138>
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	e06c      	b.n	8004122 <USART_TX_Buffer+0x212>
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004048:	4b3f      	ldr	r3, [pc, #252]	@ (8004148 <USART_TX_Buffer+0x238>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f083 0301 	eor.w	r3, r3, #1
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f1      	bne.n	800403a <USART_TX_Buffer+0x12a>
			}
			USART3_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8004056:	4b3c      	ldr	r3, [pc, #240]	@ (8004148 <USART_TX_Buffer+0x238>)
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e060      	b.n	8004120 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == UART4)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3a      	ldr	r2, [pc, #232]	@ (800414c <USART_TX_Buffer+0x23c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d112      	bne.n	800408e <USART_TX_Buffer+0x17e>
		{
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004068:	e006      	b.n	8004078 <USART_TX_Buffer+0x168>
			{
				if(USART4_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 800406a:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <USART_TX_Buffer+0x240>)
 800406c:	789b      	ldrb	r3, [r3, #2]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <USART_TX_Buffer+0x168>
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	e054      	b.n	8004122 <USART_TX_Buffer+0x212>
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004078:	4b35      	ldr	r3, [pc, #212]	@ (8004150 <USART_TX_Buffer+0x240>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f1      	bne.n	800406a <USART_TX_Buffer+0x15a>
			}
			USART4_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8004086:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <USART_TX_Buffer+0x240>)
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e048      	b.n	8004120 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == UART5)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a30      	ldr	r2, [pc, #192]	@ (8004154 <USART_TX_Buffer+0x244>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d112      	bne.n	80040be <USART_TX_Buffer+0x1ae>
		{
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004098:	e006      	b.n	80040a8 <USART_TX_Buffer+0x198>
			{
				if(USART5_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 800409a:	4b2f      	ldr	r3, [pc, #188]	@ (8004158 <USART_TX_Buffer+0x248>)
 800409c:	789b      	ldrb	r3, [r3, #2]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <USART_TX_Buffer+0x198>
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	e03c      	b.n	8004122 <USART_TX_Buffer+0x212>
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 80040a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <USART_TX_Buffer+0x248>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f083 0301 	eor.w	r3, r3, #1
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f1      	bne.n	800409a <USART_TX_Buffer+0x18a>
			}
			USART5_TX_DMA_Flag.Transfer_Complete_Flag = false;
 80040b6:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <USART_TX_Buffer+0x248>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e030      	b.n	8004120 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == USART6)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a26      	ldr	r2, [pc, #152]	@ (800415c <USART_TX_Buffer+0x24c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d12b      	bne.n	8004120 <USART_TX_Buffer+0x210>
		{
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 80040c8:	e006      	b.n	80040d8 <USART_TX_Buffer+0x1c8>
			{
				if(USART6_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 80040ca:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <USART_TX_Buffer+0x250>)
 80040cc:	789b      	ldrb	r3, [r3, #2]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <USART_TX_Buffer+0x1c8>
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295
 80040d6:	e024      	b.n	8004122 <USART_TX_Buffer+0x212>
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <USART_TX_Buffer+0x250>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f083 0301 	eor.w	r3, r3, #1
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f1      	bne.n	80040ca <USART_TX_Buffer+0x1ba>
			}
			USART6_TX_DMA_Flag.Transfer_Complete_Flag = false;
 80040e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <USART_TX_Buffer+0x250>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e018      	b.n	8004120 <USART_TX_Buffer+0x210>
		}
	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e011      	b.n	8004118 <USART_TX_Buffer+0x208>
		{
			config->Port->DR = tx_buffer[i];
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4413      	add	r3, r2
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 8004102:	bf00      	nop
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f8      	beq.n	8004104 <USART_TX_Buffer+0x1f4>
		for(int i = 0; i <= length; i++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	429a      	cmp	r2, r3
 800411e:	dde9      	ble.n	80040f4 <USART_TX_Buffer+0x1e4>
		}
	}

	return 1;
 8004120:	2301      	movs	r3, #1

}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200005a0 	.word	0x200005a0
 8004130:	20000450 	.word	0x20000450
 8004134:	40011000 	.word	0x40011000
 8004138:	200000f4 	.word	0x200000f4
 800413c:	40004400 	.word	0x40004400
 8004140:	20000104 	.word	0x20000104
 8004144:	40004800 	.word	0x40004800
 8004148:	20000114 	.word	0x20000114
 800414c:	40004c00 	.word	0x40004c00
 8004150:	2000011c 	.word	0x2000011c
 8004154:	40005000 	.word	0x40005000
 8004158:	2000012c 	.word	0x2000012c
 800415c:	40011400 	.word	0x40011400
 8004160:	2000013c 	.word	0x2000013c

08004164 <_vsiprintf_r>:
 8004164:	b500      	push	{lr}
 8004166:	b09b      	sub	sp, #108	@ 0x6c
 8004168:	9100      	str	r1, [sp, #0]
 800416a:	9104      	str	r1, [sp, #16]
 800416c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004170:	9105      	str	r1, [sp, #20]
 8004172:	9102      	str	r1, [sp, #8]
 8004174:	4905      	ldr	r1, [pc, #20]	@ (800418c <_vsiprintf_r+0x28>)
 8004176:	9103      	str	r1, [sp, #12]
 8004178:	4669      	mov	r1, sp
 800417a:	f000 f993 	bl	80044a4 <_svfiprintf_r>
 800417e:	9b00      	ldr	r3, [sp, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	b01b      	add	sp, #108	@ 0x6c
 8004186:	f85d fb04 	ldr.w	pc, [sp], #4
 800418a:	bf00      	nop
 800418c:	ffff0208 	.word	0xffff0208

08004190 <vsiprintf>:
 8004190:	4613      	mov	r3, r2
 8004192:	460a      	mov	r2, r1
 8004194:	4601      	mov	r1, r0
 8004196:	4802      	ldr	r0, [pc, #8]	@ (80041a0 <vsiprintf+0x10>)
 8004198:	6800      	ldr	r0, [r0, #0]
 800419a:	f7ff bfe3 	b.w	8004164 <_vsiprintf_r>
 800419e:	bf00      	nop
 80041a0:	20000004 	.word	0x20000004

080041a4 <__errno>:
 80041a4:	4b01      	ldr	r3, [pc, #4]	@ (80041ac <__errno+0x8>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000004 	.word	0x20000004

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4d0d      	ldr	r5, [pc, #52]	@ (80041e8 <__libc_init_array+0x38>)
 80041b4:	4c0d      	ldr	r4, [pc, #52]	@ (80041ec <__libc_init_array+0x3c>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	2600      	movs	r6, #0
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4d0b      	ldr	r5, [pc, #44]	@ (80041f0 <__libc_init_array+0x40>)
 80041c2:	4c0c      	ldr	r4, [pc, #48]	@ (80041f4 <__libc_init_array+0x44>)
 80041c4:	f000 fce4 	bl	8004b90 <_init>
 80041c8:	1b64      	subs	r4, r4, r5
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	2600      	movs	r6, #0
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08005000 	.word	0x08005000
 80041ec:	08005000 	.word	0x08005000
 80041f0:	08005000 	.word	0x08005000
 80041f4:	08005004 	.word	0x08005004

080041f8 <__retarget_lock_acquire_recursive>:
 80041f8:	4770      	bx	lr

080041fa <__retarget_lock_release_recursive>:
 80041fa:	4770      	bx	lr

080041fc <_free_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4605      	mov	r5, r0
 8004200:	2900      	cmp	r1, #0
 8004202:	d041      	beq.n	8004288 <_free_r+0x8c>
 8004204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004208:	1f0c      	subs	r4, r1, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfb8      	it	lt
 800420e:	18e4      	addlt	r4, r4, r3
 8004210:	f000 f8e0 	bl	80043d4 <__malloc_lock>
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <_free_r+0x90>)
 8004216:	6813      	ldr	r3, [r2, #0]
 8004218:	b933      	cbnz	r3, 8004228 <_free_r+0x2c>
 800421a:	6063      	str	r3, [r4, #4]
 800421c:	6014      	str	r4, [r2, #0]
 800421e:	4628      	mov	r0, r5
 8004220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004224:	f000 b8dc 	b.w	80043e0 <__malloc_unlock>
 8004228:	42a3      	cmp	r3, r4
 800422a:	d908      	bls.n	800423e <_free_r+0x42>
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	1821      	adds	r1, r4, r0
 8004230:	428b      	cmp	r3, r1
 8004232:	bf01      	itttt	eq
 8004234:	6819      	ldreq	r1, [r3, #0]
 8004236:	685b      	ldreq	r3, [r3, #4]
 8004238:	1809      	addeq	r1, r1, r0
 800423a:	6021      	streq	r1, [r4, #0]
 800423c:	e7ed      	b.n	800421a <_free_r+0x1e>
 800423e:	461a      	mov	r2, r3
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b10b      	cbz	r3, 8004248 <_free_r+0x4c>
 8004244:	42a3      	cmp	r3, r4
 8004246:	d9fa      	bls.n	800423e <_free_r+0x42>
 8004248:	6811      	ldr	r1, [r2, #0]
 800424a:	1850      	adds	r0, r2, r1
 800424c:	42a0      	cmp	r0, r4
 800424e:	d10b      	bne.n	8004268 <_free_r+0x6c>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	4401      	add	r1, r0
 8004254:	1850      	adds	r0, r2, r1
 8004256:	4283      	cmp	r3, r0
 8004258:	6011      	str	r1, [r2, #0]
 800425a:	d1e0      	bne.n	800421e <_free_r+0x22>
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	6053      	str	r3, [r2, #4]
 8004262:	4408      	add	r0, r1
 8004264:	6010      	str	r0, [r2, #0]
 8004266:	e7da      	b.n	800421e <_free_r+0x22>
 8004268:	d902      	bls.n	8004270 <_free_r+0x74>
 800426a:	230c      	movs	r3, #12
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	e7d6      	b.n	800421e <_free_r+0x22>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	1821      	adds	r1, r4, r0
 8004274:	428b      	cmp	r3, r1
 8004276:	bf04      	itt	eq
 8004278:	6819      	ldreq	r1, [r3, #0]
 800427a:	685b      	ldreq	r3, [r3, #4]
 800427c:	6063      	str	r3, [r4, #4]
 800427e:	bf04      	itt	eq
 8004280:	1809      	addeq	r1, r1, r0
 8004282:	6021      	streq	r1, [r4, #0]
 8004284:	6054      	str	r4, [r2, #4]
 8004286:	e7ca      	b.n	800421e <_free_r+0x22>
 8004288:	bd38      	pop	{r3, r4, r5, pc}
 800428a:	bf00      	nop
 800428c:	200006e8 	.word	0x200006e8

08004290 <sbrk_aligned>:
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	4e0f      	ldr	r6, [pc, #60]	@ (80042d0 <sbrk_aligned+0x40>)
 8004294:	460c      	mov	r4, r1
 8004296:	6831      	ldr	r1, [r6, #0]
 8004298:	4605      	mov	r5, r0
 800429a:	b911      	cbnz	r1, 80042a2 <sbrk_aligned+0x12>
 800429c:	f000 fba6 	bl	80049ec <_sbrk_r>
 80042a0:	6030      	str	r0, [r6, #0]
 80042a2:	4621      	mov	r1, r4
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 fba1 	bl	80049ec <_sbrk_r>
 80042aa:	1c43      	adds	r3, r0, #1
 80042ac:	d103      	bne.n	80042b6 <sbrk_aligned+0x26>
 80042ae:	f04f 34ff 	mov.w	r4, #4294967295
 80042b2:	4620      	mov	r0, r4
 80042b4:	bd70      	pop	{r4, r5, r6, pc}
 80042b6:	1cc4      	adds	r4, r0, #3
 80042b8:	f024 0403 	bic.w	r4, r4, #3
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d0f8      	beq.n	80042b2 <sbrk_aligned+0x22>
 80042c0:	1a21      	subs	r1, r4, r0
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 fb92 	bl	80049ec <_sbrk_r>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d1f2      	bne.n	80042b2 <sbrk_aligned+0x22>
 80042cc:	e7ef      	b.n	80042ae <sbrk_aligned+0x1e>
 80042ce:	bf00      	nop
 80042d0:	200006e4 	.word	0x200006e4

080042d4 <_malloc_r>:
 80042d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d8:	1ccd      	adds	r5, r1, #3
 80042da:	f025 0503 	bic.w	r5, r5, #3
 80042de:	3508      	adds	r5, #8
 80042e0:	2d0c      	cmp	r5, #12
 80042e2:	bf38      	it	cc
 80042e4:	250c      	movcc	r5, #12
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	4606      	mov	r6, r0
 80042ea:	db01      	blt.n	80042f0 <_malloc_r+0x1c>
 80042ec:	42a9      	cmp	r1, r5
 80042ee:	d904      	bls.n	80042fa <_malloc_r+0x26>
 80042f0:	230c      	movs	r3, #12
 80042f2:	6033      	str	r3, [r6, #0]
 80042f4:	2000      	movs	r0, #0
 80042f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043d0 <_malloc_r+0xfc>
 80042fe:	f000 f869 	bl	80043d4 <__malloc_lock>
 8004302:	f8d8 3000 	ldr.w	r3, [r8]
 8004306:	461c      	mov	r4, r3
 8004308:	bb44      	cbnz	r4, 800435c <_malloc_r+0x88>
 800430a:	4629      	mov	r1, r5
 800430c:	4630      	mov	r0, r6
 800430e:	f7ff ffbf 	bl	8004290 <sbrk_aligned>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	4604      	mov	r4, r0
 8004316:	d158      	bne.n	80043ca <_malloc_r+0xf6>
 8004318:	f8d8 4000 	ldr.w	r4, [r8]
 800431c:	4627      	mov	r7, r4
 800431e:	2f00      	cmp	r7, #0
 8004320:	d143      	bne.n	80043aa <_malloc_r+0xd6>
 8004322:	2c00      	cmp	r4, #0
 8004324:	d04b      	beq.n	80043be <_malloc_r+0xea>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	4639      	mov	r1, r7
 800432a:	4630      	mov	r0, r6
 800432c:	eb04 0903 	add.w	r9, r4, r3
 8004330:	f000 fb5c 	bl	80049ec <_sbrk_r>
 8004334:	4581      	cmp	r9, r0
 8004336:	d142      	bne.n	80043be <_malloc_r+0xea>
 8004338:	6821      	ldr	r1, [r4, #0]
 800433a:	1a6d      	subs	r5, r5, r1
 800433c:	4629      	mov	r1, r5
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff ffa6 	bl	8004290 <sbrk_aligned>
 8004344:	3001      	adds	r0, #1
 8004346:	d03a      	beq.n	80043be <_malloc_r+0xea>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	442b      	add	r3, r5
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	f8d8 3000 	ldr.w	r3, [r8]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	bb62      	cbnz	r2, 80043b0 <_malloc_r+0xdc>
 8004356:	f8c8 7000 	str.w	r7, [r8]
 800435a:	e00f      	b.n	800437c <_malloc_r+0xa8>
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	1b52      	subs	r2, r2, r5
 8004360:	d420      	bmi.n	80043a4 <_malloc_r+0xd0>
 8004362:	2a0b      	cmp	r2, #11
 8004364:	d917      	bls.n	8004396 <_malloc_r+0xc2>
 8004366:	1961      	adds	r1, r4, r5
 8004368:	42a3      	cmp	r3, r4
 800436a:	6025      	str	r5, [r4, #0]
 800436c:	bf18      	it	ne
 800436e:	6059      	strne	r1, [r3, #4]
 8004370:	6863      	ldr	r3, [r4, #4]
 8004372:	bf08      	it	eq
 8004374:	f8c8 1000 	streq.w	r1, [r8]
 8004378:	5162      	str	r2, [r4, r5]
 800437a:	604b      	str	r3, [r1, #4]
 800437c:	4630      	mov	r0, r6
 800437e:	f000 f82f 	bl	80043e0 <__malloc_unlock>
 8004382:	f104 000b 	add.w	r0, r4, #11
 8004386:	1d23      	adds	r3, r4, #4
 8004388:	f020 0007 	bic.w	r0, r0, #7
 800438c:	1ac2      	subs	r2, r0, r3
 800438e:	bf1c      	itt	ne
 8004390:	1a1b      	subne	r3, r3, r0
 8004392:	50a3      	strne	r3, [r4, r2]
 8004394:	e7af      	b.n	80042f6 <_malloc_r+0x22>
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	42a3      	cmp	r3, r4
 800439a:	bf0c      	ite	eq
 800439c:	f8c8 2000 	streq.w	r2, [r8]
 80043a0:	605a      	strne	r2, [r3, #4]
 80043a2:	e7eb      	b.n	800437c <_malloc_r+0xa8>
 80043a4:	4623      	mov	r3, r4
 80043a6:	6864      	ldr	r4, [r4, #4]
 80043a8:	e7ae      	b.n	8004308 <_malloc_r+0x34>
 80043aa:	463c      	mov	r4, r7
 80043ac:	687f      	ldr	r7, [r7, #4]
 80043ae:	e7b6      	b.n	800431e <_malloc_r+0x4a>
 80043b0:	461a      	mov	r2, r3
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	d1fb      	bne.n	80043b0 <_malloc_r+0xdc>
 80043b8:	2300      	movs	r3, #0
 80043ba:	6053      	str	r3, [r2, #4]
 80043bc:	e7de      	b.n	800437c <_malloc_r+0xa8>
 80043be:	230c      	movs	r3, #12
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	4630      	mov	r0, r6
 80043c4:	f000 f80c 	bl	80043e0 <__malloc_unlock>
 80043c8:	e794      	b.n	80042f4 <_malloc_r+0x20>
 80043ca:	6005      	str	r5, [r0, #0]
 80043cc:	e7d6      	b.n	800437c <_malloc_r+0xa8>
 80043ce:	bf00      	nop
 80043d0:	200006e8 	.word	0x200006e8

080043d4 <__malloc_lock>:
 80043d4:	4801      	ldr	r0, [pc, #4]	@ (80043dc <__malloc_lock+0x8>)
 80043d6:	f7ff bf0f 	b.w	80041f8 <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	200006e0 	.word	0x200006e0

080043e0 <__malloc_unlock>:
 80043e0:	4801      	ldr	r0, [pc, #4]	@ (80043e8 <__malloc_unlock+0x8>)
 80043e2:	f7ff bf0a 	b.w	80041fa <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	200006e0 	.word	0x200006e0

080043ec <__ssputs_r>:
 80043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f0:	688e      	ldr	r6, [r1, #8]
 80043f2:	461f      	mov	r7, r3
 80043f4:	42be      	cmp	r6, r7
 80043f6:	680b      	ldr	r3, [r1, #0]
 80043f8:	4682      	mov	sl, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	4690      	mov	r8, r2
 80043fe:	d82d      	bhi.n	800445c <__ssputs_r+0x70>
 8004400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004404:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004408:	d026      	beq.n	8004458 <__ssputs_r+0x6c>
 800440a:	6965      	ldr	r5, [r4, #20]
 800440c:	6909      	ldr	r1, [r1, #16]
 800440e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004412:	eba3 0901 	sub.w	r9, r3, r1
 8004416:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800441a:	1c7b      	adds	r3, r7, #1
 800441c:	444b      	add	r3, r9
 800441e:	106d      	asrs	r5, r5, #1
 8004420:	429d      	cmp	r5, r3
 8004422:	bf38      	it	cc
 8004424:	461d      	movcc	r5, r3
 8004426:	0553      	lsls	r3, r2, #21
 8004428:	d527      	bpl.n	800447a <__ssputs_r+0x8e>
 800442a:	4629      	mov	r1, r5
 800442c:	f7ff ff52 	bl	80042d4 <_malloc_r>
 8004430:	4606      	mov	r6, r0
 8004432:	b360      	cbz	r0, 800448e <__ssputs_r+0xa2>
 8004434:	6921      	ldr	r1, [r4, #16]
 8004436:	464a      	mov	r2, r9
 8004438:	f000 fae8 	bl	8004a0c <memcpy>
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004446:	81a3      	strh	r3, [r4, #12]
 8004448:	6126      	str	r6, [r4, #16]
 800444a:	6165      	str	r5, [r4, #20]
 800444c:	444e      	add	r6, r9
 800444e:	eba5 0509 	sub.w	r5, r5, r9
 8004452:	6026      	str	r6, [r4, #0]
 8004454:	60a5      	str	r5, [r4, #8]
 8004456:	463e      	mov	r6, r7
 8004458:	42be      	cmp	r6, r7
 800445a:	d900      	bls.n	800445e <__ssputs_r+0x72>
 800445c:	463e      	mov	r6, r7
 800445e:	6820      	ldr	r0, [r4, #0]
 8004460:	4632      	mov	r2, r6
 8004462:	4641      	mov	r1, r8
 8004464:	f000 faa8 	bl	80049b8 <memmove>
 8004468:	68a3      	ldr	r3, [r4, #8]
 800446a:	1b9b      	subs	r3, r3, r6
 800446c:	60a3      	str	r3, [r4, #8]
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	4433      	add	r3, r6
 8004472:	6023      	str	r3, [r4, #0]
 8004474:	2000      	movs	r0, #0
 8004476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447a:	462a      	mov	r2, r5
 800447c:	f000 fad4 	bl	8004a28 <_realloc_r>
 8004480:	4606      	mov	r6, r0
 8004482:	2800      	cmp	r0, #0
 8004484:	d1e0      	bne.n	8004448 <__ssputs_r+0x5c>
 8004486:	6921      	ldr	r1, [r4, #16]
 8004488:	4650      	mov	r0, sl
 800448a:	f7ff feb7 	bl	80041fc <_free_r>
 800448e:	230c      	movs	r3, #12
 8004490:	f8ca 3000 	str.w	r3, [sl]
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	e7e9      	b.n	8004476 <__ssputs_r+0x8a>
	...

080044a4 <_svfiprintf_r>:
 80044a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a8:	4698      	mov	r8, r3
 80044aa:	898b      	ldrh	r3, [r1, #12]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	b09d      	sub	sp, #116	@ 0x74
 80044b0:	4607      	mov	r7, r0
 80044b2:	460d      	mov	r5, r1
 80044b4:	4614      	mov	r4, r2
 80044b6:	d510      	bpl.n	80044da <_svfiprintf_r+0x36>
 80044b8:	690b      	ldr	r3, [r1, #16]
 80044ba:	b973      	cbnz	r3, 80044da <_svfiprintf_r+0x36>
 80044bc:	2140      	movs	r1, #64	@ 0x40
 80044be:	f7ff ff09 	bl	80042d4 <_malloc_r>
 80044c2:	6028      	str	r0, [r5, #0]
 80044c4:	6128      	str	r0, [r5, #16]
 80044c6:	b930      	cbnz	r0, 80044d6 <_svfiprintf_r+0x32>
 80044c8:	230c      	movs	r3, #12
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	b01d      	add	sp, #116	@ 0x74
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	2340      	movs	r3, #64	@ 0x40
 80044d8:	616b      	str	r3, [r5, #20]
 80044da:	2300      	movs	r3, #0
 80044dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044de:	2320      	movs	r3, #32
 80044e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e8:	2330      	movs	r3, #48	@ 0x30
 80044ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004688 <_svfiprintf_r+0x1e4>
 80044ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044f2:	f04f 0901 	mov.w	r9, #1
 80044f6:	4623      	mov	r3, r4
 80044f8:	469a      	mov	sl, r3
 80044fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044fe:	b10a      	cbz	r2, 8004504 <_svfiprintf_r+0x60>
 8004500:	2a25      	cmp	r2, #37	@ 0x25
 8004502:	d1f9      	bne.n	80044f8 <_svfiprintf_r+0x54>
 8004504:	ebba 0b04 	subs.w	fp, sl, r4
 8004508:	d00b      	beq.n	8004522 <_svfiprintf_r+0x7e>
 800450a:	465b      	mov	r3, fp
 800450c:	4622      	mov	r2, r4
 800450e:	4629      	mov	r1, r5
 8004510:	4638      	mov	r0, r7
 8004512:	f7ff ff6b 	bl	80043ec <__ssputs_r>
 8004516:	3001      	adds	r0, #1
 8004518:	f000 80a7 	beq.w	800466a <_svfiprintf_r+0x1c6>
 800451c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800451e:	445a      	add	r2, fp
 8004520:	9209      	str	r2, [sp, #36]	@ 0x24
 8004522:	f89a 3000 	ldrb.w	r3, [sl]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 809f 	beq.w	800466a <_svfiprintf_r+0x1c6>
 800452c:	2300      	movs	r3, #0
 800452e:	f04f 32ff 	mov.w	r2, #4294967295
 8004532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004536:	f10a 0a01 	add.w	sl, sl, #1
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	9307      	str	r3, [sp, #28]
 800453e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004542:	931a      	str	r3, [sp, #104]	@ 0x68
 8004544:	4654      	mov	r4, sl
 8004546:	2205      	movs	r2, #5
 8004548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454c:	484e      	ldr	r0, [pc, #312]	@ (8004688 <_svfiprintf_r+0x1e4>)
 800454e:	f7fb fe47 	bl	80001e0 <memchr>
 8004552:	9a04      	ldr	r2, [sp, #16]
 8004554:	b9d8      	cbnz	r0, 800458e <_svfiprintf_r+0xea>
 8004556:	06d0      	lsls	r0, r2, #27
 8004558:	bf44      	itt	mi
 800455a:	2320      	movmi	r3, #32
 800455c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004560:	0711      	lsls	r1, r2, #28
 8004562:	bf44      	itt	mi
 8004564:	232b      	movmi	r3, #43	@ 0x2b
 8004566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800456a:	f89a 3000 	ldrb.w	r3, [sl]
 800456e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004570:	d015      	beq.n	800459e <_svfiprintf_r+0xfa>
 8004572:	9a07      	ldr	r2, [sp, #28]
 8004574:	4654      	mov	r4, sl
 8004576:	2000      	movs	r0, #0
 8004578:	f04f 0c0a 	mov.w	ip, #10
 800457c:	4621      	mov	r1, r4
 800457e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004582:	3b30      	subs	r3, #48	@ 0x30
 8004584:	2b09      	cmp	r3, #9
 8004586:	d94b      	bls.n	8004620 <_svfiprintf_r+0x17c>
 8004588:	b1b0      	cbz	r0, 80045b8 <_svfiprintf_r+0x114>
 800458a:	9207      	str	r2, [sp, #28]
 800458c:	e014      	b.n	80045b8 <_svfiprintf_r+0x114>
 800458e:	eba0 0308 	sub.w	r3, r0, r8
 8004592:	fa09 f303 	lsl.w	r3, r9, r3
 8004596:	4313      	orrs	r3, r2
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	46a2      	mov	sl, r4
 800459c:	e7d2      	b.n	8004544 <_svfiprintf_r+0xa0>
 800459e:	9b03      	ldr	r3, [sp, #12]
 80045a0:	1d19      	adds	r1, r3, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	9103      	str	r1, [sp, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bfbb      	ittet	lt
 80045aa:	425b      	neglt	r3, r3
 80045ac:	f042 0202 	orrlt.w	r2, r2, #2
 80045b0:	9307      	strge	r3, [sp, #28]
 80045b2:	9307      	strlt	r3, [sp, #28]
 80045b4:	bfb8      	it	lt
 80045b6:	9204      	strlt	r2, [sp, #16]
 80045b8:	7823      	ldrb	r3, [r4, #0]
 80045ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80045bc:	d10a      	bne.n	80045d4 <_svfiprintf_r+0x130>
 80045be:	7863      	ldrb	r3, [r4, #1]
 80045c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c2:	d132      	bne.n	800462a <_svfiprintf_r+0x186>
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	1d1a      	adds	r2, r3, #4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	9203      	str	r2, [sp, #12]
 80045cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045d0:	3402      	adds	r4, #2
 80045d2:	9305      	str	r3, [sp, #20]
 80045d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004698 <_svfiprintf_r+0x1f4>
 80045d8:	7821      	ldrb	r1, [r4, #0]
 80045da:	2203      	movs	r2, #3
 80045dc:	4650      	mov	r0, sl
 80045de:	f7fb fdff 	bl	80001e0 <memchr>
 80045e2:	b138      	cbz	r0, 80045f4 <_svfiprintf_r+0x150>
 80045e4:	9b04      	ldr	r3, [sp, #16]
 80045e6:	eba0 000a 	sub.w	r0, r0, sl
 80045ea:	2240      	movs	r2, #64	@ 0x40
 80045ec:	4082      	lsls	r2, r0
 80045ee:	4313      	orrs	r3, r2
 80045f0:	3401      	adds	r4, #1
 80045f2:	9304      	str	r3, [sp, #16]
 80045f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f8:	4824      	ldr	r0, [pc, #144]	@ (800468c <_svfiprintf_r+0x1e8>)
 80045fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045fe:	2206      	movs	r2, #6
 8004600:	f7fb fdee 	bl	80001e0 <memchr>
 8004604:	2800      	cmp	r0, #0
 8004606:	d036      	beq.n	8004676 <_svfiprintf_r+0x1d2>
 8004608:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <_svfiprintf_r+0x1ec>)
 800460a:	bb1b      	cbnz	r3, 8004654 <_svfiprintf_r+0x1b0>
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	3307      	adds	r3, #7
 8004610:	f023 0307 	bic.w	r3, r3, #7
 8004614:	3308      	adds	r3, #8
 8004616:	9303      	str	r3, [sp, #12]
 8004618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800461a:	4433      	add	r3, r6
 800461c:	9309      	str	r3, [sp, #36]	@ 0x24
 800461e:	e76a      	b.n	80044f6 <_svfiprintf_r+0x52>
 8004620:	fb0c 3202 	mla	r2, ip, r2, r3
 8004624:	460c      	mov	r4, r1
 8004626:	2001      	movs	r0, #1
 8004628:	e7a8      	b.n	800457c <_svfiprintf_r+0xd8>
 800462a:	2300      	movs	r3, #0
 800462c:	3401      	adds	r4, #1
 800462e:	9305      	str	r3, [sp, #20]
 8004630:	4619      	mov	r1, r3
 8004632:	f04f 0c0a 	mov.w	ip, #10
 8004636:	4620      	mov	r0, r4
 8004638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800463c:	3a30      	subs	r2, #48	@ 0x30
 800463e:	2a09      	cmp	r2, #9
 8004640:	d903      	bls.n	800464a <_svfiprintf_r+0x1a6>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0c6      	beq.n	80045d4 <_svfiprintf_r+0x130>
 8004646:	9105      	str	r1, [sp, #20]
 8004648:	e7c4      	b.n	80045d4 <_svfiprintf_r+0x130>
 800464a:	fb0c 2101 	mla	r1, ip, r1, r2
 800464e:	4604      	mov	r4, r0
 8004650:	2301      	movs	r3, #1
 8004652:	e7f0      	b.n	8004636 <_svfiprintf_r+0x192>
 8004654:	ab03      	add	r3, sp, #12
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	462a      	mov	r2, r5
 800465a:	4b0e      	ldr	r3, [pc, #56]	@ (8004694 <_svfiprintf_r+0x1f0>)
 800465c:	a904      	add	r1, sp, #16
 800465e:	4638      	mov	r0, r7
 8004660:	f3af 8000 	nop.w
 8004664:	1c42      	adds	r2, r0, #1
 8004666:	4606      	mov	r6, r0
 8004668:	d1d6      	bne.n	8004618 <_svfiprintf_r+0x174>
 800466a:	89ab      	ldrh	r3, [r5, #12]
 800466c:	065b      	lsls	r3, r3, #25
 800466e:	f53f af2d 	bmi.w	80044cc <_svfiprintf_r+0x28>
 8004672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004674:	e72c      	b.n	80044d0 <_svfiprintf_r+0x2c>
 8004676:	ab03      	add	r3, sp, #12
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	462a      	mov	r2, r5
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <_svfiprintf_r+0x1f0>)
 800467e:	a904      	add	r1, sp, #16
 8004680:	4638      	mov	r0, r7
 8004682:	f000 f879 	bl	8004778 <_printf_i>
 8004686:	e7ed      	b.n	8004664 <_svfiprintf_r+0x1c0>
 8004688:	08004fc4 	.word	0x08004fc4
 800468c:	08004fce 	.word	0x08004fce
 8004690:	00000000 	.word	0x00000000
 8004694:	080043ed 	.word	0x080043ed
 8004698:	08004fca 	.word	0x08004fca

0800469c <_printf_common>:
 800469c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a0:	4616      	mov	r6, r2
 80046a2:	4698      	mov	r8, r3
 80046a4:	688a      	ldr	r2, [r1, #8]
 80046a6:	690b      	ldr	r3, [r1, #16]
 80046a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046ac:	4293      	cmp	r3, r2
 80046ae:	bfb8      	it	lt
 80046b0:	4613      	movlt	r3, r2
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046b8:	4607      	mov	r7, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	b10a      	cbz	r2, 80046c2 <_printf_common+0x26>
 80046be:	3301      	adds	r3, #1
 80046c0:	6033      	str	r3, [r6, #0]
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	0699      	lsls	r1, r3, #26
 80046c6:	bf42      	ittt	mi
 80046c8:	6833      	ldrmi	r3, [r6, #0]
 80046ca:	3302      	addmi	r3, #2
 80046cc:	6033      	strmi	r3, [r6, #0]
 80046ce:	6825      	ldr	r5, [r4, #0]
 80046d0:	f015 0506 	ands.w	r5, r5, #6
 80046d4:	d106      	bne.n	80046e4 <_printf_common+0x48>
 80046d6:	f104 0a19 	add.w	sl, r4, #25
 80046da:	68e3      	ldr	r3, [r4, #12]
 80046dc:	6832      	ldr	r2, [r6, #0]
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	42ab      	cmp	r3, r5
 80046e2:	dc26      	bgt.n	8004732 <_printf_common+0x96>
 80046e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	3b00      	subs	r3, #0
 80046ec:	bf18      	it	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	0692      	lsls	r2, r2, #26
 80046f2:	d42b      	bmi.n	800474c <_printf_common+0xb0>
 80046f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046f8:	4641      	mov	r1, r8
 80046fa:	4638      	mov	r0, r7
 80046fc:	47c8      	blx	r9
 80046fe:	3001      	adds	r0, #1
 8004700:	d01e      	beq.n	8004740 <_printf_common+0xa4>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	6922      	ldr	r2, [r4, #16]
 8004706:	f003 0306 	and.w	r3, r3, #6
 800470a:	2b04      	cmp	r3, #4
 800470c:	bf02      	ittt	eq
 800470e:	68e5      	ldreq	r5, [r4, #12]
 8004710:	6833      	ldreq	r3, [r6, #0]
 8004712:	1aed      	subeq	r5, r5, r3
 8004714:	68a3      	ldr	r3, [r4, #8]
 8004716:	bf0c      	ite	eq
 8004718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800471c:	2500      	movne	r5, #0
 800471e:	4293      	cmp	r3, r2
 8004720:	bfc4      	itt	gt
 8004722:	1a9b      	subgt	r3, r3, r2
 8004724:	18ed      	addgt	r5, r5, r3
 8004726:	2600      	movs	r6, #0
 8004728:	341a      	adds	r4, #26
 800472a:	42b5      	cmp	r5, r6
 800472c:	d11a      	bne.n	8004764 <_printf_common+0xc8>
 800472e:	2000      	movs	r0, #0
 8004730:	e008      	b.n	8004744 <_printf_common+0xa8>
 8004732:	2301      	movs	r3, #1
 8004734:	4652      	mov	r2, sl
 8004736:	4641      	mov	r1, r8
 8004738:	4638      	mov	r0, r7
 800473a:	47c8      	blx	r9
 800473c:	3001      	adds	r0, #1
 800473e:	d103      	bne.n	8004748 <_printf_common+0xac>
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004748:	3501      	adds	r5, #1
 800474a:	e7c6      	b.n	80046da <_printf_common+0x3e>
 800474c:	18e1      	adds	r1, r4, r3
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	2030      	movs	r0, #48	@ 0x30
 8004752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004756:	4422      	add	r2, r4
 8004758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800475c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004760:	3302      	adds	r3, #2
 8004762:	e7c7      	b.n	80046f4 <_printf_common+0x58>
 8004764:	2301      	movs	r3, #1
 8004766:	4622      	mov	r2, r4
 8004768:	4641      	mov	r1, r8
 800476a:	4638      	mov	r0, r7
 800476c:	47c8      	blx	r9
 800476e:	3001      	adds	r0, #1
 8004770:	d0e6      	beq.n	8004740 <_printf_common+0xa4>
 8004772:	3601      	adds	r6, #1
 8004774:	e7d9      	b.n	800472a <_printf_common+0x8e>
	...

08004778 <_printf_i>:
 8004778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	7e0f      	ldrb	r7, [r1, #24]
 800477e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004780:	2f78      	cmp	r7, #120	@ 0x78
 8004782:	4691      	mov	r9, r2
 8004784:	4680      	mov	r8, r0
 8004786:	460c      	mov	r4, r1
 8004788:	469a      	mov	sl, r3
 800478a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800478e:	d807      	bhi.n	80047a0 <_printf_i+0x28>
 8004790:	2f62      	cmp	r7, #98	@ 0x62
 8004792:	d80a      	bhi.n	80047aa <_printf_i+0x32>
 8004794:	2f00      	cmp	r7, #0
 8004796:	f000 80d2 	beq.w	800493e <_printf_i+0x1c6>
 800479a:	2f58      	cmp	r7, #88	@ 0x58
 800479c:	f000 80b9 	beq.w	8004912 <_printf_i+0x19a>
 80047a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047a8:	e03a      	b.n	8004820 <_printf_i+0xa8>
 80047aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ae:	2b15      	cmp	r3, #21
 80047b0:	d8f6      	bhi.n	80047a0 <_printf_i+0x28>
 80047b2:	a101      	add	r1, pc, #4	@ (adr r1, 80047b8 <_printf_i+0x40>)
 80047b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047b8:	08004811 	.word	0x08004811
 80047bc:	08004825 	.word	0x08004825
 80047c0:	080047a1 	.word	0x080047a1
 80047c4:	080047a1 	.word	0x080047a1
 80047c8:	080047a1 	.word	0x080047a1
 80047cc:	080047a1 	.word	0x080047a1
 80047d0:	08004825 	.word	0x08004825
 80047d4:	080047a1 	.word	0x080047a1
 80047d8:	080047a1 	.word	0x080047a1
 80047dc:	080047a1 	.word	0x080047a1
 80047e0:	080047a1 	.word	0x080047a1
 80047e4:	08004925 	.word	0x08004925
 80047e8:	0800484f 	.word	0x0800484f
 80047ec:	080048df 	.word	0x080048df
 80047f0:	080047a1 	.word	0x080047a1
 80047f4:	080047a1 	.word	0x080047a1
 80047f8:	08004947 	.word	0x08004947
 80047fc:	080047a1 	.word	0x080047a1
 8004800:	0800484f 	.word	0x0800484f
 8004804:	080047a1 	.word	0x080047a1
 8004808:	080047a1 	.word	0x080047a1
 800480c:	080048e7 	.word	0x080048e7
 8004810:	6833      	ldr	r3, [r6, #0]
 8004812:	1d1a      	adds	r2, r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6032      	str	r2, [r6, #0]
 8004818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800481c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004820:	2301      	movs	r3, #1
 8004822:	e09d      	b.n	8004960 <_printf_i+0x1e8>
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	6820      	ldr	r0, [r4, #0]
 8004828:	1d19      	adds	r1, r3, #4
 800482a:	6031      	str	r1, [r6, #0]
 800482c:	0606      	lsls	r6, r0, #24
 800482e:	d501      	bpl.n	8004834 <_printf_i+0xbc>
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	e003      	b.n	800483c <_printf_i+0xc4>
 8004834:	0645      	lsls	r5, r0, #25
 8004836:	d5fb      	bpl.n	8004830 <_printf_i+0xb8>
 8004838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800483c:	2d00      	cmp	r5, #0
 800483e:	da03      	bge.n	8004848 <_printf_i+0xd0>
 8004840:	232d      	movs	r3, #45	@ 0x2d
 8004842:	426d      	negs	r5, r5
 8004844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004848:	4859      	ldr	r0, [pc, #356]	@ (80049b0 <_printf_i+0x238>)
 800484a:	230a      	movs	r3, #10
 800484c:	e011      	b.n	8004872 <_printf_i+0xfa>
 800484e:	6821      	ldr	r1, [r4, #0]
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	0608      	lsls	r0, r1, #24
 8004854:	f853 5b04 	ldr.w	r5, [r3], #4
 8004858:	d402      	bmi.n	8004860 <_printf_i+0xe8>
 800485a:	0649      	lsls	r1, r1, #25
 800485c:	bf48      	it	mi
 800485e:	b2ad      	uxthmi	r5, r5
 8004860:	2f6f      	cmp	r7, #111	@ 0x6f
 8004862:	4853      	ldr	r0, [pc, #332]	@ (80049b0 <_printf_i+0x238>)
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	bf14      	ite	ne
 8004868:	230a      	movne	r3, #10
 800486a:	2308      	moveq	r3, #8
 800486c:	2100      	movs	r1, #0
 800486e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004872:	6866      	ldr	r6, [r4, #4]
 8004874:	60a6      	str	r6, [r4, #8]
 8004876:	2e00      	cmp	r6, #0
 8004878:	bfa2      	ittt	ge
 800487a:	6821      	ldrge	r1, [r4, #0]
 800487c:	f021 0104 	bicge.w	r1, r1, #4
 8004880:	6021      	strge	r1, [r4, #0]
 8004882:	b90d      	cbnz	r5, 8004888 <_printf_i+0x110>
 8004884:	2e00      	cmp	r6, #0
 8004886:	d04b      	beq.n	8004920 <_printf_i+0x1a8>
 8004888:	4616      	mov	r6, r2
 800488a:	fbb5 f1f3 	udiv	r1, r5, r3
 800488e:	fb03 5711 	mls	r7, r3, r1, r5
 8004892:	5dc7      	ldrb	r7, [r0, r7]
 8004894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004898:	462f      	mov	r7, r5
 800489a:	42bb      	cmp	r3, r7
 800489c:	460d      	mov	r5, r1
 800489e:	d9f4      	bls.n	800488a <_printf_i+0x112>
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d10b      	bne.n	80048bc <_printf_i+0x144>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	07df      	lsls	r7, r3, #31
 80048a8:	d508      	bpl.n	80048bc <_printf_i+0x144>
 80048aa:	6923      	ldr	r3, [r4, #16]
 80048ac:	6861      	ldr	r1, [r4, #4]
 80048ae:	4299      	cmp	r1, r3
 80048b0:	bfde      	ittt	le
 80048b2:	2330      	movle	r3, #48	@ 0x30
 80048b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048bc:	1b92      	subs	r2, r2, r6
 80048be:	6122      	str	r2, [r4, #16]
 80048c0:	f8cd a000 	str.w	sl, [sp]
 80048c4:	464b      	mov	r3, r9
 80048c6:	aa03      	add	r2, sp, #12
 80048c8:	4621      	mov	r1, r4
 80048ca:	4640      	mov	r0, r8
 80048cc:	f7ff fee6 	bl	800469c <_printf_common>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d14a      	bne.n	800496a <_printf_i+0x1f2>
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	b004      	add	sp, #16
 80048da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	f043 0320 	orr.w	r3, r3, #32
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	4833      	ldr	r0, [pc, #204]	@ (80049b4 <_printf_i+0x23c>)
 80048e8:	2778      	movs	r7, #120	@ 0x78
 80048ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	6831      	ldr	r1, [r6, #0]
 80048f2:	061f      	lsls	r7, r3, #24
 80048f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80048f8:	d402      	bmi.n	8004900 <_printf_i+0x188>
 80048fa:	065f      	lsls	r7, r3, #25
 80048fc:	bf48      	it	mi
 80048fe:	b2ad      	uxthmi	r5, r5
 8004900:	6031      	str	r1, [r6, #0]
 8004902:	07d9      	lsls	r1, r3, #31
 8004904:	bf44      	itt	mi
 8004906:	f043 0320 	orrmi.w	r3, r3, #32
 800490a:	6023      	strmi	r3, [r4, #0]
 800490c:	b11d      	cbz	r5, 8004916 <_printf_i+0x19e>
 800490e:	2310      	movs	r3, #16
 8004910:	e7ac      	b.n	800486c <_printf_i+0xf4>
 8004912:	4827      	ldr	r0, [pc, #156]	@ (80049b0 <_printf_i+0x238>)
 8004914:	e7e9      	b.n	80048ea <_printf_i+0x172>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f023 0320 	bic.w	r3, r3, #32
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	e7f6      	b.n	800490e <_printf_i+0x196>
 8004920:	4616      	mov	r6, r2
 8004922:	e7bd      	b.n	80048a0 <_printf_i+0x128>
 8004924:	6833      	ldr	r3, [r6, #0]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	6961      	ldr	r1, [r4, #20]
 800492a:	1d18      	adds	r0, r3, #4
 800492c:	6030      	str	r0, [r6, #0]
 800492e:	062e      	lsls	r6, r5, #24
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	d501      	bpl.n	8004938 <_printf_i+0x1c0>
 8004934:	6019      	str	r1, [r3, #0]
 8004936:	e002      	b.n	800493e <_printf_i+0x1c6>
 8004938:	0668      	lsls	r0, r5, #25
 800493a:	d5fb      	bpl.n	8004934 <_printf_i+0x1bc>
 800493c:	8019      	strh	r1, [r3, #0]
 800493e:	2300      	movs	r3, #0
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	4616      	mov	r6, r2
 8004944:	e7bc      	b.n	80048c0 <_printf_i+0x148>
 8004946:	6833      	ldr	r3, [r6, #0]
 8004948:	1d1a      	adds	r2, r3, #4
 800494a:	6032      	str	r2, [r6, #0]
 800494c:	681e      	ldr	r6, [r3, #0]
 800494e:	6862      	ldr	r2, [r4, #4]
 8004950:	2100      	movs	r1, #0
 8004952:	4630      	mov	r0, r6
 8004954:	f7fb fc44 	bl	80001e0 <memchr>
 8004958:	b108      	cbz	r0, 800495e <_printf_i+0x1e6>
 800495a:	1b80      	subs	r0, r0, r6
 800495c:	6060      	str	r0, [r4, #4]
 800495e:	6863      	ldr	r3, [r4, #4]
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	2300      	movs	r3, #0
 8004964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004968:	e7aa      	b.n	80048c0 <_printf_i+0x148>
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	4632      	mov	r2, r6
 800496e:	4649      	mov	r1, r9
 8004970:	4640      	mov	r0, r8
 8004972:	47d0      	blx	sl
 8004974:	3001      	adds	r0, #1
 8004976:	d0ad      	beq.n	80048d4 <_printf_i+0x15c>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	079b      	lsls	r3, r3, #30
 800497c:	d413      	bmi.n	80049a6 <_printf_i+0x22e>
 800497e:	68e0      	ldr	r0, [r4, #12]
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	4298      	cmp	r0, r3
 8004984:	bfb8      	it	lt
 8004986:	4618      	movlt	r0, r3
 8004988:	e7a6      	b.n	80048d8 <_printf_i+0x160>
 800498a:	2301      	movs	r3, #1
 800498c:	4632      	mov	r2, r6
 800498e:	4649      	mov	r1, r9
 8004990:	4640      	mov	r0, r8
 8004992:	47d0      	blx	sl
 8004994:	3001      	adds	r0, #1
 8004996:	d09d      	beq.n	80048d4 <_printf_i+0x15c>
 8004998:	3501      	adds	r5, #1
 800499a:	68e3      	ldr	r3, [r4, #12]
 800499c:	9903      	ldr	r1, [sp, #12]
 800499e:	1a5b      	subs	r3, r3, r1
 80049a0:	42ab      	cmp	r3, r5
 80049a2:	dcf2      	bgt.n	800498a <_printf_i+0x212>
 80049a4:	e7eb      	b.n	800497e <_printf_i+0x206>
 80049a6:	2500      	movs	r5, #0
 80049a8:	f104 0619 	add.w	r6, r4, #25
 80049ac:	e7f5      	b.n	800499a <_printf_i+0x222>
 80049ae:	bf00      	nop
 80049b0:	08004fd5 	.word	0x08004fd5
 80049b4:	08004fe6 	.word	0x08004fe6

080049b8 <memmove>:
 80049b8:	4288      	cmp	r0, r1
 80049ba:	b510      	push	{r4, lr}
 80049bc:	eb01 0402 	add.w	r4, r1, r2
 80049c0:	d902      	bls.n	80049c8 <memmove+0x10>
 80049c2:	4284      	cmp	r4, r0
 80049c4:	4623      	mov	r3, r4
 80049c6:	d807      	bhi.n	80049d8 <memmove+0x20>
 80049c8:	1e43      	subs	r3, r0, #1
 80049ca:	42a1      	cmp	r1, r4
 80049cc:	d008      	beq.n	80049e0 <memmove+0x28>
 80049ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049d6:	e7f8      	b.n	80049ca <memmove+0x12>
 80049d8:	4402      	add	r2, r0
 80049da:	4601      	mov	r1, r0
 80049dc:	428a      	cmp	r2, r1
 80049de:	d100      	bne.n	80049e2 <memmove+0x2a>
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049ea:	e7f7      	b.n	80049dc <memmove+0x24>

080049ec <_sbrk_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d06      	ldr	r5, [pc, #24]	@ (8004a08 <_sbrk_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7fe f99c 	bl	8002d34 <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_sbrk_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_sbrk_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	200006dc 	.word	0x200006dc

08004a0c <memcpy>:
 8004a0c:	440a      	add	r2, r1
 8004a0e:	4291      	cmp	r1, r2
 8004a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a14:	d100      	bne.n	8004a18 <memcpy+0xc>
 8004a16:	4770      	bx	lr
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a22:	4291      	cmp	r1, r2
 8004a24:	d1f9      	bne.n	8004a1a <memcpy+0xe>
 8004a26:	bd10      	pop	{r4, pc}

08004a28 <_realloc_r>:
 8004a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4615      	mov	r5, r2
 8004a30:	460c      	mov	r4, r1
 8004a32:	b921      	cbnz	r1, 8004a3e <_realloc_r+0x16>
 8004a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a38:	4611      	mov	r1, r2
 8004a3a:	f7ff bc4b 	b.w	80042d4 <_malloc_r>
 8004a3e:	b92a      	cbnz	r2, 8004a4c <_realloc_r+0x24>
 8004a40:	f7ff fbdc 	bl	80041fc <_free_r>
 8004a44:	2400      	movs	r4, #0
 8004a46:	4620      	mov	r0, r4
 8004a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4c:	f000 f81a 	bl	8004a84 <_malloc_usable_size_r>
 8004a50:	4285      	cmp	r5, r0
 8004a52:	4606      	mov	r6, r0
 8004a54:	d802      	bhi.n	8004a5c <_realloc_r+0x34>
 8004a56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a5a:	d8f4      	bhi.n	8004a46 <_realloc_r+0x1e>
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4640      	mov	r0, r8
 8004a60:	f7ff fc38 	bl	80042d4 <_malloc_r>
 8004a64:	4607      	mov	r7, r0
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d0ec      	beq.n	8004a44 <_realloc_r+0x1c>
 8004a6a:	42b5      	cmp	r5, r6
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4621      	mov	r1, r4
 8004a70:	bf28      	it	cs
 8004a72:	4632      	movcs	r2, r6
 8004a74:	f7ff ffca 	bl	8004a0c <memcpy>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	f7ff fbbe 	bl	80041fc <_free_r>
 8004a80:	463c      	mov	r4, r7
 8004a82:	e7e0      	b.n	8004a46 <_realloc_r+0x1e>

08004a84 <_malloc_usable_size_r>:
 8004a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a88:	1f18      	subs	r0, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bfbc      	itt	lt
 8004a8e:	580b      	ldrlt	r3, [r1, r0]
 8004a90:	18c0      	addlt	r0, r0, r3
 8004a92:	4770      	bx	lr
 8004a94:	0000      	movs	r0, r0
	...

08004a98 <ceil>:
 8004a98:	ec51 0b10 	vmov	r0, r1, d0
 8004a9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004aa8:	2e13      	cmp	r6, #19
 8004aaa:	460c      	mov	r4, r1
 8004aac:	4605      	mov	r5, r0
 8004aae:	4680      	mov	r8, r0
 8004ab0:	dc2e      	bgt.n	8004b10 <ceil+0x78>
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	da11      	bge.n	8004ada <ceil+0x42>
 8004ab6:	a332      	add	r3, pc, #200	@ (adr r3, 8004b80 <ceil+0xe8>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb fbe6 	bl	800028c <__adddf3>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f7fc f828 	bl	8000b18 <__aeabi_dcmpgt>
 8004ac8:	b120      	cbz	r0, 8004ad4 <ceil+0x3c>
 8004aca:	2c00      	cmp	r4, #0
 8004acc:	db4f      	blt.n	8004b6e <ceil+0xd6>
 8004ace:	4325      	orrs	r5, r4
 8004ad0:	d151      	bne.n	8004b76 <ceil+0xde>
 8004ad2:	462c      	mov	r4, r5
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	e023      	b.n	8004b22 <ceil+0x8a>
 8004ada:	4f2b      	ldr	r7, [pc, #172]	@ (8004b88 <ceil+0xf0>)
 8004adc:	4137      	asrs	r7, r6
 8004ade:	ea01 0307 	and.w	r3, r1, r7
 8004ae2:	4303      	orrs	r3, r0
 8004ae4:	d01d      	beq.n	8004b22 <ceil+0x8a>
 8004ae6:	a326      	add	r3, pc, #152	@ (adr r3, 8004b80 <ceil+0xe8>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f7fb fbce 	bl	800028c <__adddf3>
 8004af0:	2200      	movs	r2, #0
 8004af2:	2300      	movs	r3, #0
 8004af4:	f7fc f810 	bl	8000b18 <__aeabi_dcmpgt>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d0eb      	beq.n	8004ad4 <ceil+0x3c>
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	bfc2      	ittt	gt
 8004b00:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8004b04:	4133      	asrgt	r3, r6
 8004b06:	18e4      	addgt	r4, r4, r3
 8004b08:	ea24 0407 	bic.w	r4, r4, r7
 8004b0c:	2500      	movs	r5, #0
 8004b0e:	e7e1      	b.n	8004ad4 <ceil+0x3c>
 8004b10:	2e33      	cmp	r6, #51	@ 0x33
 8004b12:	dd0a      	ble.n	8004b2a <ceil+0x92>
 8004b14:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004b18:	d103      	bne.n	8004b22 <ceil+0x8a>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	f7fb fbb5 	bl	800028c <__adddf3>
 8004b22:	ec41 0b10 	vmov	d0, r0, r1
 8004b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b2a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004b2e:	f04f 37ff 	mov.w	r7, #4294967295
 8004b32:	40df      	lsrs	r7, r3
 8004b34:	4238      	tst	r0, r7
 8004b36:	d0f4      	beq.n	8004b22 <ceil+0x8a>
 8004b38:	a311      	add	r3, pc, #68	@ (adr r3, 8004b80 <ceil+0xe8>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f7fb fba5 	bl	800028c <__adddf3>
 8004b42:	2200      	movs	r2, #0
 8004b44:	2300      	movs	r3, #0
 8004b46:	f7fb ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0c2      	beq.n	8004ad4 <ceil+0x3c>
 8004b4e:	2c00      	cmp	r4, #0
 8004b50:	dd0a      	ble.n	8004b68 <ceil+0xd0>
 8004b52:	2e14      	cmp	r6, #20
 8004b54:	d101      	bne.n	8004b5a <ceil+0xc2>
 8004b56:	3401      	adds	r4, #1
 8004b58:	e006      	b.n	8004b68 <ceil+0xd0>
 8004b5a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004b5e:	2301      	movs	r3, #1
 8004b60:	40b3      	lsls	r3, r6
 8004b62:	441d      	add	r5, r3
 8004b64:	45a8      	cmp	r8, r5
 8004b66:	d8f6      	bhi.n	8004b56 <ceil+0xbe>
 8004b68:	ea25 0507 	bic.w	r5, r5, r7
 8004b6c:	e7b2      	b.n	8004ad4 <ceil+0x3c>
 8004b6e:	2500      	movs	r5, #0
 8004b70:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8004b74:	e7ae      	b.n	8004ad4 <ceil+0x3c>
 8004b76:	4c05      	ldr	r4, [pc, #20]	@ (8004b8c <ceil+0xf4>)
 8004b78:	2500      	movs	r5, #0
 8004b7a:	e7ab      	b.n	8004ad4 <ceil+0x3c>
 8004b7c:	f3af 8000 	nop.w
 8004b80:	8800759c 	.word	0x8800759c
 8004b84:	7e37e43c 	.word	0x7e37e43c
 8004b88:	000fffff 	.word	0x000fffff
 8004b8c:	3ff00000 	.word	0x3ff00000

08004b90 <_init>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr

08004b9c <_fini>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr
