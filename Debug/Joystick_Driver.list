
Joystick_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002930  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08002ab8  08002ab8  00003ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  08002ecc  08002ecc  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ecc  08002ecc  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ed0  08002ed0  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002ed4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004004  2**0
                  CONTENTS
 10 .bss          0000012c  20000004  20000004  00004004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00004004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000069ef  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b1f  00000000  00000000  0000aa23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  0000b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a6  00000000  00000000  0000b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e6f  00000000  00000000  0000b91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000400e  00000000  00000000  0002578d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f3f3  00000000  00000000  0002979b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b8b8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000794  00000000  00000000  000b8bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000b9368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002aa0 	.word	0x08002aa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002aa0 	.word	0x08002aa0

080001c8 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80001d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80001d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800021c <Delay_ms+0x54>
 80001da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80001de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80001e2:	ee17 3a90 	vmov	r3, s15
 80001e6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <Delay_ms+0x58>)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <Delay_ms+0x58>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80001f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <Delay_ms+0x58>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <Delay_ms+0x58>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000200:	bf00      	nop
 8000202:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <Delay_ms+0x58>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800020e:	2300      	movs	r3, #0
}
 8000210:	4618      	mov	r0, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	48241000 	.word	0x48241000
 8000220:	e000e010 	.word	0xe000e010

08000224 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 800022e:	e00b      	b.n	8000248 <Delay_milli+0x24>
	{
		Delay_ms(1);
 8000230:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000234:	f7ff ffc8 	bl	80001c8 <Delay_ms>
	for (; ms>0; ms--)
 8000238:	edd7 7a01 	vldr	s15, [r7, #4]
 800023c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000244:	edc7 7a01 	vstr	s15, [r7, #4]
 8000248:	edd7 7a01 	vldr	s15, [r7, #4]
 800024c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000254:	dcec      	bgt.n	8000230 <Delay_milli+0xc>
	}
	return ms;
 8000256:	edd7 7a01 	vldr	s15, [r7, #4]
 800025a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800025e:	ee17 3a90 	vmov	r3, s15
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <ADC_Timer_External_Trigger_Init>:
//		DMA_Set_Trigger(&xADC);
//	}
//}

static void ADC_Timer_External_Trigger_Init(ADC_Config *config)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC1)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	7a1b      	ldrb	r3, [r3, #8]
 8000278:	2200      	movs	r2, #0
 800027a:	4293      	cmp	r3, r2
 800027c:	d124      	bne.n	80002c8 <ADC_Timer_External_Trigger_Init+0x5c>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800027e:	4b97      	ldr	r3, [pc, #604]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000282:	4a96      	ldr	r2, [pc, #600]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> CCR1 = 10000/2 -1;
 800028a:	4b95      	ldr	r3, [pc, #596]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 800028c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000290:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->PSC = 16800;
 8000292:	4b93      	ldr	r3, [pc, #588]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000294:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000298:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 10000-1;
 800029a:	4b91      	ldr	r3, [pc, #580]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 800029c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002a0:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1 -> CR2 |= TIM_CR2_MMS_1 | TIM_CR2_MMS_0;
 80002a2:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	4a8e      	ldr	r2, [pc, #568]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002a8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002ac:	6053      	str	r3, [r2, #4]
		TIM1 -> CCER |= TIM_CCER_CC1E;
 80002ae:	4b8c      	ldr	r3, [pc, #560]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4a8b      	ldr	r2, [pc, #556]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6213      	str	r3, [r2, #32]
		TIM1->CR1 |= TIM_CR1_CEN ;
 80002ba:	4b89      	ldr	r3, [pc, #548]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a88      	ldr	r2, [pc, #544]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6013      	str	r3, [r2, #0]
		TIM3->PSC = 10000-1;
		TIM3->ARR = 8400-1;
		TIM3->CR1 |= TIM_CR1_CEN;
	}
	/***************************************************************************************************************/
}
 80002c6:	e1e2      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC2)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7a1b      	ldrb	r3, [r3, #8]
 80002cc:	2201      	movs	r2, #1
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d120      	bne.n	8000314 <ADC_Timer_External_Trigger_Init+0xa8>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 80002d2:	4b82      	ldr	r3, [pc, #520]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002d6:	4a81      	ldr	r2, [pc, #516]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC2G;
 80002de:	4b80      	ldr	r3, [pc, #512]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a7f      	ldr	r2, [pc, #508]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC2IE;
 80002ea:	4b7d      	ldr	r3, [pc, #500]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	4a7c      	ldr	r2, [pc, #496]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 80002f6:	4b7a      	ldr	r3, [pc, #488]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80002f8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002fc:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 80002fe:	4b78      	ldr	r3, [pc, #480]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000300:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000304:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000306:	4b76      	ldr	r3, [pc, #472]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a75      	ldr	r2, [pc, #468]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	e1bc      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC3)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	2202      	movs	r2, #2
 800031a:	4293      	cmp	r3, r2
 800031c:	d120      	bne.n	8000360 <ADC_Timer_External_Trigger_Init+0xf4>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800031e:	4b6f      	ldr	r3, [pc, #444]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000322:	4a6e      	ldr	r2, [pc, #440]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC3G;
 800032a:	4b6d      	ldr	r3, [pc, #436]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a6c      	ldr	r2, [pc, #432]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000330:	f043 0308 	orr.w	r3, r3, #8
 8000334:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC3IE;
 8000336:	4b6a      	ldr	r3, [pc, #424]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	4a69      	ldr	r2, [pc, #420]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 800033c:	f043 0308 	orr.w	r3, r3, #8
 8000340:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 8000342:	4b67      	ldr	r3, [pc, #412]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000344:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000348:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 800034a:	4b65      	ldr	r3, [pc, #404]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 800034c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000350:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000352:	4b63      	ldr	r3, [pc, #396]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a62      	ldr	r2, [pc, #392]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6013      	str	r3, [r2, #0]
}
 800035e:	e196      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_1_CC4)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	7a1b      	ldrb	r3, [r3, #8]
 8000364:	2200      	movs	r2, #0
 8000366:	4293      	cmp	r3, r2
 8000368:	d120      	bne.n	80003ac <ADC_Timer_External_Trigger_Init+0x140>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800036a:	4b5c      	ldr	r3, [pc, #368]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800036c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800036e:	4a5b      	ldr	r2, [pc, #364]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC4G;
 8000376:	4b5a      	ldr	r3, [pc, #360]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a59      	ldr	r2, [pc, #356]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC4IE;
 8000382:	4b57      	ldr	r3, [pc, #348]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	4a56      	ldr	r2, [pc, #344]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000388:	f043 0310 	orr.w	r3, r3, #16
 800038c:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 800038e:	4b54      	ldr	r3, [pc, #336]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000390:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000396:	4b52      	ldr	r3, [pc, #328]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 8000398:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800039c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 800039e:	4b50      	ldr	r3, [pc, #320]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a4f      	ldr	r2, [pc, #316]	@ (80004e0 <ADC_Timer_External_Trigger_Init+0x274>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6013      	str	r3, [r2, #0]
}
 80003aa:	e170      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_2_CC1)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	7a1b      	ldrb	r3, [r3, #8]
 80003b0:	2200      	movs	r2, #0
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d128      	bne.n	8000408 <ADC_Timer_External_Trigger_Init+0x19c>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003b6:	4b49      	ldr	r3, [pc, #292]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80003b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ba:	4a48      	ldr	r2, [pc, #288]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC1G;
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003cc:	f043 0302 	orr.w	r3, r3, #2
 80003d0:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC1IE;
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003dc:	f043 0302 	orr.w	r3, r3, #2
 80003e0:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 80003e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003ea:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80003f4:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 80003f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	e142      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC2)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7a1b      	ldrb	r3, [r3, #8]
 800040c:	2203      	movs	r2, #3
 800040e:	4293      	cmp	r3, r2
 8000410:	d135      	bne.n	800047e <ADC_Timer_External_Trigger_Init+0x212>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000412:	4b32      	ldr	r3, [pc, #200]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000416:	4a31      	ldr	r2, [pc, #196]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC2G | TIM_EGR_UG;
 800041e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000428:	f043 0305 	orr.w	r3, r3, #5
 800042c:	6153      	str	r3, [r2, #20]
		TIM2 -> CCR1 = 10000/2 -1;
 800042e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000432:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000436:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->PSC = 16800;
 8000438:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800043c:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000440:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 10000-1;
 8000442:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000446:	f242 720f 	movw	r2, #9999	@ 0x270f
 800044a:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 800044c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6053      	str	r3, [r2, #4]
		TIM2 -> CCER |= TIM_CCER_CC2E;
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000466:	f043 0310 	orr.w	r3, r3, #16
 800046a:	6213      	str	r3, [r2, #32]
		TIM2->CR1 |= TIM_CR1_CEN ;
 800046c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	e107      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC3)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	7a1b      	ldrb	r3, [r3, #8]
 8000482:	2204      	movs	r2, #4
 8000484:	4293      	cmp	r3, r2
 8000486:	d12d      	bne.n	80004e4 <ADC_Timer_External_Trigger_Init+0x278>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000488:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800048a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800048c:	4a13      	ldr	r2, [pc, #76]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 8000494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 80004a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 80004b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 80004be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80004c6:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 80004c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	e0d9      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40010000 	.word	0x40010000
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC4)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7a1b      	ldrb	r3, [r3, #8]
 80004e8:	2205      	movs	r2, #5
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d128      	bne.n	8000540 <ADC_Timer_External_Trigger_Init+0x2d4>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004ee:	4b6b      	ldr	r3, [pc, #428]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004f2:	4a6a      	ldr	r2, [pc, #424]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 80004fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 800050a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000514:	f043 0308 	orr.w	r3, r3, #8
 8000518:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 800051a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000522:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000524:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000528:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800052c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 800052e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	e0a6      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_TRGO)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	7a1b      	ldrb	r3, [r3, #8]
 8000544:	2206      	movs	r2, #6
 8000546:	4293      	cmp	r3, r2
 8000548:	d130      	bne.n	80005ac <ADC_Timer_External_Trigger_Init+0x340>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800054a:	4b54      	ldr	r3, [pc, #336]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 800054c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054e:	4a53      	ldr	r2, [pc, #332]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->DIER |=  TIM_DIER_UIE;
 8000556:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	60d3      	str	r3, [r2, #12]
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8000566:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	6053      	str	r3, [r2, #4]
		TIM2->PSC = 10000-1;
 8000576:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800057a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800057e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 16800-1;
 8000580:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000584:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000588:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 800058a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]
		TIM2 -> EGR |= TIM_EGR_UG;
 800059a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6153      	str	r3, [r2, #20]
}
 80005aa:	e070      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_3_CC1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7a1b      	ldrb	r3, [r3, #8]
 80005b0:	2207      	movs	r2, #7
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d120      	bne.n	80005f8 <ADC_Timer_External_Trigger_Init+0x38c>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005b6:	4b39      	ldr	r3, [pc, #228]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ba:	4a38      	ldr	r2, [pc, #224]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC1G;
 80005c2:	4b37      	ldr	r3, [pc, #220]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a36      	ldr	r2, [pc, #216]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC1IE;
 80005ce:	4b34      	ldr	r3, [pc, #208]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4a33      	ldr	r2, [pc, #204]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 80005da:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005e0:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 80005e2:	4b2f      	ldr	r3, [pc, #188]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005e4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80005e8:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 80005ea:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2c      	ldr	r2, [pc, #176]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]
}
 80005f6:	e04a      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC2)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7a1b      	ldrb	r3, [r3, #8]
 80005fc:	2200      	movs	r2, #0
 80005fe:	4293      	cmp	r3, r2
 8000600:	d120      	bne.n	8000644 <ADC_Timer_External_Trigger_Init+0x3d8>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	4a25      	ldr	r2, [pc, #148]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC2G;
 800060e:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a23      	ldr	r2, [pc, #140]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC2IE;
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4a20      	ldr	r2, [pc, #128]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 8000626:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000628:	f242 720f 	movw	r2, #9999	@ 0x270f
 800062c:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000630:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000634:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a19      	ldr	r2, [pc, #100]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	e024      	b.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC4)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7a1b      	ldrb	r3, [r3, #8]
 8000648:	2200      	movs	r2, #0
 800064a:	4293      	cmp	r3, r2
 800064c:	d11f      	bne.n	800068e <ADC_Timer_External_Trigger_Init+0x422>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC3G;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a10      	ldr	r2, [pc, #64]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000660:	f043 0308 	orr.w	r3, r3, #8
 8000664:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC3IE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000674:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 800067c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a06      	ldr	r2, [pc, #24]	@ (80006a0 <ADC_Timer_External_Trigger_Init+0x434>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40000400 	.word	0x40000400

080006a4 <ADC_Sampling_Config>:

static int8_t ADC_Sampling_Config(ADC_Config *config)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	uint8_t conversion_Counter = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
	if(config->Channel_0.Enable == ENABLE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7a9b      	ldrb	r3, [r3, #10]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00c      	beq.n	80006d2 <ADC_Sampling_Config+0x2e>
	{

		config->Port->SMPR2 |= config->Channel_0.Sample_Time << ADC_SMPR2_SMP0_Pos;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	691a      	ldr	r2, [r3, #16]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7b1b      	ldrb	r3, [r3, #12]
 80006c2:	4619      	mov	r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	430a      	orrs	r2, r1
 80006ca:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	3301      	adds	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_1.Enable == ENABLE)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7b5b      	ldrb	r3, [r3, #13]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00c      	beq.n	80006f4 <ADC_Sampling_Config+0x50>
	{
		config->Port->SMPR2 |= config->Channel_1.Sample_Time << ADC_SMPR2_SMP1_Pos;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6919      	ldr	r1, [r3, #16]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7bdb      	ldrb	r3, [r3, #15]
 80006e4:	00da      	lsls	r2, r3, #3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	3301      	adds	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_2.Enable == ENABLE)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7c1b      	ldrb	r3, [r3, #16]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00c      	beq.n	8000716 <ADC_Sampling_Config+0x72>
	{
		config->Port->SMPR2 |= config->Channel_2.Sample_Time << ADC_SMPR2_SMP2_Pos;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6919      	ldr	r1, [r3, #16]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7c9b      	ldrb	r3, [r3, #18]
 8000706:	019a      	lsls	r2, r3, #6
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	430a      	orrs	r2, r1
 800070e:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3301      	adds	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_3.Enable == ENABLE)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7cdb      	ldrb	r3, [r3, #19]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <ADC_Sampling_Config+0x94>
	{
		config->Port->SMPR2 |= config->Channel_3.Sample_Time << ADC_SMPR2_SMP3_Pos;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6919      	ldr	r1, [r3, #16]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7d5b      	ldrb	r3, [r3, #21]
 8000728:	025a      	lsls	r2, r3, #9
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	430a      	orrs	r2, r1
 8000730:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_4.Enable == ENABLE)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7d9b      	ldrb	r3, [r3, #22]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00c      	beq.n	800075a <ADC_Sampling_Config+0xb6>
	{
		config->Port->SMPR2 |= config->Channel_4.Sample_Time << ADC_SMPR2_SMP4_Pos;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6919      	ldr	r1, [r3, #16]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7e1b      	ldrb	r3, [r3, #24]
 800074a:	031a      	lsls	r2, r3, #12
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	430a      	orrs	r2, r1
 8000752:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	3301      	adds	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_5.Enable == ENABLE)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7e5b      	ldrb	r3, [r3, #25]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00c      	beq.n	800077c <ADC_Sampling_Config+0xd8>
	{
		config->Port->SMPR2 |= config->Channel_5.Sample_Time << ADC_SMPR2_SMP5_Pos;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6919      	ldr	r1, [r3, #16]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7edb      	ldrb	r3, [r3, #27]
 800076c:	03da      	lsls	r2, r3, #15
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	430a      	orrs	r2, r1
 8000774:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_6.Enable == ENABLE)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7f1b      	ldrb	r3, [r3, #28]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00c      	beq.n	800079e <ADC_Sampling_Config+0xfa>
	{
		config->Port->SMPR2 |= config->Channel_6.Sample_Time << ADC_SMPR2_SMP6_Pos;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6919      	ldr	r1, [r3, #16]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7f9b      	ldrb	r3, [r3, #30]
 800078e:	049a      	lsls	r2, r3, #18
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	430a      	orrs	r2, r1
 8000796:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	3301      	adds	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_7.Enable == ENABLE)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7fdb      	ldrb	r3, [r3, #31]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00d      	beq.n	80007c2 <ADC_Sampling_Config+0x11e>
	{
		config->Port->SMPR2 |= config->Channel_7.Sample_Time << ADC_SMPR2_SMP7_Pos;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6919      	ldr	r1, [r3, #16]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80007b2:	055a      	lsls	r2, r3, #21
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	3301      	adds	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_8.Enable == ENABLE)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00d      	beq.n	80007e8 <ADC_Sampling_Config+0x144>
	{
		config->Port->SMPR2 |= config->Channel_8.Sample_Time << ADC_SMPR2_SMP8_Pos;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6919      	ldr	r1, [r3, #16]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80007d8:	061a      	lsls	r2, r3, #24
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	430a      	orrs	r2, r1
 80007e0:	611a      	str	r2, [r3, #16]
		conversion_Counter += 1;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	3301      	adds	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_9.Enable == ENABLE)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00d      	beq.n	800080e <ADC_Sampling_Config+0x16a>
	{
		config->Port->SMPR1 |= config->Channel_9.Sample_Time << ADC_SMPR2_SMP9_Pos;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68d9      	ldr	r1, [r3, #12]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80007fe:	06da      	lsls	r2, r3, #27
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	430a      	orrs	r2, r1
 8000806:	60da      	str	r2, [r3, #12]
		conversion_Counter += 1;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	3301      	adds	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_10.Enable == ENABLE)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00d      	beq.n	8000834 <ADC_Sampling_Config+0x190>
	{
		config->Port->SMPR1 |= config->Channel_10.Sample_Time << ADC_SMPR1_SMP10_Pos;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000824:	4619      	mov	r1, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	430a      	orrs	r2, r1
 800082c:	60da      	str	r2, [r3, #12]
		conversion_Counter += 1;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	3301      	adds	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
	}

	if(config->Channel_11.Enable == ENABLE)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00d      	beq.n	800085a <ADC_Sampling_Config+0x1b6>
	{
		config->Port->SMPR1 |= config->Channel_11.Sample_Time << ADC_SMPR1_SMP11_Pos;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68d9      	ldr	r1, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800084a:	00da      	lsls	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	430a      	orrs	r2, r1
 8000852:	60da      	str	r2, [r3, #12]
		conversion_Counter += 1;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	3301      	adds	r3, #1
 8000858:	73fb      	strb	r3, [r7, #15]
	}
	/**************************************************************************************************************/
	if(config->Channel_12.Enable == ENABLE)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00d      	beq.n	8000880 <ADC_Sampling_Config+0x1dc>
	{
		config->Port->SMPR1 |= config->Channel_12.Sample_Time << ADC_SMPR1_SMP12_Pos;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68d9      	ldr	r1, [r3, #12]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000870:	019a      	lsls	r2, r3, #6
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	430a      	orrs	r2, r1
 8000878:	60da      	str	r2, [r3, #12]
		conversion_Counter += 1;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	3301      	adds	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
	}
	/**************************************************************************************************************/
	if(config->Channel_13.Enable == ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00d      	beq.n	80008a6 <ADC_Sampling_Config+0x202>
	{
		config->Port->SMPR1 |= config->Channel_13.Sample_Time << ADC_SMPR1_SMP13_Pos;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68d9      	ldr	r1, [r3, #12]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8000896:	025a      	lsls	r2, r3, #9
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	430a      	orrs	r2, r1
 800089e:	60da      	str	r2, [r3, #12]
		conversion_Counter += 1;
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	3301      	adds	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
	}
	/**************************************************************************************************************/
	if(config->Channel_14.Enable == ENABLE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00d      	beq.n	80008cc <ADC_Sampling_Config+0x228>
	{
		config->Port->SMPR1 |= config->Channel_14.Sample_Time << ADC_SMPR1_SMP14_Pos;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68d9      	ldr	r1, [r3, #12]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80008bc:	031a      	lsls	r2, r3, #12
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	60da      	str	r2, [r3, #12]
		conversion_Counter += 1;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	3301      	adds	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
	}
	/**************************************************************************************************************/
	if(config->Channel_15.Enable == ENABLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00d      	beq.n	80008f2 <ADC_Sampling_Config+0x24e>
	{
		config->Port->SMPR1 |= config->Channel_15.Sample_Time << ADC_SMPR1_SMP15_Pos;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68d9      	ldr	r1, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80008e2:	03da      	lsls	r2, r3, #15
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	60da      	str	r2, [r3, #12]
		conversion_Counter += 1;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	3301      	adds	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
	}



	return conversion_Counter;
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <ADC_Pin_Init>:

/********************************************************************************************************************/
static int8_t ADC_Pin_Init(ADC_Config *config)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b087      	sub	sp, #28
 8000908:	af04      	add	r7, sp, #16
 800090a:	6078      	str	r0, [r7, #4]
	if(config->Channel_0.Enable == ENABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7a9b      	ldrb	r3, [r3, #10]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00d      	beq.n	8000930 <ADC_Pin_Init+0x2c>
	{
		GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000914:	2003      	movs	r0, #3
 8000916:	2402      	movs	r4, #2
 8000918:	2304      	movs	r3, #4
 800091a:	2204      	movs	r2, #4
 800091c:	2100      	movs	r1, #0
 800091e:	9102      	str	r1, [sp, #8]
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4623      	mov	r3, r4
 8000926:	4602      	mov	r2, r0
 8000928:	2100      	movs	r1, #0
 800092a:	488f      	ldr	r0, [pc, #572]	@ (8000b68 <ADC_Pin_Init+0x264>)
 800092c:	f001 fcb4 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_1.Enable == ENABLE)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7b5b      	ldrb	r3, [r3, #13]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00d      	beq.n	8000954 <ADC_Pin_Init+0x50>
	{
		GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000938:	2003      	movs	r0, #3
 800093a:	2402      	movs	r4, #2
 800093c:	2304      	movs	r3, #4
 800093e:	2204      	movs	r2, #4
 8000940:	2100      	movs	r1, #0
 8000942:	9102      	str	r1, [sp, #8]
 8000944:	9201      	str	r2, [sp, #4]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4623      	mov	r3, r4
 800094a:	4602      	mov	r2, r0
 800094c:	2101      	movs	r1, #1
 800094e:	4886      	ldr	r0, [pc, #536]	@ (8000b68 <ADC_Pin_Init+0x264>)
 8000950:	f001 fca2 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_2.Enable == ENABLE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7c1b      	ldrb	r3, [r3, #16]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00d      	beq.n	8000978 <ADC_Pin_Init+0x74>
	{
		GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 800095c:	2003      	movs	r0, #3
 800095e:	2402      	movs	r4, #2
 8000960:	2304      	movs	r3, #4
 8000962:	2204      	movs	r2, #4
 8000964:	2100      	movs	r1, #0
 8000966:	9102      	str	r1, [sp, #8]
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4623      	mov	r3, r4
 800096e:	4602      	mov	r2, r0
 8000970:	2102      	movs	r1, #2
 8000972:	487d      	ldr	r0, [pc, #500]	@ (8000b68 <ADC_Pin_Init+0x264>)
 8000974:	f001 fc90 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_3.Enable == ENABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7cdb      	ldrb	r3, [r3, #19]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00d      	beq.n	800099c <ADC_Pin_Init+0x98>
	{
		GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000980:	2003      	movs	r0, #3
 8000982:	2402      	movs	r4, #2
 8000984:	2304      	movs	r3, #4
 8000986:	2204      	movs	r2, #4
 8000988:	2100      	movs	r1, #0
 800098a:	9102      	str	r1, [sp, #8]
 800098c:	9201      	str	r2, [sp, #4]
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4623      	mov	r3, r4
 8000992:	4602      	mov	r2, r0
 8000994:	2103      	movs	r1, #3
 8000996:	4874      	ldr	r0, [pc, #464]	@ (8000b68 <ADC_Pin_Init+0x264>)
 8000998:	f001 fc7e 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_4.Enable == ENABLE)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7d9b      	ldrb	r3, [r3, #22]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00d      	beq.n	80009c0 <ADC_Pin_Init+0xbc>
	{
		GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 80009a4:	2003      	movs	r0, #3
 80009a6:	2402      	movs	r4, #2
 80009a8:	2304      	movs	r3, #4
 80009aa:	2204      	movs	r2, #4
 80009ac:	2100      	movs	r1, #0
 80009ae:	9102      	str	r1, [sp, #8]
 80009b0:	9201      	str	r2, [sp, #4]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	4623      	mov	r3, r4
 80009b6:	4602      	mov	r2, r0
 80009b8:	2104      	movs	r1, #4
 80009ba:	486b      	ldr	r0, [pc, #428]	@ (8000b68 <ADC_Pin_Init+0x264>)
 80009bc:	f001 fc6c 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_5.Enable == ENABLE)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7e5b      	ldrb	r3, [r3, #25]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00d      	beq.n	80009e4 <ADC_Pin_Init+0xe0>
	{
		GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 80009c8:	2003      	movs	r0, #3
 80009ca:	2402      	movs	r4, #2
 80009cc:	2304      	movs	r3, #4
 80009ce:	2204      	movs	r2, #4
 80009d0:	2100      	movs	r1, #0
 80009d2:	9102      	str	r1, [sp, #8]
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	4623      	mov	r3, r4
 80009da:	4602      	mov	r2, r0
 80009dc:	2105      	movs	r1, #5
 80009de:	4862      	ldr	r0, [pc, #392]	@ (8000b68 <ADC_Pin_Init+0x264>)
 80009e0:	f001 fc5a 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_6.Enable == ENABLE)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7f1b      	ldrb	r3, [r3, #28]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00d      	beq.n	8000a08 <ADC_Pin_Init+0x104>
	{
		GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 80009ec:	2003      	movs	r0, #3
 80009ee:	2402      	movs	r4, #2
 80009f0:	2304      	movs	r3, #4
 80009f2:	2204      	movs	r2, #4
 80009f4:	2100      	movs	r1, #0
 80009f6:	9102      	str	r1, [sp, #8]
 80009f8:	9201      	str	r2, [sp, #4]
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	4623      	mov	r3, r4
 80009fe:	4602      	mov	r2, r0
 8000a00:	2106      	movs	r1, #6
 8000a02:	4859      	ldr	r0, [pc, #356]	@ (8000b68 <ADC_Pin_Init+0x264>)
 8000a04:	f001 fc48 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_7.Enable == ENABLE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7fdb      	ldrb	r3, [r3, #31]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00d      	beq.n	8000a2c <ADC_Pin_Init+0x128>
	{
		GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000a10:	2003      	movs	r0, #3
 8000a12:	2402      	movs	r4, #2
 8000a14:	2304      	movs	r3, #4
 8000a16:	2204      	movs	r2, #4
 8000a18:	2100      	movs	r1, #0
 8000a1a:	9102      	str	r1, [sp, #8]
 8000a1c:	9201      	str	r2, [sp, #4]
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	4623      	mov	r3, r4
 8000a22:	4602      	mov	r2, r0
 8000a24:	2107      	movs	r1, #7
 8000a26:	4850      	ldr	r0, [pc, #320]	@ (8000b68 <ADC_Pin_Init+0x264>)
 8000a28:	f001 fc36 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_8.Enable == ENABLE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00d      	beq.n	8000a52 <ADC_Pin_Init+0x14e>
	{
		GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000a36:	2003      	movs	r0, #3
 8000a38:	2402      	movs	r4, #2
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	2100      	movs	r1, #0
 8000a40:	9102      	str	r1, [sp, #8]
 8000a42:	9201      	str	r2, [sp, #4]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	4623      	mov	r3, r4
 8000a48:	4602      	mov	r2, r0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4847      	ldr	r0, [pc, #284]	@ (8000b6c <ADC_Pin_Init+0x268>)
 8000a4e:	f001 fc23 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_9.Enable == ENABLE)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00d      	beq.n	8000a78 <ADC_Pin_Init+0x174>
	{
		GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	2402      	movs	r4, #2
 8000a60:	2304      	movs	r3, #4
 8000a62:	2204      	movs	r2, #4
 8000a64:	2100      	movs	r1, #0
 8000a66:	9102      	str	r1, [sp, #8]
 8000a68:	9201      	str	r2, [sp, #4]
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	4623      	mov	r3, r4
 8000a6e:	4602      	mov	r2, r0
 8000a70:	2101      	movs	r1, #1
 8000a72:	483e      	ldr	r0, [pc, #248]	@ (8000b6c <ADC_Pin_Init+0x268>)
 8000a74:	f001 fc10 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_10.Enable == ENABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00d      	beq.n	8000a9e <ADC_Pin_Init+0x19a>
	{
		GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000a82:	2003      	movs	r0, #3
 8000a84:	2402      	movs	r4, #2
 8000a86:	2304      	movs	r3, #4
 8000a88:	2204      	movs	r2, #4
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	9102      	str	r1, [sp, #8]
 8000a8e:	9201      	str	r2, [sp, #4]
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4623      	mov	r3, r4
 8000a94:	4602      	mov	r2, r0
 8000a96:	2100      	movs	r1, #0
 8000a98:	4835      	ldr	r0, [pc, #212]	@ (8000b70 <ADC_Pin_Init+0x26c>)
 8000a9a:	f001 fbfd 	bl	8002298 <GPIO_Pin_Init>
	}

	if(config->Channel_11.Enable == ENABLE)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00d      	beq.n	8000ac4 <ADC_Pin_Init+0x1c0>
	{
		GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	2402      	movs	r4, #2
 8000aac:	2304      	movs	r3, #4
 8000aae:	2204      	movs	r2, #4
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	9102      	str	r1, [sp, #8]
 8000ab4:	9201      	str	r2, [sp, #4]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	4623      	mov	r3, r4
 8000aba:	4602      	mov	r2, r0
 8000abc:	2101      	movs	r1, #1
 8000abe:	482c      	ldr	r0, [pc, #176]	@ (8000b70 <ADC_Pin_Init+0x26c>)
 8000ac0:	f001 fbea 	bl	8002298 <GPIO_Pin_Init>
	}
	/**************************************************************************************************************/
	if(config->Channel_12.Enable == ENABLE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00d      	beq.n	8000aea <ADC_Pin_Init+0x1e6>
	{
		GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000ace:	2003      	movs	r0, #3
 8000ad0:	2402      	movs	r4, #2
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	9102      	str	r1, [sp, #8]
 8000ada:	9201      	str	r2, [sp, #4]
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	4623      	mov	r3, r4
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4822      	ldr	r0, [pc, #136]	@ (8000b70 <ADC_Pin_Init+0x26c>)
 8000ae6:	f001 fbd7 	bl	8002298 <GPIO_Pin_Init>
	}
	/**************************************************************************************************************/
	if(config->Channel_13.Enable == ENABLE)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00d      	beq.n	8000b10 <ADC_Pin_Init+0x20c>
	{
		GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000af4:	2003      	movs	r0, #3
 8000af6:	2402      	movs	r4, #2
 8000af8:	2304      	movs	r3, #4
 8000afa:	2204      	movs	r2, #4
 8000afc:	2100      	movs	r1, #0
 8000afe:	9102      	str	r1, [sp, #8]
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4623      	mov	r3, r4
 8000b06:	4602      	mov	r2, r0
 8000b08:	2103      	movs	r1, #3
 8000b0a:	4819      	ldr	r0, [pc, #100]	@ (8000b70 <ADC_Pin_Init+0x26c>)
 8000b0c:	f001 fbc4 	bl	8002298 <GPIO_Pin_Init>
	}
	/**************************************************************************************************************/
	if(config->Channel_14.Enable == ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00d      	beq.n	8000b36 <ADC_Pin_Init+0x232>
	{
		GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	2402      	movs	r4, #2
 8000b1e:	2304      	movs	r3, #4
 8000b20:	2204      	movs	r2, #4
 8000b22:	2100      	movs	r1, #0
 8000b24:	9102      	str	r1, [sp, #8]
 8000b26:	9201      	str	r2, [sp, #4]
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	2104      	movs	r1, #4
 8000b30:	480f      	ldr	r0, [pc, #60]	@ (8000b70 <ADC_Pin_Init+0x26c>)
 8000b32:	f001 fbb1 	bl	8002298 <GPIO_Pin_Init>
	}
	/**************************************************************************************************************/
	if(config->Channel_15.Enable == ENABLE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00d      	beq.n	8000b5c <ADC_Pin_Init+0x258>
	{
		GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog, GPIO_Configuration.Output_Type.None, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.None, GPIO_Configuration.Alternate_Functions.Analog);
 8000b40:	2003      	movs	r0, #3
 8000b42:	2402      	movs	r4, #2
 8000b44:	2304      	movs	r3, #4
 8000b46:	2204      	movs	r2, #4
 8000b48:	2100      	movs	r1, #0
 8000b4a:	9102      	str	r1, [sp, #8]
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4623      	mov	r3, r4
 8000b52:	4602      	mov	r2, r0
 8000b54:	2105      	movs	r1, #5
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <ADC_Pin_Init+0x26c>)
 8000b58:	f001 fb9e 	bl	8002298 <GPIO_Pin_Init>
	}

	return 1;
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800

08000b74 <ADC_Sequence_Config>:


static int8_t ADC_Sequence_Config(ADC_Config *config)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(config->Channel_0.Enable == ENABLE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7a9b      	ldrb	r3, [r3, #10]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d009      	beq.n	8000b98 <ADC_Sequence_Config+0x24>
	{
		config -> Port -> SQR3 |= config->Channel_0.Sequence_Number << ADC_SQR3_SQ1_Pos;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7adb      	ldrb	r3, [r3, #11]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(config->Channel_1.Enable == ENABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7b5b      	ldrb	r3, [r3, #13]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d009      	beq.n	8000bb4 <ADC_Sequence_Config+0x40>
	{
		config -> Port -> SQR3 |= config->Channel_1.Sequence_Number << ADC_SQR3_SQ2_Pos;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7b9b      	ldrb	r3, [r3, #14]
 8000baa:	015a      	lsls	r2, r3, #5
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(config->Channel_2.Enable == ENABLE)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7c1b      	ldrb	r3, [r3, #16]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d009      	beq.n	8000bd0 <ADC_Sequence_Config+0x5c>
	{
		config -> Port -> SQR3 |= config->Channel_2.Sequence_Number << ADC_SQR3_SQ3_Pos;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7c5b      	ldrb	r3, [r3, #17]
 8000bc6:	029a      	lsls	r2, r3, #10
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(config->Channel_3.Enable == ENABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7cdb      	ldrb	r3, [r3, #19]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d009      	beq.n	8000bec <ADC_Sequence_Config+0x78>
	{
		config -> Port -> SQR3 |= config->Channel_3.Sequence_Number << ADC_SQR3_SQ4_Pos;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7d1b      	ldrb	r3, [r3, #20]
 8000be2:	03da      	lsls	r2, r3, #15
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(config->Channel_4.Enable == ENABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7d9b      	ldrb	r3, [r3, #22]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d009      	beq.n	8000c08 <ADC_Sequence_Config+0x94>
	{
		config -> Port -> SQR3 |= config->Channel_4.Sequence_Number << ADC_SQR3_SQ5_Pos;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7ddb      	ldrb	r3, [r3, #23]
 8000bfe:	051a      	lsls	r2, r3, #20
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(config->Channel_5.Enable == ENABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e5b      	ldrb	r3, [r3, #25]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d009      	beq.n	8000c24 <ADC_Sequence_Config+0xb0>
	{
		config -> Port -> SQR3 |= config->Channel_5.Sequence_Number << ADC_SQR3_SQ6_Pos;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7e9b      	ldrb	r3, [r3, #26]
 8000c1a:	065a      	lsls	r2, r3, #25
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(config->Channel_6.Enable == ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7f1b      	ldrb	r3, [r3, #28]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d009      	beq.n	8000c40 <ADC_Sequence_Config+0xcc>
	{
		config -> Port -> SQR2 |= config->Channel_6.Sequence_Number << ADC_SQR2_SQ7_Pos;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7f5b      	ldrb	r3, [r3, #29]
 8000c36:	4619      	mov	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if(config->Channel_7.Enable == ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7fdb      	ldrb	r3, [r3, #31]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00a      	beq.n	8000c5e <ADC_Sequence_Config+0xea>
	{
		config -> Port -> SQR2 |= config->Channel_7.Sequence_Number << ADC_SQR2_SQ8_Pos;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c54:	015a      	lsls	r2, r3, #5
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if(config->Channel_8.Enable == ENABLE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00a      	beq.n	8000c7e <ADC_Sequence_Config+0x10a>
	{
		config -> Port -> SQR2 |= config->Channel_8.Sequence_Number << ADC_SQR2_SQ9_Pos;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000c74:	029a      	lsls	r2, r3, #10
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if(config->Channel_9.Enable == ENABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00a      	beq.n	8000c9e <ADC_Sequence_Config+0x12a>
	{
		config -> Port -> SQR2 |= config->Channel_9.Sequence_Number << ADC_SQR2_SQ10_Pos;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c94:	03da      	lsls	r2, r3, #15
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if(config->Channel_10.Enable == ENABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00a      	beq.n	8000cbe <ADC_Sequence_Config+0x14a>
	{
		config -> Port -> SQR2 |= config->Channel_10.Sequence_Number << ADC_SQR2_SQ11_Pos;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000cb4:	051a      	lsls	r2, r3, #20
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if(config->Channel_11.Enable == ENABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00a      	beq.n	8000cde <ADC_Sequence_Config+0x16a>
	{
		config -> Port -> SQR2 |= config->Channel_11.Sequence_Number << ADC_SQR2_SQ12_Pos;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000cd4:	065a      	lsls	r2, r3, #25
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	631a      	str	r2, [r3, #48]	@ 0x30
	}
	/**************************************************************************************************************/
	if(config->Channel_12.Enable == ENABLE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00a      	beq.n	8000cfe <ADC_Sequence_Config+0x18a>
	{
		config -> Port -> SQR1 |= config->Channel_12.Sequence_Number << ADC_SQR1_SQ13_Pos;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	/**************************************************************************************************************/
	if(config->Channel_13.Enable == ENABLE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00a      	beq.n	8000d1e <ADC_Sequence_Config+0x1aa>
	{
		config -> Port -> SQR1 |= config->Channel_13.Sequence_Number << ADC_SQR1_SQ14_Pos;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000d14:	015a      	lsls	r2, r3, #5
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	/**************************************************************************************************************/
	if(config->Channel_14.Enable == ENABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00a      	beq.n	8000d3e <ADC_Sequence_Config+0x1ca>
	{
		config -> Port -> SQR1 |= config->Channel_14.Sequence_Number << ADC_SQR1_SQ15_Pos;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d34:	029a      	lsls	r2, r3, #10
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	/**************************************************************************************************************/
	if(config->Channel_15.Enable == ENABLE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00a      	beq.n	8000d5e <ADC_Sequence_Config+0x1ea>
	{
		config -> Port -> SQR1 |= config->Channel_15.Sequence_Number << ADC_SQR1_SQ16_Pos;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d54:	03da      	lsls	r2, r3, #15
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <ADC_Init>:


/********************************************************************************************************************/
int8_t ADC_Init(ADC_Config *config)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if(config->Port == ADC_Configuration.Port._ADC1_) RCC -> APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a8a      	ldr	r2, [pc, #552]	@ (8000fa4 <ADC_Init+0x238>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d106      	bne.n	8000d8c <ADC_Init+0x20>
 8000d7e:	4b8a      	ldr	r3, [pc, #552]	@ (8000fa8 <ADC_Init+0x23c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	4a89      	ldr	r2, [pc, #548]	@ (8000fa8 <ADC_Init+0x23c>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8a:	e01a      	b.n	8000dc2 <ADC_Init+0x56>
	else if(config->Port == ADC_Configuration.Port._ADC2_) RCC -> APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a86      	ldr	r2, [pc, #536]	@ (8000fac <ADC_Init+0x240>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d106      	bne.n	8000da4 <ADC_Init+0x38>
 8000d96:	4b84      	ldr	r3, [pc, #528]	@ (8000fa8 <ADC_Init+0x23c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a83      	ldr	r2, [pc, #524]	@ (8000fa8 <ADC_Init+0x23c>)
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	e00e      	b.n	8000dc2 <ADC_Init+0x56>
	else if(config->Port == ADC_Configuration.Port._ADC3_)RCC -> APB2ENR |= RCC_APB2ENR_ADC3EN;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a81      	ldr	r2, [pc, #516]	@ (8000fb0 <ADC_Init+0x244>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d106      	bne.n	8000dbc <ADC_Init+0x50>
 8000dae:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa8 <ADC_Init+0x23c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	4a7d      	ldr	r2, [pc, #500]	@ (8000fa8 <ADC_Init+0x23c>)
 8000db4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dba:	e002      	b.n	8000dc2 <ADC_Init+0x56>
	else return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	e138      	b.n	8001034 <ADC_Init+0x2c8>

	config -> Port -> CR1 |= ADC_CR1_SCAN ;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000dd0:	605a      	str	r2, [r3, #4]

	if(config->Resolution == ADC_Configuration.Resolution.Bit_12) config -> Port -> CR1 &= ~ADC_CR1_RES;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d108      	bne.n	8000df0 <ADC_Init+0x84>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	e02f      	b.n	8000e50 <ADC_Init+0xe4>
	else if(config->Resolution == ADC_Configuration.Resolution.Bit_10) config -> Port -> CR1 |=  1 << ADC_CR1_RES_Pos;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000df6:	2200      	movs	r2, #0
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d108      	bne.n	8000e0e <ADC_Init+0xa2>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	e020      	b.n	8000e50 <ADC_Init+0xe4>
	else if(config->Resolution == ADC_Configuration.Resolution.Bit_8)  config -> Port -> CR1 |=  2 << ADC_CR1_RES_Pos;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000e14:	2200      	movs	r2, #0
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d108      	bne.n	8000e2c <ADC_Init+0xc0>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	e011      	b.n	8000e50 <ADC_Init+0xe4>
	else if(config->Resolution == ADC_Configuration.Resolution.Bit_6)  config -> Port -> CR1 |=  3 << ADC_CR1_RES_Pos;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000e32:	2200      	movs	r2, #0
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d108      	bne.n	8000e4a <ADC_Init+0xde>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	e002      	b.n	8000e50 <ADC_Init+0xe4>
	else return -1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e0f1      	b.n	8001034 <ADC_Init+0x2c8>


	if(config -> Conversion_Mode == ADC_Configuration.Conversion_Mode.Single){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	795b      	ldrb	r3, [r3, #5]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d108      	bne.n	8000e6c <ADC_Init+0x100>
		config -> Port -> CR2  &= ~ADC_CR2_CONT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0202 	bic.w	r2, r2, #2
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	e010      	b.n	8000e8e <ADC_Init+0x122>
	}
	else if(config -> Conversion_Mode == ADC_Configuration.Conversion_Mode.Continuous){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	795b      	ldrb	r3, [r3, #5]
 8000e70:	2202      	movs	r2, #2
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d108      	bne.n	8000e88 <ADC_Init+0x11c>
		config -> Port -> CR2  |= ADC_CR2_CONT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0202 	orr.w	r2, r2, #2
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	e002      	b.n	8000e8e <ADC_Init+0x122>
	}
	else {return -1;}
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	e0d2      	b.n	8001034 <ADC_Init+0x2c8>


	config -> Port -> CR2 |= ADC_CR2_EOCS ;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e9c:	609a      	str	r2, [r3, #8]

	// Data Alignment
	if(config -> Data_Alignment == ADC_Configuration.Data_Alignment.Right_Justified)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d108      	bne.n	8000eba <ADC_Init+0x14e>
	{
		config -> Port -> CR2 &= ~ADC_CR2_ALIGN;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	e010      	b.n	8000edc <ADC_Init+0x170>
	}
	else if(config -> Data_Alignment == ADC_Configuration.Data_Alignment.Left_Justified)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	791b      	ldrb	r3, [r3, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d108      	bne.n	8000ed6 <ADC_Init+0x16a>
	{
		config -> Port -> CR2 |= ADC_CR2_ALIGN;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	e002      	b.n	8000edc <ADC_Init+0x170>
	}
	else {return -1;}
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e0ab      	b.n	8001034 <ADC_Init+0x2c8>

	pin_temp = ADC_Sampling_Config(config);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fbe1 	bl	80006a4 <ADC_Sampling_Config>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <ADC_Init+0x248>)
 8000ee8:	701a      	strb	r2, [r3, #0]

	config -> Port -> SQR1 |= (pin_temp-1) << ADC_SQR1_L_Pos;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <ADC_Init+0x248>)
 8000ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	051b      	lsls	r3, r3, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	62da      	str	r2, [r3, #44]	@ 0x2c

	ADC_Pin_Init(config);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fcfd 	bl	8000904 <ADC_Pin_Init>



	if(config->Channel_Type == ADC_Configuration.Channel_Type.Regular)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d11f      	bne.n	8000f54 <ADC_Init+0x1e8>
	{
		config -> Port -> CR2 &= ~ADC_CR2_EXTSEL;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f22:	609a      	str	r2, [r3, #8]

		if(config -> External_Trigger.Enable == ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	79db      	ldrb	r3, [r3, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d045      	beq.n	8000fb8 <ADC_Init+0x24c>
		{
//			config -> Port -> CR2 |= config -> External_Trigger.Trigger_Event << ADC_CR2_EXTSEL_Pos;
			config -> Port -> CR2 |= ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 62c0 	orr.w	r2, r2, #100663296	@ 0x6000000
 8000f3a:	609a      	str	r2, [r3, #8]
			config -> Port -> CR2 |= ADC_CR2_EXTEN_0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f4a:	609a      	str	r2, [r3, #8]
			ADC_Timer_External_Trigger_Init(config);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff f98d 	bl	800026c <ADC_Timer_External_Trigger_Init>
 8000f52:	e031      	b.n	8000fb8 <ADC_Init+0x24c>
		}
	}
	else if(config->Channel_Type == ADC_Configuration.Channel_Type.Injected)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	799b      	ldrb	r3, [r3, #6]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d11f      	bne.n	8000f9e <ADC_Init+0x232>
	{
		config -> Port -> CR2 &= ~ADC_CR2_JEXTSEL;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8000f6c:	609a      	str	r2, [r3, #8]
		config -> Port -> CR2 |= config -> External_Trigger.Enable << ADC_CR2_JEXTEN_Pos;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6899      	ldr	r1, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	79db      	ldrb	r3, [r3, #7]
 8000f78:	051a      	lsls	r2, r3, #20
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	609a      	str	r2, [r3, #8]
		config -> Port -> CR2 |= config -> External_Trigger.Trigger_Event << ADC_CR2_JEXTSEL_Pos;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6899      	ldr	r1, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7a1b      	ldrb	r3, [r3, #8]
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	609a      	str	r2, [r3, #8]
		ADC_Timer_External_Trigger_Init(config);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff f968 	bl	800026c <ADC_Timer_External_Trigger_Init>
 8000f9c:	e00c      	b.n	8000fb8 <ADC_Init+0x24c>

	}
	else return -1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e047      	b.n	8001034 <ADC_Init+0x2c8>
 8000fa4:	40012000 	.word	0x40012000
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40012100 	.word	0x40012100
 8000fb0:	40012200 	.word	0x40012200
 8000fb4:	20000058 	.word	0x20000058


	config -> Port -> CR2 |= ADC_CR2_DMA;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fc6:	609a      	str	r2, [r3, #8]
	config -> Port -> CR2 |= ADC_CR2_DDS;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fd6:	609a      	str	r2, [r3, #8]

	ADC_Sequence_Config(config);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff fdcb 	bl	8000b74 <ADC_Sequence_Config>

	ADC_Enable(config);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f830 	bl	8001044 <ADC_Enable>

	xADC.Request = DMA_Configuration.Request._ADC1;
 8000fe4:	4a15      	ldr	r2, [pc, #84]	@ (800103c <ADC_Init+0x2d0>)
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <ADC_Init+0x2d4>)
 8000fe8:	4614      	mov	r4, r2
 8000fea:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8000fee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xADC.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <ADC_Init+0x2d0>)
 8000ffa:	611a      	str	r2, [r3, #16]
	xADC.circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8000ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <ADC_Init+0x2d0>)
 8001002:	619a      	str	r2, [r3, #24]
	xADC.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8001004:	2200      	movs	r2, #0
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <ADC_Init+0x2d0>)
 8001008:	60da      	str	r2, [r3, #12]
	xADC.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 800100a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <ADC_Init+0x2d0>)
 8001010:	629a      	str	r2, [r3, #40]	@ 0x28
	xADC.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8001012:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <ADC_Init+0x2d0>)
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
	xADC.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 800101a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <ADC_Init+0x2d0>)
 8001022:	841a      	strh	r2, [r3, #32]
	xADC.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8001024:	2300      	movs	r3, #0
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <ADC_Init+0x2d0>)
 800102a:	845a      	strh	r2, [r3, #34]	@ 0x22
	DMA_Init(&xADC);
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <ADC_Init+0x2d0>)
 800102e:	f000 fe75 	bl	8001d1c <DMA_Init>


	return 1;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	20000020 	.word	0x20000020
 8001040:	08002ab8 	.word	0x08002ab8

08001044 <ADC_Enable>:
/********************************************************************************************************************/

int8_t ADC_Enable(ADC_Config *config)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	config -> Port -> CR2 |= ADC_CR2_ADON;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	609a      	str	r2, [r3, #8]
	Delay_milli(1000);
 800105c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001070 <ADC_Enable+0x2c>
 8001060:	f7ff f8e0 	bl	8000224 <Delay_milli>
//	uint32_t delay = 10000;
//	while (delay--);
	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	447a0000 	.word	0x447a0000

08001074 <ADC_Start>:

int8_t ADC_Start(ADC_Config *config)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	config -> Port -> SR = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
	if(config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	799b      	ldrb	r3, [r3, #6]
 8001088:	2200      	movs	r2, #0
 800108a:	4293      	cmp	r3, r2
 800108c:	d108      	bne.n	80010a0 <ADC_Start+0x2c>
		config -> Port -> CR2 |= ADC_CR2_SWSTART;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e010      	b.n	80010c2 <ADC_Start+0x4e>
	}
	else if(config->Channel_Type == ADC_Configuration.Channel_Type.Injected){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	799b      	ldrb	r3, [r3, #6]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d108      	bne.n	80010bc <ADC_Start+0x48>
		config -> Port -> CR2 |= ADC_CR2_JSWSTART;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	e002      	b.n	80010c2 <ADC_Start+0x4e>
	}
	else return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	e000      	b.n	80010c4 <ADC_Start+0x50>
	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <ADC_Start_Capture>:

int8_t ADC_Start_Capture(ADC_Config *config, uint16_t *buffer)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	if ((config->Port->SR) &(ADC_SR_OVR))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00f      	beq.n	8001108 <ADC_Start_Capture+0x38>
	{
		config->Port->CR2 &= ~ADC_CR2_ADON;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	609a      	str	r2, [r3, #8]
		config->Port->CR2 |= ADC_CR2_ADON;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	609a      	str	r2, [r3, #8]
	}

	xADC.buffer_length = pin_temp;
 8001108:	4b10      	ldr	r3, [pc, #64]	@ (800114c <ADC_Start_Capture+0x7c>)
 800110a:	f993 3000 	ldrsb.w	r3, [r3]
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <ADC_Start_Capture+0x80>)
 8001112:	869a      	strh	r2, [r3, #52]	@ 0x34
	xADC.peripheral_address = (uint32_t)&(config->Port->DR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	334c      	adds	r3, #76	@ 0x4c
 800111a:	461a      	mov	r2, r3
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <ADC_Start_Capture+0x80>)
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
	xADC.memory_address = (uint32_t)buffer;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <ADC_Start_Capture+0x80>)
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30

	DMA_Set_Target(&xADC);
 8001126:	480a      	ldr	r0, [pc, #40]	@ (8001150 <ADC_Start_Capture+0x80>)
 8001128:	f000 ff66 	bl	8001ff8 <DMA_Set_Target>
	DMA_Set_Trigger(&xADC);
 800112c:	4808      	ldr	r0, [pc, #32]	@ (8001150 <ADC_Start_Capture+0x80>)
 800112e:	f000 ffa1 	bl	8002074 <DMA_Set_Trigger>
	config -> Port -> SR = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
	ADC_Start(config);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff9a 	bl	8001074 <ADC_Start>
	return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000058 	.word	0x20000058
 8001150:	20000020 	.word	0x20000020

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <DMA1_Stream0_IRQHandler>:
DMA_Flags_Typedef DMA2_Stream6_Flag;
DMA_Flags_Typedef DMA2_Stream7_Flag;


void DMA1_Stream0_IRQHandler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d009      	beq.n	80011b4 <DMA1_Stream0_IRQHandler+0x24>
	{
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <DMA1_Stream0_IRQHandler+0xb0>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4a24      	ldr	r2, [pc, #144]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF0)
	{
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 80011b2:	e03e      	b.n	8001232 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <DMA1_Stream0_IRQHandler+0x44>
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <DMA1_Stream0_IRQHandler+0xb0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6093      	str	r3, [r2, #8]
}
 80011d2:	e02e      	b.n	8001232 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF0)
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d009      	beq.n	80011f4 <DMA1_Stream0_IRQHandler+0x64>
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <DMA1_Stream0_IRQHandler+0xb0>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4a14      	ldr	r2, [pc, #80]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6093      	str	r3, [r2, #8]
}
 80011f2:	e01e      	b.n	8001232 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF0)
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <DMA1_Stream0_IRQHandler+0x84>
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <DMA1_Stream0_IRQHandler+0xb0>)
 8001202:	2201      	movs	r2, #1
 8001204:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4a0c      	ldr	r2, [pc, #48]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	6093      	str	r3, [r2, #8]
}
 8001212:	e00e      	b.n	8001232 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0320 	and.w	r3, r3, #32
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <DMA1_Stream0_IRQHandler+0xa2>
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <DMA1_Stream0_IRQHandler+0xb0>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <DMA1_Stream0_IRQHandler+0xac>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	6093      	str	r3, [r2, #8]
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40026000 	.word	0x40026000
 8001240:	2000005c 	.word	0x2000005c

08001244 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8001248:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <DMA1_Stream1_IRQHandler+0x24>
	{
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8001254:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <DMA1_Stream1_IRQHandler+0xb0>)
 8001256:	2201      	movs	r2, #1
 8001258:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800125a:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	4a24      	ldr	r2, [pc, #144]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001264:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF1)
	{
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 8001266:	e03e      	b.n	80012e6 <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <DMA1_Stream1_IRQHandler+0x44>
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <DMA1_Stream1_IRQHandler+0xb0>)
 8001276:	2201      	movs	r2, #1
 8001278:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001284:	6093      	str	r3, [r2, #8]
}
 8001286:	e02e      	b.n	80012e6 <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001290:	2b00      	cmp	r3, #0
 8001292:	d009      	beq.n	80012a8 <DMA1_Stream1_IRQHandler+0x64>
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8001294:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <DMA1_Stream1_IRQHandler+0xb0>)
 8001296:	2201      	movs	r2, #1
 8001298:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 80012a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a4:	6093      	str	r3, [r2, #8]
}
 80012a6:	e01e      	b.n	80012e6 <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF1)
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d009      	beq.n	80012c8 <DMA1_Stream1_IRQHandler+0x84>
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <DMA1_Stream1_IRQHandler+0xb0>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4a0c      	ldr	r2, [pc, #48]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 80012c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c4:	6093      	str	r3, [r2, #8]
}
 80012c6:	e00e      	b.n	80012e6 <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF1)
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <DMA1_Stream1_IRQHandler+0xa2>
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 80012d4:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <DMA1_Stream1_IRQHandler+0xb0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <DMA1_Stream1_IRQHandler+0xac>)
 80012e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012e4:	6093      	str	r3, [r2, #8]
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40026000 	.word	0x40026000
 80012f4:	20000064 	.word	0x20000064

080012f8 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 80012fc:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d009      	beq.n	800131c <DMA1_Stream2_IRQHandler+0x24>
	{
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 8001308:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <DMA1_Stream2_IRQHandler+0xb0>)
 800130a:	2201      	movs	r2, #1
 800130c:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4a24      	ldr	r2, [pc, #144]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF2)
	{
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 800131a:	e03e      	b.n	800139a <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 800131c:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <DMA1_Stream2_IRQHandler+0x44>
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <DMA1_Stream2_IRQHandler+0xb0>)
 800132a:	2201      	movs	r2, #1
 800132c:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001338:	6093      	str	r3, [r2, #8]
}
 800133a:	e02e      	b.n	800139a <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF2)
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <DMA1_Stream2_IRQHandler+0x64>
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <DMA1_Stream2_IRQHandler+0xb0>)
 800134a:	2201      	movs	r2, #1
 800134c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001354:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001358:	6093      	str	r3, [r2, #8]
}
 800135a:	e01e      	b.n	800139a <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF2)
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <DMA1_Stream2_IRQHandler+0x84>
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <DMA1_Stream2_IRQHandler+0xb0>)
 800136a:	2201      	movs	r2, #1
 800136c:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001378:	6093      	str	r3, [r2, #8]
}
 800137a:	e00e      	b.n	800139a <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF2)
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <DMA1_Stream2_IRQHandler+0xa2>
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <DMA1_Stream2_IRQHandler+0xb0>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800138e:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <DMA1_Stream2_IRQHandler+0xac>)
 8001394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001398:	6093      	str	r3, [r2, #8]
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40026000 	.word	0x40026000
 80013a8:	2000006c 	.word	0x2000006c

080013ac <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <DMA1_Stream3_IRQHandler+0x24>
	{
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <DMA1_Stream3_IRQHandler+0xb0>)
 80013be:	2201      	movs	r2, #1
 80013c0:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80013c2:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4a24      	ldr	r2, [pc, #144]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 80013c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013cc:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF3)
	{
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 80013ce:	e03e      	b.n	800144e <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d009      	beq.n	80013f0 <DMA1_Stream3_IRQHandler+0x44>
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <DMA1_Stream3_IRQHandler+0xb0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 80013e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ec:	6093      	str	r3, [r2, #8]
}
 80013ee:	e02e      	b.n	800144e <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF3)
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d009      	beq.n	8001410 <DMA1_Stream3_IRQHandler+0x64>
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 80013fc:	4b17      	ldr	r3, [pc, #92]	@ (800145c <DMA1_Stream3_IRQHandler+0xb0>)
 80013fe:	2201      	movs	r2, #1
 8001400:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800140c:	6093      	str	r3, [r2, #8]
}
 800140e:	e01e      	b.n	800144e <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF3)
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d009      	beq.n	8001430 <DMA1_Stream3_IRQHandler+0x84>
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <DMA1_Stream3_IRQHandler+0xb0>)
 800141e:	2201      	movs	r2, #1
 8001420:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4a0c      	ldr	r2, [pc, #48]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001428:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800142c:	6093      	str	r3, [r2, #8]
}
 800142e:	e00e      	b.n	800144e <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <DMA1_Stream3_IRQHandler+0xa2>
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <DMA1_Stream3_IRQHandler+0xb0>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <DMA1_Stream3_IRQHandler+0xac>)
 8001448:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800144c:	6093      	str	r3, [r2, #8]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40026000 	.word	0x40026000
 800145c:	20000074 	.word	0x20000074

08001460 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d009      	beq.n	8001484 <DMA1_Stream4_IRQHandler+0x24>
	{
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 8001470:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <DMA1_Stream4_IRQHandler+0xb0>)
 8001472:	2201      	movs	r2, #1
 8001474:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a24      	ldr	r2, [pc, #144]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF4)
	{
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 8001482:	e03e      	b.n	8001502 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 8001484:	4b21      	ldr	r3, [pc, #132]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <DMA1_Stream4_IRQHandler+0x44>
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <DMA1_Stream4_IRQHandler+0xb0>)
 8001492:	2201      	movs	r2, #1
 8001494:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	60d3      	str	r3, [r2, #12]
}
 80014a2:	e02e      	b.n	8001502 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF4)
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <DMA1_Stream4_IRQHandler+0x64>
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <DMA1_Stream4_IRQHandler+0xb0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4a14      	ldr	r2, [pc, #80]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	60d3      	str	r3, [r2, #12]
}
 80014c2:	e01e      	b.n	8001502 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF4)
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <DMA1_Stream4_IRQHandler+0x84>
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <DMA1_Stream4_IRQHandler+0xb0>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	4a0c      	ldr	r2, [pc, #48]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	60d3      	str	r3, [r2, #12]
}
 80014e2:	e00e      	b.n	8001502 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF4)
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <DMA1_Stream4_IRQHandler+0xa2>
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <DMA1_Stream4_IRQHandler+0xb0>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80014f6:	4b05      	ldr	r3, [pc, #20]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <DMA1_Stream4_IRQHandler+0xac>)
 80014fc:	f043 0320 	orr.w	r3, r3, #32
 8001500:	60d3      	str	r3, [r2, #12]
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40026000 	.word	0x40026000
 8001510:	2000007c 	.word	0x2000007c

08001514 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8001518:	4b29      	ldr	r3, [pc, #164]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <DMA1_Stream5_IRQHandler+0x24>
	{
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 8001524:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <DMA1_Stream5_IRQHandler+0xb0>)
 8001526:	2201      	movs	r2, #1
 8001528:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800152a:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	4a24      	ldr	r2, [pc, #144]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 8001530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001534:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF5)
	{
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 8001536:	e03e      	b.n	80015b6 <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 8001538:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d009      	beq.n	8001558 <DMA1_Stream5_IRQHandler+0x44>
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <DMA1_Stream5_IRQHandler+0xb0>)
 8001546:	2201      	movs	r2, #1
 8001548:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4a1c      	ldr	r2, [pc, #112]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	60d3      	str	r3, [r2, #12]
}
 8001556:	e02e      	b.n	80015b6 <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF5)
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <DMA1_Stream5_IRQHandler+0x64>
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 8001564:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <DMA1_Stream5_IRQHandler+0xb0>)
 8001566:	2201      	movs	r2, #1
 8001568:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 8001570:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001574:	60d3      	str	r3, [r2, #12]
}
 8001576:	e01e      	b.n	80015b6 <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF5)
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <DMA1_Stream5_IRQHandler+0x84>
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <DMA1_Stream5_IRQHandler+0xb0>)
 8001586:	2201      	movs	r2, #1
 8001588:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4a0c      	ldr	r2, [pc, #48]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 8001590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001594:	60d3      	str	r3, [r2, #12]
}
 8001596:	e00e      	b.n	80015b6 <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <DMA1_Stream5_IRQHandler+0xa2>
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <DMA1_Stream5_IRQHandler+0xb0>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <DMA1_Stream5_IRQHandler+0xac>)
 80015b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015b4:	60d3      	str	r3, [r2, #12]
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40026000 	.word	0x40026000
 80015c4:	20000084 	.word	0x20000084

080015c8 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <DMA1_Stream6_IRQHandler+0x24>
	{
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <DMA1_Stream6_IRQHandler+0xb0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80015de:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF6)
	{
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 80015ea:	e03e      	b.n	800166a <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <DMA1_Stream6_IRQHandler+0x44>
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <DMA1_Stream6_IRQHandler+0xb0>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001608:	60d3      	str	r3, [r2, #12]
}
 800160a:	e02e      	b.n	800166a <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF6)
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <DMA1_Stream6_IRQHandler+0x64>
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <DMA1_Stream6_IRQHandler+0xb0>)
 800161a:	2201      	movs	r2, #1
 800161c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001628:	60d3      	str	r3, [r2, #12]
}
 800162a:	e01e      	b.n	800166a <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF6)
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <DMA1_Stream6_IRQHandler+0x84>
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <DMA1_Stream6_IRQHandler+0xb0>)
 800163a:	2201      	movs	r2, #1
 800163c:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4a0c      	ldr	r2, [pc, #48]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001648:	60d3      	str	r3, [r2, #12]
}
 800164a:	e00e      	b.n	800166a <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF6)
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <DMA1_Stream6_IRQHandler+0xa2>
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8001658:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <DMA1_Stream6_IRQHandler+0xb0>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <DMA1_Stream6_IRQHandler+0xac>)
 8001664:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001668:	60d3      	str	r3, [r2, #12]
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40026000 	.word	0x40026000
 8001678:	2000008c 	.word	0x2000008c

0800167c <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8001680:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <DMA1_Stream7_IRQHandler+0x24>
	{
		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <DMA1_Stream7_IRQHandler+0xb0>)
 800168e:	2201      	movs	r2, #1
 8001690:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001692:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4a24      	ldr	r2, [pc, #144]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 8001698:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800169c:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF7)
	{
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 800169e:	e03e      	b.n	800171e <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 80016a0:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d009      	beq.n	80016c0 <DMA1_Stream7_IRQHandler+0x44>
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <DMA1_Stream7_IRQHandler+0xb0>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016bc:	60d3      	str	r3, [r2, #12]
}
 80016be:	e02e      	b.n	800171e <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF7)
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <DMA1_Stream7_IRQHandler+0x64>
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <DMA1_Stream7_IRQHandler+0xb0>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016dc:	60d3      	str	r3, [r2, #12]
}
 80016de:	e01e      	b.n	800171e <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF7)
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <DMA1_Stream7_IRQHandler+0x84>
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <DMA1_Stream7_IRQHandler+0xb0>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 80016f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016fc:	60d3      	str	r3, [r2, #12]
}
 80016fe:	e00e      	b.n	800171e <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <DMA1_Stream7_IRQHandler+0xa2>
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <DMA1_Stream7_IRQHandler+0xb0>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <DMA1_Stream7_IRQHandler+0xac>)
 8001718:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800171c:	60d3      	str	r3, [r2, #12]
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40026000 	.word	0x40026000
 800172c:	20000094 	.word	0x20000094

08001730 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <DMA2_Stream0_IRQHandler+0x24>
	{
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <DMA2_Stream0_IRQHandler+0xb0>)
 8001742:	2201      	movs	r2, #1
 8001744:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001746:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4a24      	ldr	r2, [pc, #144]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF0)
	{
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 8001752:	e03e      	b.n	80017d2 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d009      	beq.n	8001774 <DMA2_Stream0_IRQHandler+0x44>
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <DMA2_Stream0_IRQHandler+0xb0>)
 8001762:	2201      	movs	r2, #1
 8001764:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001766:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6093      	str	r3, [r2, #8]
}
 8001772:	e02e      	b.n	80017d2 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <DMA2_Stream0_IRQHandler+0x64>
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <DMA2_Stream0_IRQHandler+0xb0>)
 8001782:	2201      	movs	r2, #1
 8001784:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6093      	str	r3, [r2, #8]
}
 8001792:	e01e      	b.n	80017d2 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <DMA2_Stream0_IRQHandler+0x84>
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <DMA2_Stream0_IRQHandler+0xb0>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	6093      	str	r3, [r2, #8]
}
 80017b2:	e00e      	b.n	80017d2 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF0)
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <DMA2_Stream0_IRQHandler+0xa2>
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <DMA2_Stream0_IRQHandler+0xb0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <DMA2_Stream0_IRQHandler+0xac>)
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	6093      	str	r3, [r2, #8]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40026400 	.word	0x40026400
 80017e0:	2000009c 	.word	0x2000009c

080017e4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 80017e8:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <DMA2_Stream1_IRQHandler+0x24>
	{
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <DMA2_Stream1_IRQHandler+0xb0>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80017fa:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4a24      	ldr	r2, [pc, #144]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 8001800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001804:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF1)
	{
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 8001806:	e03e      	b.n	8001886 <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d009      	beq.n	8001828 <DMA2_Stream1_IRQHandler+0x44>
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <DMA2_Stream1_IRQHandler+0xb0>)
 8001816:	2201      	movs	r2, #1
 8001818:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001824:	6093      	str	r3, [r2, #8]
}
 8001826:	e02e      	b.n	8001886 <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <DMA2_Stream1_IRQHandler+0x64>
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <DMA2_Stream1_IRQHandler+0xb0>)
 8001836:	2201      	movs	r2, #1
 8001838:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4a14      	ldr	r2, [pc, #80]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001844:	6093      	str	r3, [r2, #8]
}
 8001846:	e01e      	b.n	8001886 <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <DMA2_Stream1_IRQHandler+0x84>
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <DMA2_Stream1_IRQHandler+0xb0>)
 8001856:	2201      	movs	r2, #1
 8001858:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 8001860:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001864:	6093      	str	r3, [r2, #8]
}
 8001866:	e00e      	b.n	8001886 <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <DMA2_Stream1_IRQHandler+0xa2>
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <DMA2_Stream1_IRQHandler+0xb0>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <DMA2_Stream1_IRQHandler+0xac>)
 8001880:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001884:	6093      	str	r3, [r2, #8]
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40026400 	.word	0x40026400
 8001894:	200000a4 	.word	0x200000a4

08001898 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 800189c:	4b29      	ldr	r3, [pc, #164]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <DMA2_Stream2_IRQHandler+0x24>
	{
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 80018a8:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <DMA2_Stream2_IRQHandler+0xb0>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b8:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF2)
	{
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 80018ba:	e03e      	b.n	800193a <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 80018bc:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <DMA2_Stream2_IRQHandler+0x44>
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <DMA2_Stream2_IRQHandler+0xb0>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d8:	6093      	str	r3, [r2, #8]
}
 80018da:	e02e      	b.n	800193a <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF2)
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <DMA2_Stream2_IRQHandler+0x64>
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 80018e8:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <DMA2_Stream2_IRQHandler+0xb0>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4a14      	ldr	r2, [pc, #80]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018f8:	6093      	str	r3, [r2, #8]
}
 80018fa:	e01e      	b.n	800193a <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF2)
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d009      	beq.n	800191c <DMA2_Stream2_IRQHandler+0x84>
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <DMA2_Stream2_IRQHandler+0xb0>)
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 8001914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001918:	6093      	str	r3, [r2, #8]
}
 800191a:	e00e      	b.n	800193a <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF2)
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <DMA2_Stream2_IRQHandler+0xa2>
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <DMA2_Stream2_IRQHandler+0xb0>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <DMA2_Stream2_IRQHandler+0xac>)
 8001934:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001938:	6093      	str	r3, [r2, #8]
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40026400 	.word	0x40026400
 8001948:	200000ac 	.word	0x200000ac

0800194c <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8001950:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d009      	beq.n	8001970 <DMA2_Stream3_IRQHandler+0x24>
	{
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <DMA2_Stream3_IRQHandler+0xb0>)
 800195e:	2201      	movs	r2, #1
 8001960:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4a24      	ldr	r2, [pc, #144]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 8001968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800196c:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF3)
	{
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 800196e:	e03e      	b.n	80019ee <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <DMA2_Stream3_IRQHandler+0x44>
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <DMA2_Stream3_IRQHandler+0xb0>)
 800197e:	2201      	movs	r2, #1
 8001980:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 8001988:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198c:	6093      	str	r3, [r2, #8]
}
 800198e:	e02e      	b.n	80019ee <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <DMA2_Stream3_IRQHandler+0x64>
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <DMA2_Stream3_IRQHandler+0xb0>)
 800199e:	2201      	movs	r2, #1
 80019a0:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	6093      	str	r3, [r2, #8]
}
 80019ae:	e01e      	b.n	80019ee <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF3)
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <DMA2_Stream3_IRQHandler+0x84>
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <DMA2_Stream3_IRQHandler+0xb0>)
 80019be:	2201      	movs	r2, #1
 80019c0:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019cc:	6093      	str	r3, [r2, #8]
}
 80019ce:	e00e      	b.n	80019ee <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF3)
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <DMA2_Stream3_IRQHandler+0xa2>
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 80019dc:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <DMA2_Stream3_IRQHandler+0xb0>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <DMA2_Stream3_IRQHandler+0xac>)
 80019e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019ec:	6093      	str	r3, [r2, #8]
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40026400 	.word	0x40026400
 80019fc:	200000b4 	.word	0x200000b4

08001a00 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8001a04:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d009      	beq.n	8001a24 <DMA2_Stream4_IRQHandler+0x24>
	{
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <DMA2_Stream4_IRQHandler+0xb0>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8001a16:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a24      	ldr	r2, [pc, #144]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF4)
	{
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 8001a22:	e03e      	b.n	8001aa2 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8001a24:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <DMA2_Stream4_IRQHandler+0x44>
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <DMA2_Stream4_IRQHandler+0xb0>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	60d3      	str	r3, [r2, #12]
}
 8001a42:	e02e      	b.n	8001aa2 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d009      	beq.n	8001a64 <DMA2_Stream4_IRQHandler+0x64>
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <DMA2_Stream4_IRQHandler+0xb0>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	60d3      	str	r3, [r2, #12]
}
 8001a62:	e01e      	b.n	8001aa2 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <DMA2_Stream4_IRQHandler+0x84>
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <DMA2_Stream4_IRQHandler+0xb0>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	60d3      	str	r3, [r2, #12]
}
 8001a82:	e00e      	b.n	8001aa2 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <DMA2_Stream4_IRQHandler+0xa2>
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <DMA2_Stream4_IRQHandler+0xb0>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001a96:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <DMA2_Stream4_IRQHandler+0xac>)
 8001a9c:	f043 0320 	orr.w	r3, r3, #32
 8001aa0:	60d3      	str	r3, [r2, #12]
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40026400 	.word	0x40026400
 8001ab0:	200000bc 	.word	0x200000bc

08001ab4 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <DMA2_Stream5_IRQHandler+0x24>
	{
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <DMA2_Stream5_IRQHandler+0xb0>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ad4:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF5)
	{
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 8001ad6:	e03e      	b.n	8001b56 <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <DMA2_Stream5_IRQHandler+0x44>
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <DMA2_Stream5_IRQHandler+0xb0>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4a1c      	ldr	r2, [pc, #112]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af4:	60d3      	str	r3, [r2, #12]
}
 8001af6:	e02e      	b.n	8001b56 <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <DMA2_Stream5_IRQHandler+0x64>
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <DMA2_Stream5_IRQHandler+0xb0>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b14:	60d3      	str	r3, [r2, #12]
}
 8001b16:	e01e      	b.n	8001b56 <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <DMA2_Stream5_IRQHandler+0x84>
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <DMA2_Stream5_IRQHandler+0xb0>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b34:	60d3      	str	r3, [r2, #12]
}
 8001b36:	e00e      	b.n	8001b56 <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <DMA2_Stream5_IRQHandler+0xa2>
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <DMA2_Stream5_IRQHandler+0xb0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <DMA2_Stream5_IRQHandler+0xac>)
 8001b50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b54:	60d3      	str	r3, [r2, #12]
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40026400 	.word	0x40026400
 8001b64:	200000c4 	.word	0x200000c4

08001b68 <DMA2_Stream6_IRQHandler>:

void DMA2_Stream6_IRQHandler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8001b6c:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <DMA2_Stream6_IRQHandler+0x24>
	{
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <DMA2_Stream6_IRQHandler+0xb0>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001b7e:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4a24      	ldr	r2, [pc, #144]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b88:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF6)
	{
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 8001b8a:	e03e      	b.n	8001c0a <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <DMA2_Stream6_IRQHandler+0x44>
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <DMA2_Stream6_IRQHandler+0xb0>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba8:	60d3      	str	r3, [r2, #12]
}
 8001baa:	e02e      	b.n	8001c0a <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8001bac:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <DMA2_Stream6_IRQHandler+0x64>
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <DMA2_Stream6_IRQHandler+0xb0>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001bc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001bc8:	60d3      	str	r3, [r2, #12]
}
 8001bca:	e01e      	b.n	8001c0a <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d009      	beq.n	8001bec <DMA2_Stream6_IRQHandler+0x84>
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <DMA2_Stream6_IRQHandler+0xb0>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001be4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001be8:	60d3      	str	r3, [r2, #12]
}
 8001bea:	e00e      	b.n	8001c0a <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <DMA2_Stream6_IRQHandler+0xa2>
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <DMA2_Stream6_IRQHandler+0xb0>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <DMA2_Stream6_IRQHandler+0xac>)
 8001c04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c08:	60d3      	str	r3, [r2, #12]
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40026400 	.word	0x40026400
 8001c18:	200000cc 	.word	0x200000cc

08001c1c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <DMA2_Stream7_IRQHandler+0x24>
	{
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <DMA2_Stream7_IRQHandler+0xb0>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001c32:	4b25      	ldr	r3, [pc, #148]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	4a24      	ldr	r2, [pc, #144]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c3c:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF7)
	{
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 8001c3e:	e03e      	b.n	8001cbe <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8001c40:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <DMA2_Stream7_IRQHandler+0x44>
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <DMA2_Stream7_IRQHandler+0xb0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c5c:	60d3      	str	r3, [r2, #12]
}
 8001c5e:	e02e      	b.n	8001cbe <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <DMA2_Stream7_IRQHandler+0x64>
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <DMA2_Stream7_IRQHandler+0xb0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c7c:	60d3      	str	r3, [r2, #12]
}
 8001c7e:	e01e      	b.n	8001cbe <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <DMA2_Stream7_IRQHandler+0x84>
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <DMA2_Stream7_IRQHandler+0xb0>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001c98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c9c:	60d3      	str	r3, [r2, #12]
}
 8001c9e:	e00e      	b.n	8001cbe <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <DMA2_Stream7_IRQHandler+0xa2>
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8001cac:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <DMA2_Stream7_IRQHandler+0xb0>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <DMA2_Stream7_IRQHandler+0xac>)
 8001cb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001cbc:	60d3      	str	r3, [r2, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40026400 	.word	0x40026400
 8001ccc:	200000d4 	.word	0x200000d4

08001cd0 <DMA_Clock_Enable>:
	flag.Transfer_Error_Flag = false;
}


void DMA_Clock_Enable(DMA_Config *config)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d10 <DMA_Clock_Enable+0x40>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d105      	bne.n	8001cee <DMA_Clock_Enable+0x1e>
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <DMA_Clock_Enable+0x44>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d14 <DMA_Clock_Enable+0x44>)
 8001ce8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config -> Request.Controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a09      	ldr	r2, [pc, #36]	@ (8001d18 <DMA_Clock_Enable+0x48>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d105      	bne.n	8001d04 <DMA_Clock_Enable+0x34>
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <DMA_Clock_Enable+0x44>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <DMA_Clock_Enable+0x44>)
 8001cfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d02:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40026000 	.word	0x40026000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40026400 	.word	0x40026400

08001d1c <DMA_Init>:
	if(config -> Request.Controller == DMA1) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA1RST;
	if(config -> Request.Controller == DMA2) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA2RST;
}

int8_t DMA_Init(DMA_Config *config)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ffd3 	bl	8001cd0 <DMA_Clock_Enable>
	config -> Request.Stream -> CR |= config -> Request.channel << DMA_SxCR_CHSEL_Pos;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7a1b      	ldrb	r3, [r3, #8]
 8001d34:	065a      	lsls	r2, r3, #25
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> circular_mode;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> flow_control;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> priority_level;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	6819      	ldr	r1, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> memory_data_size;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> transfer_direction;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

	if( (config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Complete) ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2210      	movs	r2, #16
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d014      	beq.n	8001dde <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete) ||
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2208      	movs	r2, #8
	if( (config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Complete) ||
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00f      	beq.n	8001dde <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Error) ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2204      	movs	r2, #4
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete) ||
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00a      	beq.n	8001dde <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Direct_Mode_Error) ||
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2202      	movs	r2, #2
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Error) ||
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d005      	beq.n	8001dde <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2280      	movs	r2, #128	@ 0x80
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Direct_Mode_Error) ||
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	f040 80b0 	bne.w	8001f3e <DMA_Init+0x222>
	  )
	{
		if(config->interrupts == DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2280      	movs	r2, #128	@ 0x80
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d108      	bne.n	8001dfa <DMA_Init+0xde>
		{
			config -> Request.Stream -> FCR |= config -> interrupts;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	6959      	ldr	r1, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	615a      	str	r2, [r3, #20]
		}

		config -> Request.Stream -> CR |= config -> interrupts;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

		if(config->Request.Controller == DMA1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a67      	ldr	r2, [pc, #412]	@ (8001fb0 <DMA_Init+0x294>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d147      	bne.n	8001ea6 <DMA_Init+0x18a>
		{
			if(config->Request.Stream == DMA1_Stream0) 	        NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a66      	ldr	r2, [pc, #408]	@ (8001fb4 <DMA_Init+0x298>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d103      	bne.n	8001e28 <DMA_Init+0x10c>
 8001e20:	200b      	movs	r0, #11
 8001e22:	f7ff f997 	bl	8001154 <__NVIC_EnableIRQ>
 8001e26:	e08a      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream1) 	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a62      	ldr	r2, [pc, #392]	@ (8001fb8 <DMA_Init+0x29c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d103      	bne.n	8001e3a <DMA_Init+0x11e>
 8001e32:	200c      	movs	r0, #12
 8001e34:	f7ff f98e 	bl	8001154 <__NVIC_EnableIRQ>
 8001e38:	e081      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream2) 	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8001fbc <DMA_Init+0x2a0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d103      	bne.n	8001e4c <DMA_Init+0x130>
 8001e44:	200d      	movs	r0, #13
 8001e46:	f7ff f985 	bl	8001154 <__NVIC_EnableIRQ>
 8001e4a:	e078      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream3) 	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc0 <DMA_Init+0x2a4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d103      	bne.n	8001e5e <DMA_Init+0x142>
 8001e56:	200e      	movs	r0, #14
 8001e58:	f7ff f97c 	bl	8001154 <__NVIC_EnableIRQ>
 8001e5c:	e06f      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream4) 	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a58      	ldr	r2, [pc, #352]	@ (8001fc4 <DMA_Init+0x2a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d103      	bne.n	8001e70 <DMA_Init+0x154>
 8001e68:	200f      	movs	r0, #15
 8001e6a:	f7ff f973 	bl	8001154 <__NVIC_EnableIRQ>
 8001e6e:	e066      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream5) 	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a54      	ldr	r2, [pc, #336]	@ (8001fc8 <DMA_Init+0x2ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d103      	bne.n	8001e82 <DMA_Init+0x166>
 8001e7a:	2010      	movs	r0, #16
 8001e7c:	f7ff f96a 	bl	8001154 <__NVIC_EnableIRQ>
 8001e80:	e05d      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream6) 	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4a51      	ldr	r2, [pc, #324]	@ (8001fcc <DMA_Init+0x2b0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d103      	bne.n	8001e94 <DMA_Init+0x178>
 8001e8c:	2011      	movs	r0, #17
 8001e8e:	f7ff f961 	bl	8001154 <__NVIC_EnableIRQ>
 8001e92:	e054      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream7) 	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd0 <DMA_Init+0x2b4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d14f      	bne.n	8001f3e <DMA_Init+0x222>
 8001e9e:	202f      	movs	r0, #47	@ 0x2f
 8001ea0:	f7ff f958 	bl	8001154 <__NVIC_EnableIRQ>
 8001ea4:	e04b      	b.n	8001f3e <DMA_Init+0x222>
		}
		else if(config->Request.Controller == DMA2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd4 <DMA_Init+0x2b8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d146      	bne.n	8001f3e <DMA_Init+0x222>
		{
			if(config->Request.Stream == DMA2_Stream0) 	        NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a48      	ldr	r2, [pc, #288]	@ (8001fd8 <DMA_Init+0x2bc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <DMA_Init+0x1a6>
 8001eba:	2038      	movs	r0, #56	@ 0x38
 8001ebc:	f7ff f94a 	bl	8001154 <__NVIC_EnableIRQ>
 8001ec0:	e03d      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream1) 	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a45      	ldr	r2, [pc, #276]	@ (8001fdc <DMA_Init+0x2c0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <DMA_Init+0x1b8>
 8001ecc:	2039      	movs	r0, #57	@ 0x39
 8001ece:	f7ff f941 	bl	8001154 <__NVIC_EnableIRQ>
 8001ed2:	e034      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream2) 	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a41      	ldr	r2, [pc, #260]	@ (8001fe0 <DMA_Init+0x2c4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d103      	bne.n	8001ee6 <DMA_Init+0x1ca>
 8001ede:	203a      	movs	r0, #58	@ 0x3a
 8001ee0:	f7ff f938 	bl	8001154 <__NVIC_EnableIRQ>
 8001ee4:	e02b      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream3) 	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe4 <DMA_Init+0x2c8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d103      	bne.n	8001ef8 <DMA_Init+0x1dc>
 8001ef0:	203b      	movs	r0, #59	@ 0x3b
 8001ef2:	f7ff f92f 	bl	8001154 <__NVIC_EnableIRQ>
 8001ef6:	e022      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream4) 	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a3a      	ldr	r2, [pc, #232]	@ (8001fe8 <DMA_Init+0x2cc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d103      	bne.n	8001f0a <DMA_Init+0x1ee>
 8001f02:	203c      	movs	r0, #60	@ 0x3c
 8001f04:	f7ff f926 	bl	8001154 <__NVIC_EnableIRQ>
 8001f08:	e019      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream5) 	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a37      	ldr	r2, [pc, #220]	@ (8001fec <DMA_Init+0x2d0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d103      	bne.n	8001f1c <DMA_Init+0x200>
 8001f14:	2044      	movs	r0, #68	@ 0x44
 8001f16:	f7ff f91d 	bl	8001154 <__NVIC_EnableIRQ>
 8001f1a:	e010      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream6) 	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a33      	ldr	r2, [pc, #204]	@ (8001ff0 <DMA_Init+0x2d4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d103      	bne.n	8001f2e <DMA_Init+0x212>
 8001f26:	2045      	movs	r0, #69	@ 0x45
 8001f28:	f7ff f914 	bl	8001154 <__NVIC_EnableIRQ>
 8001f2c:	e007      	b.n	8001f3e <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream7) 	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a30      	ldr	r2, [pc, #192]	@ (8001ff4 <DMA_Init+0x2d8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d102      	bne.n	8001f3e <DMA_Init+0x222>
 8001f38:	2046      	movs	r0, #70	@ 0x46
 8001f3a:	f7ff f90b 	bl	8001154 <__NVIC_EnableIRQ>
		}
	}

	config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8c1b      	ldrh	r3, [r3, #32]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> peripheral_pointer_increment;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d108      	bne.n	8001f84 <DMA_Init+0x268>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e010      	b.n	8001fa6 <DMA_Init+0x28a>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d108      	bne.n	8001fa0 <DMA_Init+0x284>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e002      	b.n	8001fa6 <DMA_Init+0x28a>
	}
	else {return -1;}
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	e000      	b.n	8001fa8 <DMA_Init+0x28c>

	return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40026000 	.word	0x40026000
 8001fb4:	40026010 	.word	0x40026010
 8001fb8:	40026028 	.word	0x40026028
 8001fbc:	40026040 	.word	0x40026040
 8001fc0:	40026058 	.word	0x40026058
 8001fc4:	40026070 	.word	0x40026070
 8001fc8:	40026088 	.word	0x40026088
 8001fcc:	400260a0 	.word	0x400260a0
 8001fd0:	400260b8 	.word	0x400260b8
 8001fd4:	40026400 	.word	0x40026400
 8001fd8:	40026410 	.word	0x40026410
 8001fdc:	40026428 	.word	0x40026428
 8001fe0:	40026440 	.word	0x40026440
 8001fe4:	40026458 	.word	0x40026458
 8001fe8:	40026470 	.word	0x40026470
 8001fec:	40026488 	.word	0x40026488
 8001ff0:	400264a0 	.word	0x400264a0
 8001ff4:	400264b8 	.word	0x400264b8

08001ff8 <DMA_Set_Target>:

void DMA_Set_Target(DMA_Config *config)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800200e:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> memory_data_size;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
	config -> Request.Stream ->NDTR = config -> buffer_length;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	605a      	str	r2, [r3, #4]
	config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8c1b      	ldrh	r3, [r3, #32]
 8002048:	4619      	mov	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
	config -> Request.Stream ->M0AR = (uint32_t)config->memory_address;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800205a:	60da      	str	r2, [r3, #12]
	config -> Request.Stream ->PAR = (uint32_t)config->peripheral_address;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002064:	609a      	str	r2, [r3, #8]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <DMA_Set_Trigger>:


void DMA_Set_Trigger(DMA_Config *config)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)   {
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	4a43      	ldr	r2, [pc, #268]	@ (8002198 <DMA_Set_Trigger+0x124>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <DMA_Set_Trigger+0x24>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4a42      	ldr	r2, [pc, #264]	@ (800219c <DMA_Set_Trigger+0x128>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d178      	bne.n	800218a <DMA_Set_Trigger+0x116>
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4a41      	ldr	r2, [pc, #260]	@ (80021a0 <DMA_Set_Trigger+0x12c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d918      	bls.n	80020d2 <DMA_Set_Trigger+0x5e>
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4a40      	ldr	r2, [pc, #256]	@ (80021a4 <DMA_Set_Trigger+0x130>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d814      	bhi.n	80020d2 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4b3f      	ldr	r3, [pc, #252]	@ (80021a8 <DMA_Set_Trigger+0x134>)
 80020ac:	4413      	add	r3, r2
 80020ae:	10db      	asrs	r3, r3, #3
 80020b0:	4a3e      	ldr	r2, [pc, #248]	@ (80021ac <DMA_Set_Trigger+0x138>)
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <DMA_Set_Trigger+0x13c>)
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	213f      	movs	r1, #63	@ 0x3f
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	431a      	orrs	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e055      	b.n	800217e <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4a37      	ldr	r2, [pc, #220]	@ (80021b4 <DMA_Set_Trigger+0x140>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d918      	bls.n	800210c <DMA_Set_Trigger+0x98>
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4a36      	ldr	r2, [pc, #216]	@ (80021b8 <DMA_Set_Trigger+0x144>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d814      	bhi.n	800210c <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <DMA_Set_Trigger+0x148>)
 80020e6:	4413      	add	r3, r2
 80020e8:	10db      	asrs	r3, r3, #3
 80020ea:	4a30      	ldr	r2, [pc, #192]	@ (80021ac <DMA_Set_Trigger+0x138>)
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b33      	ldr	r3, [pc, #204]	@ (80021c0 <DMA_Set_Trigger+0x14c>)
 80020f4:	5c9b      	ldrb	r3, [r3, r2]
 80020f6:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	213f      	movs	r1, #63	@ 0x3f
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	e038      	b.n	800217e <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <DMA_Set_Trigger+0x150>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d918      	bls.n	8002146 <DMA_Set_Trigger+0xd2>
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4a2c      	ldr	r2, [pc, #176]	@ (80021c8 <DMA_Set_Trigger+0x154>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d814      	bhi.n	8002146 <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <DMA_Set_Trigger+0x158>)
 8002120:	4413      	add	r3, r2
 8002122:	10db      	asrs	r3, r3, #3
 8002124:	4a21      	ldr	r2, [pc, #132]	@ (80021ac <DMA_Set_Trigger+0x138>)
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	461a      	mov	r2, r3
 800212c:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <DMA_Set_Trigger+0x13c>)
 800212e:	5c9b      	ldrb	r3, [r3, r2]
 8002130:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	213f      	movs	r1, #63	@ 0x3f
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	431a      	orrs	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	e01b      	b.n	800217e <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <DMA_Set_Trigger+0x15c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d917      	bls.n	800217e <DMA_Set_Trigger+0x10a>
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4a20      	ldr	r2, [pc, #128]	@ (80021d4 <DMA_Set_Trigger+0x160>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d813      	bhi.n	800217e <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <DMA_Set_Trigger+0x164>)
 800215a:	4413      	add	r3, r2
 800215c:	10db      	asrs	r3, r3, #3
 800215e:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <DMA_Set_Trigger+0x138>)
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	461a      	mov	r2, r3
 8002166:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <DMA_Set_Trigger+0x14c>)
 8002168:	5c9b      	ldrb	r3, [r3, r2]
 800216a:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	213f      	movs	r1, #63	@ 0x3f
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	601a      	str	r2, [r3, #0]
    }
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40026000 	.word	0x40026000
 800219c:	40026400 	.word	0x40026400
 80021a0:	4002600f 	.word	0x4002600f
 80021a4:	40026058 	.word	0x40026058
 80021a8:	bffd9ff0 	.word	0xbffd9ff0
 80021ac:	aaaaaaab 	.word	0xaaaaaaab
 80021b0:	08002eb4 	.word	0x08002eb4
 80021b4:	4002606f 	.word	0x4002606f
 80021b8:	400260b8 	.word	0x400260b8
 80021bc:	bffd9f90 	.word	0xbffd9f90
 80021c0:	08002eb8 	.word	0x08002eb8
 80021c4:	4002640f 	.word	0x4002640f
 80021c8:	40026458 	.word	0x40026458
 80021cc:	bffd9bf0 	.word	0xbffd9bf0
 80021d0:	4002646f 	.word	0x4002646f
 80021d4:	400264b8 	.word	0x400264b8
 80021d8:	bffd9b90 	.word	0xbffd9b90

080021dc <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a25      	ldr	r2, [pc, #148]	@ (800227c <GPIO_Clock_Enable+0xa0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d106      	bne.n	80021fa <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80021ec:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f8:	e039      	b.n	800226e <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <GPIO_Clock_Enable+0xa8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d106      	bne.n	8002210 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8002202:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	e02e      	b.n	800226e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a1d      	ldr	r2, [pc, #116]	@ (8002288 <GPIO_Clock_Enable+0xac>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d106      	bne.n	8002226 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8002218:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	4a18      	ldr	r2, [pc, #96]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6313      	str	r3, [r2, #48]	@ 0x30
 8002224:	e023      	b.n	800226e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a18      	ldr	r2, [pc, #96]	@ (800228c <GPIO_Clock_Enable+0xb0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d106      	bne.n	800223c <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a13      	ldr	r2, [pc, #76]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	e018      	b.n	800226e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <GPIO_Clock_Enable+0xb4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d106      	bne.n	8002252 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8002244:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002250:	e00d      	b.n	800226e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <GPIO_Clock_Enable+0xb8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d106      	bne.n	8002268 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <GPIO_Clock_Enable+0xa4>)
 8002260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	e002      	b.n	800226e <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	e000      	b.n	8002270 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40020000 	.word	0x40020000
 8002280:	40023800 	.word	0x40023800
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40021c00 	.word	0x40021c00

08002298 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	70fb      	strb	r3, [r7, #3]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70bb      	strb	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff92 	bl	80021dc <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78b9      	ldrb	r1, [r7, #2]
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	0052      	lsls	r2, r2, #1
 80022c2:	fa01 f202 	lsl.w	r2, r1, r2
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 80022cc:	2202      	movs	r2, #2
 80022ce:	787b      	ldrb	r3, [r7, #1]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d008      	beq.n	80022e6 <GPIO_Pin_Init+0x4e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	7879      	ldrb	r1, [r7, #1]
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	fa01 f202 	lsl.w	r2, r1, r2
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 80022e6:	2204      	movs	r2, #4
 80022e8:	7c3b      	ldrb	r3, [r7, #16]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <GPIO_Pin_Init+0x6a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	7c39      	ldrb	r1, [r7, #16]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	0052      	lsls	r2, r2, #1
 80022f8:	fa01 f202 	lsl.w	r2, r1, r2
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 8002302:	2204      	movs	r2, #4
 8002304:	7d3b      	ldrb	r3, [r7, #20]
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <GPIO_Pin_Init+0x86>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	7d39      	ldrb	r1, [r7, #20]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	0052      	lsls	r2, r2, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	2b07      	cmp	r3, #7
 8002322:	d80a      	bhi.n	800233a <GPIO_Pin_Init+0xa2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	7e39      	ldrb	r1, [r7, #24]
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8002338:	e00a      	b.n	8002350 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	7e39      	ldrb	r1, [r7, #24]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	3a08      	subs	r2, #8
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f7ff ffc2 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <MCU_Clock_Setup>:
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	uint8_t pll_m = 8;
 80023f6:	2308      	movs	r3, #8
 80023f8:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80023fa:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80023fe:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8002404:	2307      	movs	r3, #7
 8002406:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8002408:	4b3c      	ldr	r3, [pc, #240]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3a      	ldr	r2, [pc, #232]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800241a:	bf00      	nop
 800241c:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f9      	beq.n	800241c <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8002428:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	4a33      	ldr	r2, [pc, #204]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002432:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8002434:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <MCU_Clock_Setup+0x110>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a31      	ldr	r2, [pc, #196]	@ (8002500 <MCU_Clock_Setup+0x110>)
 800243a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800243e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8002440:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <MCU_Clock_Setup+0x114>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2f      	ldr	r2, [pc, #188]	@ (8002504 <MCU_Clock_Setup+0x114>)
 8002446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800244a:	f043 0305 	orr.w	r3, r3, #5
 800244e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8002450:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	78ba      	ldrb	r2, [r7, #2]
 8002456:	0611      	lsls	r1, r2, #24
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	0412      	lsls	r2, r2, #16
 800245c:	4311      	orrs	r1, r2
 800245e:	88ba      	ldrh	r2, [r7, #4]
 8002460:	0192      	lsls	r2, r2, #6
 8002462:	4311      	orrs	r1, r2
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	430a      	orrs	r2, r1
 8002468:	4611      	mov	r1, r2
 800246a:	4a24      	ldr	r2, [pc, #144]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800246c:	430b      	orrs	r3, r1
 800246e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a21      	ldr	r2, [pc, #132]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002476:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800247a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800247c:	4b1f      	ldr	r3, [pc, #124]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800247e:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002484:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800248a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800248e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 8002496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800249a:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800249c:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80024a8:	bf00      	nop
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f9      	beq.n	80024aa <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80024b6:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4a10      	ldr	r2, [pc, #64]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80024c2:	bf00      	nop
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d1f9      	bne.n	80024c4 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 80024d0:	f000 fa18 	bl	8002904 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <MCU_Clock_Setup+0x118>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <MCU_Clock_Setup+0x11c>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff62 	bl	80023ac <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 80024ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ec:	4a03      	ldr	r2, [pc, #12]	@ (80024fc <MCU_Clock_Setup+0x10c>)
 80024ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	40023c00 	.word	0x40023c00
 8002508:	20000000 	.word	0x20000000
 800250c:	18618619 	.word	0x18618619

08002510 <Delay_Config>:
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <Delay_Config+0x2c>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <Delay_Config+0x2c>)
 800251c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002520:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <Delay_Config+0x2c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8002528:	4b04      	ldr	r3, [pc, #16]	@ (800253c <Delay_Config+0x2c>)
 800252a:	2205      	movs	r2, #5
 800252c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <Delay_ms>:
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800254a:	edd7 7a01 	vldr	s15, [r7, #4]
 800254e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002594 <Delay_ms+0x54>
 8002552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255a:	ee17 3a90 	vmov	r3, s15
 800255e:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8002560:	4a0d      	ldr	r2, [pc, #52]	@ (8002598 <Delay_ms+0x58>)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8002566:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <Delay_ms+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 800256c:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <Delay_ms+0x58>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <Delay_ms+0x58>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8002578:	bf00      	nop
 800257a:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <Delay_ms+0x58>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f9      	beq.n	800257a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	48241000 	.word	0x48241000
 8002598:	e000e010 	.word	0xe000e010

0800259c <Delay_milli>:
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 80025a6:	e00b      	b.n	80025c0 <Delay_milli+0x24>
		Delay_ms(1);
 80025a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80025ac:	f7ff ffc8 	bl	8002540 <Delay_ms>
	for (; ms>0; ms--)
 80025b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80025c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	dcec      	bgt.n	80025a8 <Delay_milli+0xc>
	return ms;
 80025ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d6:	ee17 3a90 	vmov	r3, s15
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <main>:
bool Joystick_2_Right = 0;



int main(void)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 80025ea:	f7ff ff01 	bl	80023f0 <MCU_Clock_Setup>
	Delay_Config();
 80025ee:	f7ff ff8f 	bl	8002510 <Delay_Config>

	GPIO_Pin_Init(GPIOD, 12,
			GPIO_Configuration.Mode.General_Purpose_Output,
 80025f2:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 80025f4:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 80025f6:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.No_Pull_Up_Down,
 80025f8:	2200      	movs	r2, #0
			GPIO_Configuration.Alternate_Functions.None);
 80025fa:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12,
 80025fc:	9102      	str	r1, [sp, #8]
 80025fe:	9201      	str	r2, [sp, #4]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4623      	mov	r3, r4
 8002604:	4602      	mov	r2, r0
 8002606:	210c      	movs	r1, #12
 8002608:	48a8      	ldr	r0, [pc, #672]	@ (80028ac <main+0x2c8>)
 800260a:	f7ff fe45 	bl	8002298 <GPIO_Pin_Init>

	Joystick.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 800260e:	2201      	movs	r2, #1
 8002610:	4ba7      	ldr	r3, [pc, #668]	@ (80028b0 <main+0x2cc>)
 8002612:	729a      	strb	r2, [r3, #10]
	Joystick.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8002614:	2200      	movs	r2, #0
 8002616:	4ba6      	ldr	r3, [pc, #664]	@ (80028b0 <main+0x2cc>)
 8002618:	731a      	strb	r2, [r3, #12]
	Joystick.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 800261a:	2200      	movs	r2, #0
 800261c:	4ba4      	ldr	r3, [pc, #656]	@ (80028b0 <main+0x2cc>)
 800261e:	72da      	strb	r2, [r3, #11]

	Joystick.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 8002620:	2201      	movs	r2, #1
 8002622:	4ba3      	ldr	r3, [pc, #652]	@ (80028b0 <main+0x2cc>)
 8002624:	735a      	strb	r2, [r3, #13]
	Joystick.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8002626:	2200      	movs	r2, #0
 8002628:	4ba1      	ldr	r3, [pc, #644]	@ (80028b0 <main+0x2cc>)
 800262a:	73da      	strb	r2, [r3, #15]
	Joystick.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 800262c:	2201      	movs	r2, #1
 800262e:	4ba0      	ldr	r3, [pc, #640]	@ (80028b0 <main+0x2cc>)
 8002630:	739a      	strb	r2, [r3, #14]

	Joystick.Channel_2.Enable = ADC_Configuration.Channel.Enable.Enable;
 8002632:	2201      	movs	r2, #1
 8002634:	4b9e      	ldr	r3, [pc, #632]	@ (80028b0 <main+0x2cc>)
 8002636:	741a      	strb	r2, [r3, #16]
	Joystick.Channel_2.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8002638:	2200      	movs	r2, #0
 800263a:	4b9d      	ldr	r3, [pc, #628]	@ (80028b0 <main+0x2cc>)
 800263c:	749a      	strb	r2, [r3, #18]
	Joystick.Channel_2.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_3;
 800263e:	2202      	movs	r2, #2
 8002640:	4b9b      	ldr	r3, [pc, #620]	@ (80028b0 <main+0x2cc>)
 8002642:	745a      	strb	r2, [r3, #17]

	Joystick.Channel_3.Enable = ADC_Configuration.Channel.Enable.Enable;
 8002644:	2201      	movs	r2, #1
 8002646:	4b9a      	ldr	r3, [pc, #616]	@ (80028b0 <main+0x2cc>)
 8002648:	74da      	strb	r2, [r3, #19]
	Joystick.Channel_3.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 800264a:	2200      	movs	r2, #0
 800264c:	4b98      	ldr	r3, [pc, #608]	@ (80028b0 <main+0x2cc>)
 800264e:	755a      	strb	r2, [r3, #21]
	Joystick.Channel_3.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_4;
 8002650:	2203      	movs	r2, #3
 8002652:	4b97      	ldr	r3, [pc, #604]	@ (80028b0 <main+0x2cc>)
 8002654:	751a      	strb	r2, [r3, #20]

	Joystick.Channel_Type = ADC_Configuration.Channel_Type.Regular;
 8002656:	2200      	movs	r2, #0
 8002658:	4b95      	ldr	r3, [pc, #596]	@ (80028b0 <main+0x2cc>)
 800265a:	719a      	strb	r2, [r3, #6]
	Joystick.Conversion_Mode = ADC_Configuration.Conversion_Mode.Single;
 800265c:	2201      	movs	r2, #1
 800265e:	4b94      	ldr	r3, [pc, #592]	@ (80028b0 <main+0x2cc>)
 8002660:	715a      	strb	r2, [r3, #5]
	Joystick.Data_Alignment = ADC_Configuration.Data_Alignment.Right_Justified;
 8002662:	2200      	movs	r2, #0
 8002664:	4b92      	ldr	r3, [pc, #584]	@ (80028b0 <main+0x2cc>)
 8002666:	711a      	strb	r2, [r3, #4]
//	Joystick.External_Trigger.Enable = DISABLE;
	Joystick.Port = ADC_Configuration.Port._ADC1_;
 8002668:	4a92      	ldr	r2, [pc, #584]	@ (80028b4 <main+0x2d0>)
 800266a:	4b91      	ldr	r3, [pc, #580]	@ (80028b0 <main+0x2cc>)
 800266c:	601a      	str	r2, [r3, #0]
	Joystick.Resolution = ADC_Configuration.Resolution.Bit_12;
 800266e:	2200      	movs	r2, #0
 8002670:	4b8f      	ldr	r3, [pc, #572]	@ (80028b0 <main+0x2cc>)
 8002672:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	Joystick.External_Trigger.Enable = ENABLE;
 8002676:	4b8e      	ldr	r3, [pc, #568]	@ (80028b0 <main+0x2cc>)
 8002678:	2201      	movs	r2, #1
 800267a:	71da      	strb	r2, [r3, #7]
	Joystick.External_Trigger.Trigger_Event = ADC_Configuration.Regular_External_Trigger_Event.Timer_2_TRGO;
 800267c:	2206      	movs	r2, #6
 800267e:	4b8c      	ldr	r3, [pc, #560]	@ (80028b0 <main+0x2cc>)
 8002680:	721a      	strb	r2, [r3, #8]

	ADC_Init(&Joystick);
 8002682:	488b      	ldr	r0, [pc, #556]	@ (80028b0 <main+0x2cc>)
 8002684:	f7fe fb72 	bl	8000d6c <ADC_Init>
	ADC_Start_Capture(&Joystick, Joystick_Data_Buffer);
 8002688:	498b      	ldr	r1, [pc, #556]	@ (80028b8 <main+0x2d4>)
 800268a:	4889      	ldr	r0, [pc, #548]	@ (80028b0 <main+0x2cc>)
 800268c:	f7fe fd20 	bl	80010d0 <ADC_Start_Capture>
	TIM1 -> CR1 |= TIM_CR1_CEN;
 8002690:	4b8a      	ldr	r3, [pc, #552]	@ (80028bc <main+0x2d8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a89      	ldr	r2, [pc, #548]	@ (80028bc <main+0x2d8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6013      	str	r3, [r2, #0]


	for(;;)
	{
		Joystick_1_UP = 0;
 800269c:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <main+0x2dc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
		Joystick_1_Down = 0;
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <main+0x2e0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
		Joystick_1_Left = 0;
 80026a8:	4b87      	ldr	r3, [pc, #540]	@ (80028c8 <main+0x2e4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
		Joystick_1_Right = 0;
 80026ae:	4b87      	ldr	r3, [pc, #540]	@ (80028cc <main+0x2e8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]

		Joystick_2_UP = 0;
 80026b4:	4b86      	ldr	r3, [pc, #536]	@ (80028d0 <main+0x2ec>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
		Joystick_2_Down = 0;
 80026ba:	4b86      	ldr	r3, [pc, #536]	@ (80028d4 <main+0x2f0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
		Joystick_2_Left = 0;
 80026c0:	4b85      	ldr	r3, [pc, #532]	@ (80028d8 <main+0x2f4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
		Joystick_2_Right = 0;
 80026c6:	4b85      	ldr	r3, [pc, #532]	@ (80028dc <main+0x2f8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

		if(Joystick_Data_Buffer[0] > 2000)
 80026cc:	4b7a      	ldr	r3, [pc, #488]	@ (80028b8 <main+0x2d4>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80026d4:	d917      	bls.n	8002706 <main+0x122>
		{
			Joystick_1_Left = 1;
 80026d6:	4b7c      	ldr	r3, [pc, #496]	@ (80028c8 <main+0x2e4>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
			Joystick_1_UP = 0;
 80026dc:	4b78      	ldr	r3, [pc, #480]	@ (80028c0 <main+0x2dc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
			Joystick_1_Down = 0;
 80026e2:	4b78      	ldr	r3, [pc, #480]	@ (80028c4 <main+0x2e0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
			Joystick_1_Right = 0;
 80026e8:	4b78      	ldr	r3, [pc, #480]	@ (80028cc <main+0x2e8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

			Joystick_2_UP = 0;
 80026ee:	4b78      	ldr	r3, [pc, #480]	@ (80028d0 <main+0x2ec>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
			Joystick_2_Down = 0;
 80026f4:	4b77      	ldr	r3, [pc, #476]	@ (80028d4 <main+0x2f0>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
			Joystick_2_Left = 0;
 80026fa:	4b77      	ldr	r3, [pc, #476]	@ (80028d8 <main+0x2f4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
			Joystick_2_Right = 0;
 8002700:	4b76      	ldr	r3, [pc, #472]	@ (80028dc <main+0x2f8>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
		}
		if(Joystick_Data_Buffer[0] < 1800)
 8002706:	4b6c      	ldr	r3, [pc, #432]	@ (80028b8 <main+0x2d4>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800270e:	d217      	bcs.n	8002740 <main+0x15c>
		{
			Joystick_1_Right = 1;
 8002710:	4b6e      	ldr	r3, [pc, #440]	@ (80028cc <main+0x2e8>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
			Joystick_1_UP = 0;
 8002716:	4b6a      	ldr	r3, [pc, #424]	@ (80028c0 <main+0x2dc>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
			Joystick_1_Down = 0;
 800271c:	4b69      	ldr	r3, [pc, #420]	@ (80028c4 <main+0x2e0>)
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
			Joystick_1_Left = 0;
 8002722:	4b69      	ldr	r3, [pc, #420]	@ (80028c8 <main+0x2e4>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
//			Joystick_1_Right = 0;

			Joystick_2_UP = 0;
 8002728:	4b69      	ldr	r3, [pc, #420]	@ (80028d0 <main+0x2ec>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
			Joystick_2_Down = 0;
 800272e:	4b69      	ldr	r3, [pc, #420]	@ (80028d4 <main+0x2f0>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
			Joystick_2_Left = 0;
 8002734:	4b68      	ldr	r3, [pc, #416]	@ (80028d8 <main+0x2f4>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
			Joystick_2_Right = 0;
 800273a:	4b68      	ldr	r3, [pc, #416]	@ (80028dc <main+0x2f8>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
		}
		if(Joystick_Data_Buffer[1] > 2000)
 8002740:	4b5d      	ldr	r3, [pc, #372]	@ (80028b8 <main+0x2d4>)
 8002742:	885b      	ldrh	r3, [r3, #2]
 8002744:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002748:	d917      	bls.n	800277a <main+0x196>
		{
			Joystick_1_UP = 1;
 800274a:	4b5d      	ldr	r3, [pc, #372]	@ (80028c0 <main+0x2dc>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
//			Joystick_1_UP = 0;
			Joystick_1_Down = 0;
 8002750:	4b5c      	ldr	r3, [pc, #368]	@ (80028c4 <main+0x2e0>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
			Joystick_1_Left = 0;
 8002756:	4b5c      	ldr	r3, [pc, #368]	@ (80028c8 <main+0x2e4>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
			Joystick_1_Right = 0;
 800275c:	4b5b      	ldr	r3, [pc, #364]	@ (80028cc <main+0x2e8>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]

			Joystick_2_UP = 0;
 8002762:	4b5b      	ldr	r3, [pc, #364]	@ (80028d0 <main+0x2ec>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
			Joystick_2_Down = 0;
 8002768:	4b5a      	ldr	r3, [pc, #360]	@ (80028d4 <main+0x2f0>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
			Joystick_2_Left = 0;
 800276e:	4b5a      	ldr	r3, [pc, #360]	@ (80028d8 <main+0x2f4>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
			Joystick_2_Right = 0;
 8002774:	4b59      	ldr	r3, [pc, #356]	@ (80028dc <main+0x2f8>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
		}
		if(Joystick_Data_Buffer[1] < 1800)
 800277a:	4b4f      	ldr	r3, [pc, #316]	@ (80028b8 <main+0x2d4>)
 800277c:	885b      	ldrh	r3, [r3, #2]
 800277e:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8002782:	d217      	bcs.n	80027b4 <main+0x1d0>
		{
			Joystick_1_Down = 1;
 8002784:	4b4f      	ldr	r3, [pc, #316]	@ (80028c4 <main+0x2e0>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
			Joystick_1_UP = 0;
 800278a:	4b4d      	ldr	r3, [pc, #308]	@ (80028c0 <main+0x2dc>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
//			Joystick_1_Down = 0;
			Joystick_1_Left = 0;
 8002790:	4b4d      	ldr	r3, [pc, #308]	@ (80028c8 <main+0x2e4>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
			Joystick_1_Right = 0;
 8002796:	4b4d      	ldr	r3, [pc, #308]	@ (80028cc <main+0x2e8>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

			Joystick_2_UP = 0;
 800279c:	4b4c      	ldr	r3, [pc, #304]	@ (80028d0 <main+0x2ec>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
			Joystick_2_Down = 0;
 80027a2:	4b4c      	ldr	r3, [pc, #304]	@ (80028d4 <main+0x2f0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
			Joystick_2_Left = 0;
 80027a8:	4b4b      	ldr	r3, [pc, #300]	@ (80028d8 <main+0x2f4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
			Joystick_2_Right = 0;
 80027ae:	4b4b      	ldr	r3, [pc, #300]	@ (80028dc <main+0x2f8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
		}


		if(Joystick_Data_Buffer[2] > 2000)
 80027b4:	4b40      	ldr	r3, [pc, #256]	@ (80028b8 <main+0x2d4>)
 80027b6:	889b      	ldrh	r3, [r3, #4]
 80027b8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027bc:	d917      	bls.n	80027ee <main+0x20a>
		{
			Joystick_2_Left = 1;
 80027be:	4b46      	ldr	r3, [pc, #280]	@ (80028d8 <main+0x2f4>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
			Joystick_1_UP = 0;
 80027c4:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <main+0x2dc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
			Joystick_1_Down = 0;
 80027ca:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <main+0x2e0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
			Joystick_1_Left = 0;
 80027d0:	4b3d      	ldr	r3, [pc, #244]	@ (80028c8 <main+0x2e4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
			Joystick_1_Right = 0;
 80027d6:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <main+0x2e8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]

			Joystick_2_UP = 0;
 80027dc:	4b3c      	ldr	r3, [pc, #240]	@ (80028d0 <main+0x2ec>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
			Joystick_2_Down = 0;
 80027e2:	4b3c      	ldr	r3, [pc, #240]	@ (80028d4 <main+0x2f0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
//			Joystick_2_Left = 0;
			Joystick_2_Right = 0;
 80027e8:	4b3c      	ldr	r3, [pc, #240]	@ (80028dc <main+0x2f8>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
		}
		if(Joystick_Data_Buffer[2] < 1500)
 80027ee:	4b32      	ldr	r3, [pc, #200]	@ (80028b8 <main+0x2d4>)
 80027f0:	889b      	ldrh	r3, [r3, #4]
 80027f2:	f240 52db 	movw	r2, #1499	@ 0x5db
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d817      	bhi.n	800282a <main+0x246>
		{
			Joystick_2_Right = 1;
 80027fa:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <main+0x2f8>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
			Joystick_1_UP = 0;
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <main+0x2dc>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
			Joystick_1_Down = 0;
 8002806:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <main+0x2e0>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
			Joystick_1_Left = 0;
 800280c:	4b2e      	ldr	r3, [pc, #184]	@ (80028c8 <main+0x2e4>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
			Joystick_1_Right = 0;
 8002812:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <main+0x2e8>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]

			Joystick_2_UP = 0;
 8002818:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <main+0x2ec>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
			Joystick_2_Down = 0;
 800281e:	4b2d      	ldr	r3, [pc, #180]	@ (80028d4 <main+0x2f0>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
//			Joystick_2_Left = 0;
			Joystick_2_Right = 0;
 8002824:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <main+0x2f8>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
		}
		if(Joystick_Data_Buffer[3] > 2100)
 800282a:	4b23      	ldr	r3, [pc, #140]	@ (80028b8 <main+0x2d4>)
 800282c:	88db      	ldrh	r3, [r3, #6]
 800282e:	f640 0234 	movw	r2, #2100	@ 0x834
 8002832:	4293      	cmp	r3, r2
 8002834:	d917      	bls.n	8002866 <main+0x282>
		{
			Joystick_2_UP = 1;
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <main+0x2ec>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
			Joystick_1_UP = 0;
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <main+0x2dc>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
			Joystick_1_Down = 0;
 8002842:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <main+0x2e0>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
			Joystick_1_Left = 0;
 8002848:	4b1f      	ldr	r3, [pc, #124]	@ (80028c8 <main+0x2e4>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
			Joystick_1_Right = 0;
 800284e:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <main+0x2e8>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]

//			Joystick_2_UP = 0;
			Joystick_2_Down = 0;
 8002854:	4b1f      	ldr	r3, [pc, #124]	@ (80028d4 <main+0x2f0>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
			Joystick_2_Left = 0;
 800285a:	4b1f      	ldr	r3, [pc, #124]	@ (80028d8 <main+0x2f4>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
			Joystick_2_Right = 0;
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <main+0x2f8>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
		}
		if(Joystick_Data_Buffer[3] < 1500)
 8002866:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <main+0x2d4>)
 8002868:	88db      	ldrh	r3, [r3, #6]
 800286a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800286e:	4293      	cmp	r3, r2
 8002870:	d817      	bhi.n	80028a2 <main+0x2be>
		{
			Joystick_2_Down = 1;
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <main+0x2f0>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
			Joystick_1_UP = 0;
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <main+0x2dc>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
			Joystick_1_Down = 0;
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <main+0x2e0>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
			Joystick_1_Left = 0;
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <main+0x2e4>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
			Joystick_1_Right = 0;
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <main+0x2e8>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]

			Joystick_2_UP = 0;
 8002890:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <main+0x2ec>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
//			Joystick_2_Down = 0;
			Joystick_2_Left = 0;
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <main+0x2f4>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
			Joystick_2_Right = 0;
 800289c:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <main+0x2f8>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
		}
		Delay_milli(1);
 80028a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80028a6:	f7ff fe79 	bl	800259c <Delay_milli>
		Joystick_1_UP = 0;
 80028aa:	e6f7      	b.n	800269c <main+0xb8>
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	200000dc 	.word	0x200000dc
 80028b4:	40012000 	.word	0x40012000
 80028b8:	20000120 	.word	0x20000120
 80028bc:	40010000 	.word	0x40010000
 80028c0:	20000128 	.word	0x20000128
 80028c4:	20000129 	.word	0x20000129
 80028c8:	2000012a 	.word	0x2000012a
 80028cc:	2000012b 	.word	0x2000012b
 80028d0:	2000012c 	.word	0x2000012c
 80028d4:	2000012d 	.word	0x2000012d
 80028d8:	2000012e 	.word	0x2000012e
 80028dc:	2000012f 	.word	0x2000012f

080028e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <SystemInit+0x20>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	4a05      	ldr	r2, [pc, #20]	@ (8002900 <SystemInit+0x20>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	2302      	movs	r3, #2
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	2302      	movs	r3, #2
 800291c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800291e:	4b34      	ldr	r3, [pc, #208]	@ (80029f0 <SystemCoreClockUpdate+0xec>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d011      	beq.n	8002952 <SystemCoreClockUpdate+0x4e>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d844      	bhi.n	80029be <SystemCoreClockUpdate+0xba>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <SystemCoreClockUpdate+0x3e>
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d004      	beq.n	800294a <SystemCoreClockUpdate+0x46>
 8002940:	e03d      	b.n	80029be <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002942:	4b2c      	ldr	r3, [pc, #176]	@ (80029f4 <SystemCoreClockUpdate+0xf0>)
 8002944:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <SystemCoreClockUpdate+0xf4>)
 8002946:	601a      	str	r2, [r3, #0]
      break;
 8002948:	e03d      	b.n	80029c6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800294a:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <SystemCoreClockUpdate+0xf0>)
 800294c:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <SystemCoreClockUpdate+0xf8>)
 800294e:	601a      	str	r2, [r3, #0]
      break;
 8002950:	e039      	b.n	80029c6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002952:	4b27      	ldr	r3, [pc, #156]	@ (80029f0 <SystemCoreClockUpdate+0xec>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0d9b      	lsrs	r3, r3, #22
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800295e:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <SystemCoreClockUpdate+0xec>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002966:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800296e:	4a23      	ldr	r2, [pc, #140]	@ (80029fc <SystemCoreClockUpdate+0xf8>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <SystemCoreClockUpdate+0xec>)
 8002978:	6852      	ldr	r2, [r2, #4]
 800297a:	0992      	lsrs	r2, r2, #6
 800297c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e00b      	b.n	80029a0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002988:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <SystemCoreClockUpdate+0xf4>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	4a17      	ldr	r2, [pc, #92]	@ (80029f0 <SystemCoreClockUpdate+0xec>)
 8002992:	6852      	ldr	r2, [r2, #4]
 8002994:	0992      	lsrs	r2, r2, #6
 8002996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <SystemCoreClockUpdate+0xec>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <SystemCoreClockUpdate+0xf0>)
 80029ba:	6013      	str	r3, [r2, #0]
      break;
 80029bc:	e003      	b.n	80029c6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <SystemCoreClockUpdate+0xf0>)
 80029c0:	4a0d      	ldr	r2, [pc, #52]	@ (80029f8 <SystemCoreClockUpdate+0xf4>)
 80029c2:	601a      	str	r2, [r3, #0]
      break;
 80029c4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <SystemCoreClockUpdate+0xec>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a00 <SystemCoreClockUpdate+0xfc>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <SystemCoreClockUpdate+0xf0>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <SystemCoreClockUpdate+0xf0>)
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40023800 	.word	0x40023800
 80029f4:	20000000 	.word	0x20000000
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	017d7840 	.word	0x017d7840
 8002a00:	08002ebc 	.word	0x08002ebc

08002a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a04:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a08:	f7ff ff6a 	bl	80028e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a0c:	480c      	ldr	r0, [pc, #48]	@ (8002a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a0e:	490d      	ldr	r1, [pc, #52]	@ (8002a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a10:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <LoopForever+0xe>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a14:	e002      	b.n	8002a1c <LoopCopyDataInit>

08002a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1a:	3304      	adds	r3, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a20:	d3f9      	bcc.n	8002a16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a22:	4a0a      	ldr	r2, [pc, #40]	@ (8002a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a24:	4c0a      	ldr	r4, [pc, #40]	@ (8002a50 <LoopForever+0x16>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a28:	e001      	b.n	8002a2e <LoopFillZerobss>

08002a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2c:	3204      	adds	r2, #4

08002a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a30:	d3fb      	bcc.n	8002a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a32:	f000 f811 	bl	8002a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a36:	f7ff fdd5 	bl	80025e4 <main>

08002a3a <LoopForever>:

LoopForever:
  b LoopForever
 8002a3a:	e7fe      	b.n	8002a3a <LoopForever>
  ldr   r0, =_estack
 8002a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002a48:	08002ed4 	.word	0x08002ed4
  ldr r2, =_sbss
 8002a4c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002a50:	20000130 	.word	0x20000130

08002a54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC_IRQHandler>
	...

08002a58 <__libc_init_array>:
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8002a90 <__libc_init_array+0x38>)
 8002a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8002a94 <__libc_init_array+0x3c>)
 8002a5e:	1b64      	subs	r4, r4, r5
 8002a60:	10a4      	asrs	r4, r4, #2
 8002a62:	2600      	movs	r6, #0
 8002a64:	42a6      	cmp	r6, r4
 8002a66:	d109      	bne.n	8002a7c <__libc_init_array+0x24>
 8002a68:	4d0b      	ldr	r5, [pc, #44]	@ (8002a98 <__libc_init_array+0x40>)
 8002a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8002a9c <__libc_init_array+0x44>)
 8002a6c:	f000 f818 	bl	8002aa0 <_init>
 8002a70:	1b64      	subs	r4, r4, r5
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	2600      	movs	r6, #0
 8002a76:	42a6      	cmp	r6, r4
 8002a78:	d105      	bne.n	8002a86 <__libc_init_array+0x2e>
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a80:	4798      	blx	r3
 8002a82:	3601      	adds	r6, #1
 8002a84:	e7ee      	b.n	8002a64 <__libc_init_array+0xc>
 8002a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8a:	4798      	blx	r3
 8002a8c:	3601      	adds	r6, #1
 8002a8e:	e7f2      	b.n	8002a76 <__libc_init_array+0x1e>
 8002a90:	08002ecc 	.word	0x08002ecc
 8002a94:	08002ecc 	.word	0x08002ecc
 8002a98:	08002ecc 	.word	0x08002ecc
 8002a9c:	08002ed0 	.word	0x08002ed0

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
