
Joystick_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ffc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08003184  08003184  00004184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003598  08003598  00005004  2**0
                  CONTENTS
  4 .ARM          00000000  08003598  08003598  00005004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003598  08003598  00005004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080035a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005004  2**0
                  CONTENTS
 10 .bss          00000314  20000004  20000004  00005004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  00005004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006ebd  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bc1  00000000  00000000  0000bef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000240  00000000  00000000  0000cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b2  00000000  00000000  0000ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e6f  00000000  00000000  0000ceaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004253  00000000  00000000  00026d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f93d  00000000  00000000  0002af6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ba8a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007e4  00000000  00000000  000ba8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000bb0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800316c 	.word	0x0800316c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800316c 	.word	0x0800316c

080001c8 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80001d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80001d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800021c <Delay_ms+0x54>
 80001da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80001de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80001e2:	ee17 3a90 	vmov	r3, s15
 80001e6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <Delay_ms+0x58>)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <Delay_ms+0x58>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80001f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <Delay_ms+0x58>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <Delay_ms+0x58>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000200:	bf00      	nop
 8000202:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <Delay_ms+0x58>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800020e:	2300      	movs	r3, #0
}
 8000210:	4618      	mov	r0, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	48241000 	.word	0x48241000
 8000220:	e000e010 	.word	0xe000e010

08000224 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 800022e:	e00b      	b.n	8000248 <Delay_milli+0x24>
	{
		Delay_ms(1);
 8000230:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000234:	f7ff ffc8 	bl	80001c8 <Delay_ms>
	for (; ms>0; ms--)
 8000238:	edd7 7a01 	vldr	s15, [r7, #4]
 800023c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000244:	edc7 7a01 	vstr	s15, [r7, #4]
 8000248:	edd7 7a01 	vldr	s15, [r7, #4]
 800024c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000254:	dcec      	bgt.n	8000230 <Delay_milli+0xc>
	}
	return ms;
 8000256:	edd7 7a01 	vldr	s15, [r7, #4]
 800025a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800025e:	ee17 3a90 	vmov	r3, s15
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <ADC_Timer_External_Trigger_Init>:
 * trigger events, including various channels and timers.
 *
 * @param[in] config Pointer to the ADC configuration structure.
 */
static void ADC_Timer_External_Trigger_Init(ADC_Config *config)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC1)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	7a1b      	ldrb	r3, [r3, #8]
 8000278:	2200      	movs	r2, #0
 800027a:	4293      	cmp	r3, r2
 800027c:	d122      	bne.n	80002c4 <ADC_Timer_External_Trigger_Init+0x58>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800027e:	4b96      	ldr	r3, [pc, #600]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 8000280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000282:	4a95      	ldr	r2, [pc, #596]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> CCR1 = 100/2 -1;
 800028a:	4b94      	ldr	r3, [pc, #592]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800028c:	2231      	movs	r2, #49	@ 0x31
 800028e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->PSC = 16800;
 8000290:	4b92      	ldr	r3, [pc, #584]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000292:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000296:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 100-1;
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800029a:	2263      	movs	r2, #99	@ 0x63
 800029c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1 -> CR2 |= TIM_CR2_MMS_1 | TIM_CR2_MMS_0;
 800029e:	4b8f      	ldr	r3, [pc, #572]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	4a8e      	ldr	r2, [pc, #568]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002a4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002a8:	6053      	str	r3, [r2, #4]
		TIM1 -> CCER |= TIM_CCER_CC1E;
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002ac:	6a1b      	ldr	r3, [r3, #32]
 80002ae:	4a8b      	ldr	r2, [pc, #556]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6213      	str	r3, [r2, #32]
		TIM1->CR1 |= TIM_CR1_CEN ;
 80002b6:	4b89      	ldr	r3, [pc, #548]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a88      	ldr	r2, [pc, #544]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]
		TIM3->PSC = 10000-1;
		TIM3->ARR = 8400-1;
		TIM3->CR1 |= TIM_CR1_CEN;
	}
	/***************************************************************************************************************/
}
 80002c2:	e1e2      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC2)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	7a1b      	ldrb	r3, [r3, #8]
 80002c8:	2201      	movs	r2, #1
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d120      	bne.n	8000310 <ADC_Timer_External_Trigger_Init+0xa4>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 80002ce:	4b82      	ldr	r3, [pc, #520]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 80002d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002d2:	4a81      	ldr	r2, [pc, #516]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC2G;
 80002da:	4b80      	ldr	r3, [pc, #512]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a7f      	ldr	r2, [pc, #508]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC2IE;
 80002e6:	4b7d      	ldr	r3, [pc, #500]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	4a7c      	ldr	r2, [pc, #496]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 80002f2:	4b7a      	ldr	r3, [pc, #488]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002f4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002f8:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 80002fa:	4b78      	ldr	r3, [pc, #480]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80002fc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000300:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000302:	4b76      	ldr	r3, [pc, #472]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a75      	ldr	r2, [pc, #468]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6013      	str	r3, [r2, #0]
}
 800030e:	e1bc      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC3)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7a1b      	ldrb	r3, [r3, #8]
 8000314:	2202      	movs	r2, #2
 8000316:	4293      	cmp	r3, r2
 8000318:	d120      	bne.n	800035c <ADC_Timer_External_Trigger_Init+0xf0>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800031a:	4b6f      	ldr	r3, [pc, #444]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 800031c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800031e:	4a6e      	ldr	r2, [pc, #440]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC3G;
 8000326:	4b6d      	ldr	r3, [pc, #436]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a6c      	ldr	r2, [pc, #432]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800032c:	f043 0308 	orr.w	r3, r3, #8
 8000330:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC3IE;
 8000332:	4b6a      	ldr	r3, [pc, #424]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	4a69      	ldr	r2, [pc, #420]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 800033e:	4b67      	ldr	r3, [pc, #412]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000340:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000344:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000346:	4b65      	ldr	r3, [pc, #404]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000348:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800034c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 800034e:	4b63      	ldr	r3, [pc, #396]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a62      	ldr	r2, [pc, #392]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6013      	str	r3, [r2, #0]
}
 800035a:	e196      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_1_CC4)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	7a1b      	ldrb	r3, [r3, #8]
 8000360:	2200      	movs	r2, #0
 8000362:	4293      	cmp	r3, r2
 8000364:	d120      	bne.n	80003a8 <ADC_Timer_External_Trigger_Init+0x13c>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000366:	4b5c      	ldr	r3, [pc, #368]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 8000368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800036a:	4a5b      	ldr	r2, [pc, #364]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC4G;
 8000372:	4b5a      	ldr	r3, [pc, #360]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a59      	ldr	r2, [pc, #356]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC4IE;
 800037e:	4b57      	ldr	r3, [pc, #348]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	4a56      	ldr	r2, [pc, #344]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 800038a:	4b54      	ldr	r3, [pc, #336]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800038c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000392:	4b52      	ldr	r3, [pc, #328]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 8000394:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000398:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 800039a:	4b50      	ldr	r3, [pc, #320]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a4f      	ldr	r2, [pc, #316]	@ (80004dc <ADC_Timer_External_Trigger_Init+0x270>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6013      	str	r3, [r2, #0]
}
 80003a6:	e170      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_2_CC1)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7a1b      	ldrb	r3, [r3, #8]
 80003ac:	2200      	movs	r2, #0
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d128      	bne.n	8000404 <ADC_Timer_External_Trigger_Init+0x198>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003b2:	4b49      	ldr	r3, [pc, #292]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 80003b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b6:	4a48      	ldr	r2, [pc, #288]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC1G;
 80003be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC1IE;
 80003ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003d8:	f043 0302 	orr.w	r3, r3, #2
 80003dc:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 80003de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003e6:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ec:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80003f0:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 80003f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6013      	str	r3, [r2, #0]
}
 8000402:	e142      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC2)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	7a1b      	ldrb	r3, [r3, #8]
 8000408:	2203      	movs	r2, #3
 800040a:	4293      	cmp	r3, r2
 800040c:	d135      	bne.n	800047a <ADC_Timer_External_Trigger_Init+0x20e>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800040e:	4b32      	ldr	r3, [pc, #200]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 8000410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000412:	4a31      	ldr	r2, [pc, #196]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC2G | TIM_EGR_UG;
 800041a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000424:	f043 0305 	orr.w	r3, r3, #5
 8000428:	6153      	str	r3, [r2, #20]
		TIM2 -> CCR1 = 10000/2 -1;
 800042a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800042e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000432:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->PSC = 16800;
 8000434:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000438:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 800043c:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 10000-1;
 800043e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000442:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000446:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8000448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6053      	str	r3, [r2, #4]
		TIM2 -> CCER |= TIM_CCER_CC2E;
 8000458:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800045c:	6a1b      	ldr	r3, [r3, #32]
 800045e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6213      	str	r3, [r2, #32]
		TIM2->CR1 |= TIM_CR1_CEN ;
 8000468:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	e107      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC3)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	7a1b      	ldrb	r3, [r3, #8]
 800047e:	2204      	movs	r2, #4
 8000480:	4293      	cmp	r3, r2
 8000482:	d12d      	bne.n	80004e0 <ADC_Timer_External_Trigger_Init+0x274>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 8000486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000488:	4a13      	ldr	r2, [pc, #76]	@ (80004d8 <ADC_Timer_External_Trigger_Init+0x26c>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 8000490:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 80004a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004b8:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 80004ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004be:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80004c2:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 80004c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	e0d9      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
 80004d6:	bf00      	nop
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40010000 	.word	0x40010000
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC4)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7a1b      	ldrb	r3, [r3, #8]
 80004e4:	2205      	movs	r2, #5
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d128      	bne.n	800053c <ADC_Timer_External_Trigger_Init+0x2d0>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004ea:	4b6b      	ldr	r3, [pc, #428]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 80004ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ee:	4a6a      	ldr	r2, [pc, #424]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 80004f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 8000506:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000510:	f043 0308 	orr.w	r3, r3, #8
 8000514:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 8000516:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800051e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000520:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000524:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000528:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 800052a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	e0a6      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_TRGO)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7a1b      	ldrb	r3, [r3, #8]
 8000540:	2206      	movs	r2, #6
 8000542:	4293      	cmp	r3, r2
 8000544:	d130      	bne.n	80005a8 <ADC_Timer_External_Trigger_Init+0x33c>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000546:	4b54      	ldr	r3, [pc, #336]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 8000548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054a:	4a53      	ldr	r2, [pc, #332]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->DIER |=  TIM_DIER_UIE;
 8000552:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	60d3      	str	r3, [r2, #12]
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8000562:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	6053      	str	r3, [r2, #4]
		TIM2->PSC = 10000-1;
 8000572:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000576:	f242 720f 	movw	r2, #9999	@ 0x270f
 800057a:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 1680-1;
 800057c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000580:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000584:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000586:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]
		TIM2 -> EGR |= TIM_EGR_UG;
 8000596:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6153      	str	r3, [r2, #20]
}
 80005a6:	e070      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_3_CC1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a1b      	ldrb	r3, [r3, #8]
 80005ac:	2207      	movs	r2, #7
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d120      	bne.n	80005f4 <ADC_Timer_External_Trigger_Init+0x388>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005b2:	4b39      	ldr	r3, [pc, #228]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b6:	4a38      	ldr	r2, [pc, #224]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC1G;
 80005be:	4b37      	ldr	r3, [pc, #220]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a36      	ldr	r2, [pc, #216]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC1IE;
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	4a33      	ldr	r2, [pc, #204]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 80005d6:	4b31      	ldr	r3, [pc, #196]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005d8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005dc:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005e0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80005e4:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 80005e6:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a2c      	ldr	r2, [pc, #176]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	e04a      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC2)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7a1b      	ldrb	r3, [r3, #8]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d120      	bne.n	8000640 <ADC_Timer_External_Trigger_Init+0x3d4>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	4a25      	ldr	r2, [pc, #148]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC2G;
 800060a:	4b24      	ldr	r3, [pc, #144]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a23      	ldr	r2, [pc, #140]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC2IE;
 8000616:	4b21      	ldr	r3, [pc, #132]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	4a20      	ldr	r2, [pc, #128]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000624:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 800062c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000630:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a19      	ldr	r2, [pc, #100]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6013      	str	r3, [r2, #0]
}
 800063e:	e024      	b.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC4)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7a1b      	ldrb	r3, [r3, #8]
 8000644:	2200      	movs	r2, #0
 8000646:	4293      	cmp	r3, r2
 8000648:	d11f      	bne.n	800068a <ADC_Timer_External_Trigger_Init+0x41e>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <ADC_Timer_External_Trigger_Init+0x42c>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC3G;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a10      	ldr	r2, [pc, #64]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC3IE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000670:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000678:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a06      	ldr	r2, [pc, #24]	@ (800069c <ADC_Timer_External_Trigger_Init+0x430>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6013      	str	r3, [r2, #0]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40000400 	.word	0x40000400

080006a0 <ADC_Sampling_Config>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns the number of enabled channels after configuration.
 */
static int8_t ADC_Sampling_Config(ADC_Config *config)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    uint8_t conversion_Counter = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]

    // Configure sampling time for Channel 0 if enabled
    if(config->Channel_0.Enable == ENABLE)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7a9b      	ldrb	r3, [r3, #10]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00c      	beq.n	80006ce <ADC_Sampling_Config+0x2e>
    {
        config->Port->SMPR2 |= config->Channel_0.Sample_Time << ADC_SMPR2_SMP0_Pos;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	691a      	ldr	r2, [r3, #16]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7b1b      	ldrb	r3, [r3, #12]
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	430a      	orrs	r2, r1
 80006c6:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	3301      	adds	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 1 if enabled
    if(config->Channel_1.Enable == ENABLE)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7b5b      	ldrb	r3, [r3, #13]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00c      	beq.n	80006f0 <ADC_Sampling_Config+0x50>
    {
        config->Port->SMPR2 |= config->Channel_1.Sample_Time << ADC_SMPR2_SMP1_Pos;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6919      	ldr	r1, [r3, #16]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7bdb      	ldrb	r3, [r3, #15]
 80006e0:	00da      	lsls	r2, r3, #3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	3301      	adds	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 2 if enabled
    if(config->Channel_2.Enable == ENABLE)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7c1b      	ldrb	r3, [r3, #16]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00c      	beq.n	8000712 <ADC_Sampling_Config+0x72>
    {
        config->Port->SMPR2 |= config->Channel_2.Sample_Time << ADC_SMPR2_SMP2_Pos;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6919      	ldr	r1, [r3, #16]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7c9b      	ldrb	r3, [r3, #18]
 8000702:	019a      	lsls	r2, r3, #6
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	430a      	orrs	r2, r1
 800070a:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 3 if enabled
    if(config->Channel_3.Enable == ENABLE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7cdb      	ldrb	r3, [r3, #19]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00c      	beq.n	8000734 <ADC_Sampling_Config+0x94>
    {
        config->Port->SMPR2 |= config->Channel_3.Sample_Time << ADC_SMPR2_SMP3_Pos;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6919      	ldr	r1, [r3, #16]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7d5b      	ldrb	r3, [r3, #21]
 8000724:	025a      	lsls	r2, r3, #9
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	430a      	orrs	r2, r1
 800072c:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 4 if enabled
    if(config->Channel_4.Enable == ENABLE)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7d9b      	ldrb	r3, [r3, #22]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00c      	beq.n	8000756 <ADC_Sampling_Config+0xb6>
    {
        config->Port->SMPR2 |= config->Channel_4.Sample_Time << ADC_SMPR2_SMP4_Pos;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6919      	ldr	r1, [r3, #16]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7e1b      	ldrb	r3, [r3, #24]
 8000746:	031a      	lsls	r2, r3, #12
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	430a      	orrs	r2, r1
 800074e:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	3301      	adds	r3, #1
 8000754:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 5 if enabled
    if(config->Channel_5.Enable == ENABLE)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7e5b      	ldrb	r3, [r3, #25]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00c      	beq.n	8000778 <ADC_Sampling_Config+0xd8>
    {
        config->Port->SMPR2 |= config->Channel_5.Sample_Time << ADC_SMPR2_SMP5_Pos;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6919      	ldr	r1, [r3, #16]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7edb      	ldrb	r3, [r3, #27]
 8000768:	03da      	lsls	r2, r3, #15
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	430a      	orrs	r2, r1
 8000770:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3301      	adds	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 6 if enabled
    if(config->Channel_6.Enable == ENABLE)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7f1b      	ldrb	r3, [r3, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <ADC_Sampling_Config+0xfa>
    {
        config->Port->SMPR2 |= config->Channel_6.Sample_Time << ADC_SMPR2_SMP6_Pos;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6919      	ldr	r1, [r3, #16]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7f9b      	ldrb	r3, [r3, #30]
 800078a:	049a      	lsls	r2, r3, #18
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	430a      	orrs	r2, r1
 8000792:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	3301      	adds	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 7 if enabled
    if(config->Channel_7.Enable == ENABLE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7fdb      	ldrb	r3, [r3, #31]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00d      	beq.n	80007be <ADC_Sampling_Config+0x11e>
    {
        config->Port->SMPR2 |= config->Channel_7.Sample_Time << ADC_SMPR2_SMP7_Pos;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	6919      	ldr	r1, [r3, #16]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80007ae:	055a      	lsls	r2, r3, #21
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 8 if enabled
    if(config->Channel_8.Enable == ENABLE)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00d      	beq.n	80007e4 <ADC_Sampling_Config+0x144>
    {
        config->Port->SMPR2 |= config->Channel_8.Sample_Time << ADC_SMPR2_SMP8_Pos;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6919      	ldr	r1, [r3, #16]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80007d4:	061a      	lsls	r2, r3, #24
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	430a      	orrs	r2, r1
 80007dc:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3301      	adds	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 9 if enabled
    if(config->Channel_9.Enable == ENABLE)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00d      	beq.n	800080a <ADC_Sampling_Config+0x16a>
    {
        config->Port->SMPR1 |= config->Channel_9.Sample_Time << ADC_SMPR2_SMP9_Pos;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	68d9      	ldr	r1, [r3, #12]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80007fa:	06da      	lsls	r2, r3, #27
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	430a      	orrs	r2, r1
 8000802:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 10 if enabled
    if(config->Channel_10.Enable == ENABLE)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00d      	beq.n	8000830 <ADC_Sampling_Config+0x190>
    {
        config->Port->SMPR1 |= config->Channel_10.Sample_Time << ADC_SMPR1_SMP10_Pos;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000820:	4619      	mov	r1, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	430a      	orrs	r2, r1
 8000828:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	3301      	adds	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 11 if enabled
    if(config->Channel_11.Enable == ENABLE)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00d      	beq.n	8000856 <ADC_Sampling_Config+0x1b6>
    {
        config->Port->SMPR1 |= config->Channel_11.Sample_Time << ADC_SMPR1_SMP11_Pos;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68d9      	ldr	r1, [r3, #12]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000846:	00da      	lsls	r2, r3, #3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	430a      	orrs	r2, r1
 800084e:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 12 if enabled
    if(config->Channel_12.Enable == ENABLE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00d      	beq.n	800087c <ADC_Sampling_Config+0x1dc>
    {
        config->Port->SMPR1 |= config->Channel_12.Sample_Time << ADC_SMPR1_SMP12_Pos;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68d9      	ldr	r1, [r3, #12]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800086c:	019a      	lsls	r2, r3, #6
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	430a      	orrs	r2, r1
 8000874:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	3301      	adds	r3, #1
 800087a:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 13 if enabled
    if(config->Channel_13.Enable == ENABLE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00d      	beq.n	80008a2 <ADC_Sampling_Config+0x202>
    {
        config->Port->SMPR1 |= config->Channel_13.Sample_Time << ADC_SMPR1_SMP13_Pos;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68d9      	ldr	r1, [r3, #12]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8000892:	025a      	lsls	r2, r3, #9
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 14 if enabled
    if(config->Channel_14.Enable == ENABLE)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00d      	beq.n	80008c8 <ADC_Sampling_Config+0x228>
    {
        config->Port->SMPR1 |= config->Channel_14.Sample_Time << ADC_SMPR1_SMP14_Pos;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68d9      	ldr	r1, [r3, #12]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80008b8:	031a      	lsls	r2, r3, #12
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	430a      	orrs	r2, r1
 80008c0:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3301      	adds	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 15 if enabled
    if(config->Channel_15.Enable == ENABLE)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00d      	beq.n	80008ee <ADC_Sampling_Config+0x24e>
    {
        config->Port->SMPR1 |= config->Channel_15.Sample_Time << ADC_SMPR1_SMP15_Pos;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68d9      	ldr	r1, [r3, #12]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80008de:	03da      	lsls	r2, r3, #15
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	3301      	adds	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
    }

    // Return the number of configured channels
    return conversion_Counter;
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <ADC_Pin_Init>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful initialization of all enabled channels.
 */
static int8_t ADC_Pin_Init(ADC_Config *config)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b087      	sub	sp, #28
 8000904:	af04      	add	r7, sp, #16
 8000906:	6078      	str	r0, [r7, #4]
    // Initialize GPIO pin for Channel 0 if enabled
    if (config->Channel_0.Enable == ENABLE)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a9b      	ldrb	r3, [r3, #10]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00d      	beq.n	800092c <ADC_Pin_Init+0x2c>
    {
        GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog,
 8000910:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000912:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000914:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000916:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000918:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog,
 800091a:	9102      	str	r1, [sp, #8]
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	4623      	mov	r3, r4
 8000922:	4602      	mov	r2, r0
 8000924:	2100      	movs	r1, #0
 8000926:	488f      	ldr	r0, [pc, #572]	@ (8000b64 <ADC_Pin_Init+0x264>)
 8000928:	f002 f8fe 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 1 if enabled
    if (config->Channel_1.Enable == ENABLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7b5b      	ldrb	r3, [r3, #13]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00d      	beq.n	8000950 <ADC_Pin_Init+0x50>
    {
        GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog,
 8000934:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000936:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000938:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800093a:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 800093c:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog,
 800093e:	9102      	str	r1, [sp, #8]
 8000940:	9201      	str	r2, [sp, #4]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	4623      	mov	r3, r4
 8000946:	4602      	mov	r2, r0
 8000948:	2101      	movs	r1, #1
 800094a:	4886      	ldr	r0, [pc, #536]	@ (8000b64 <ADC_Pin_Init+0x264>)
 800094c:	f002 f8ec 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 2 if enabled
    if (config->Channel_2.Enable == ENABLE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7c1b      	ldrb	r3, [r3, #16]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00d      	beq.n	8000974 <ADC_Pin_Init+0x74>
    {
        GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog,
 8000958:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800095a:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 800095c:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800095e:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000960:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog,
 8000962:	9102      	str	r1, [sp, #8]
 8000964:	9201      	str	r2, [sp, #4]
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	4623      	mov	r3, r4
 800096a:	4602      	mov	r2, r0
 800096c:	2102      	movs	r1, #2
 800096e:	487d      	ldr	r0, [pc, #500]	@ (8000b64 <ADC_Pin_Init+0x264>)
 8000970:	f002 f8da 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 3 if enabled
    if (config->Channel_3.Enable == ENABLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7cdb      	ldrb	r3, [r3, #19]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00d      	beq.n	8000998 <ADC_Pin_Init+0x98>
    {
        GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog,
 800097c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800097e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000980:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000982:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000984:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog,
 8000986:	9102      	str	r1, [sp, #8]
 8000988:	9201      	str	r2, [sp, #4]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	4623      	mov	r3, r4
 800098e:	4602      	mov	r2, r0
 8000990:	2103      	movs	r1, #3
 8000992:	4874      	ldr	r0, [pc, #464]	@ (8000b64 <ADC_Pin_Init+0x264>)
 8000994:	f002 f8c8 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 4 if enabled
    if (config->Channel_4.Enable == ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7d9b      	ldrb	r3, [r3, #22]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00d      	beq.n	80009bc <ADC_Pin_Init+0xbc>
    {
        GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog,
 80009a0:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80009a2:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80009a4:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80009a6:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80009a8:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog,
 80009aa:	9102      	str	r1, [sp, #8]
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	4623      	mov	r3, r4
 80009b2:	4602      	mov	r2, r0
 80009b4:	2104      	movs	r1, #4
 80009b6:	486b      	ldr	r0, [pc, #428]	@ (8000b64 <ADC_Pin_Init+0x264>)
 80009b8:	f002 f8b6 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 5 if enabled
    if (config->Channel_5.Enable == ENABLE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7e5b      	ldrb	r3, [r3, #25]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00d      	beq.n	80009e0 <ADC_Pin_Init+0xe0>
    {
        GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog,
 80009c4:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80009c6:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80009c8:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80009ca:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80009cc:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog,
 80009ce:	9102      	str	r1, [sp, #8]
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	4623      	mov	r3, r4
 80009d6:	4602      	mov	r2, r0
 80009d8:	2105      	movs	r1, #5
 80009da:	4862      	ldr	r0, [pc, #392]	@ (8000b64 <ADC_Pin_Init+0x264>)
 80009dc:	f002 f8a4 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 6 if enabled
    if (config->Channel_6.Enable == ENABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7f1b      	ldrb	r3, [r3, #28]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00d      	beq.n	8000a04 <ADC_Pin_Init+0x104>
    {
        GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog,
 80009e8:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80009ea:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80009ec:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80009ee:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80009f0:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog,
 80009f2:	9102      	str	r1, [sp, #8]
 80009f4:	9201      	str	r2, [sp, #4]
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4623      	mov	r3, r4
 80009fa:	4602      	mov	r2, r0
 80009fc:	2106      	movs	r1, #6
 80009fe:	4859      	ldr	r0, [pc, #356]	@ (8000b64 <ADC_Pin_Init+0x264>)
 8000a00:	f002 f892 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 7 if enabled
    if (config->Channel_7.Enable == ENABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7fdb      	ldrb	r3, [r3, #31]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00d      	beq.n	8000a28 <ADC_Pin_Init+0x128>
    {
        GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog,
 8000a0c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000a0e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000a10:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000a12:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000a14:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog,
 8000a16:	9102      	str	r1, [sp, #8]
 8000a18:	9201      	str	r2, [sp, #4]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	4602      	mov	r2, r0
 8000a20:	2107      	movs	r1, #7
 8000a22:	4850      	ldr	r0, [pc, #320]	@ (8000b64 <ADC_Pin_Init+0x264>)
 8000a24:	f002 f880 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 8 if enabled
    if (config->Channel_8.Enable == ENABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00d      	beq.n	8000a4e <ADC_Pin_Init+0x14e>
    {
        GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog,
 8000a32:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000a34:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000a36:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000a38:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000a3a:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog,
 8000a3c:	9102      	str	r1, [sp, #8]
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4623      	mov	r3, r4
 8000a44:	4602      	mov	r2, r0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4847      	ldr	r0, [pc, #284]	@ (8000b68 <ADC_Pin_Init+0x268>)
 8000a4a:	f002 f86d 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 9 if enabled
    if (config->Channel_9.Enable == ENABLE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00d      	beq.n	8000a74 <ADC_Pin_Init+0x174>
    {
        GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog,
 8000a58:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000a5a:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000a5c:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000a5e:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000a60:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog,
 8000a62:	9102      	str	r1, [sp, #8]
 8000a64:	9201      	str	r2, [sp, #4]
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4623      	mov	r3, r4
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	483e      	ldr	r0, [pc, #248]	@ (8000b68 <ADC_Pin_Init+0x268>)
 8000a70:	f002 f85a 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 10 if enabled
    if (config->Channel_10.Enable == ENABLE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00d      	beq.n	8000a9a <ADC_Pin_Init+0x19a>
    {
        GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog,
 8000a7e:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000a80:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000a82:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000a84:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000a86:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog,
 8000a88:	9102      	str	r1, [sp, #8]
 8000a8a:	9201      	str	r2, [sp, #4]
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	4623      	mov	r3, r4
 8000a90:	4602      	mov	r2, r0
 8000a92:	2100      	movs	r1, #0
 8000a94:	4835      	ldr	r0, [pc, #212]	@ (8000b6c <ADC_Pin_Init+0x26c>)
 8000a96:	f002 f847 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 11 if enabled
    if (config->Channel_11.Enable == ENABLE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00d      	beq.n	8000ac0 <ADC_Pin_Init+0x1c0>
    {
        GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog,
 8000aa4:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000aa6:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000aa8:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000aaa:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000aac:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog,
 8000aae:	9102      	str	r1, [sp, #8]
 8000ab0:	9201      	str	r2, [sp, #4]
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	4623      	mov	r3, r4
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	482c      	ldr	r0, [pc, #176]	@ (8000b6c <ADC_Pin_Init+0x26c>)
 8000abc:	f002 f834 	bl	8002b28 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 12 if enabled
    if (config->Channel_12.Enable == ENABLE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00d      	beq.n	8000ae6 <ADC_Pin_Init+0x1e6>
    {
        GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog,
 8000aca:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000acc:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000ace:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000ad0:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000ad2:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog,
 8000ad4:	9102      	str	r1, [sp, #8]
 8000ad6:	9201      	str	r2, [sp, #4]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4623      	mov	r3, r4
 8000adc:	4602      	mov	r2, r0
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <ADC_Pin_Init+0x26c>)
 8000ae2:	f002 f821 	bl	8002b28 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 13 if enabled
    if (config->Channel_13.Enable == ENABLE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00d      	beq.n	8000b0c <ADC_Pin_Init+0x20c>
    {
        GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog,
 8000af0:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000af2:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000af4:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000af6:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000af8:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog,
 8000afa:	9102      	str	r1, [sp, #8]
 8000afc:	9201      	str	r2, [sp, #4]
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	4623      	mov	r3, r4
 8000b02:	4602      	mov	r2, r0
 8000b04:	2103      	movs	r1, #3
 8000b06:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <ADC_Pin_Init+0x26c>)
 8000b08:	f002 f80e 	bl	8002b28 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 14 if enabled
    if (config->Channel_14.Enable == ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00d      	beq.n	8000b32 <ADC_Pin_Init+0x232>
    {
        GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog,
 8000b16:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000b18:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000b1a:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000b1c:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000b1e:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog,
 8000b20:	9102      	str	r1, [sp, #8]
 8000b22:	9201      	str	r2, [sp, #4]
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	4623      	mov	r3, r4
 8000b28:	4602      	mov	r2, r0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <ADC_Pin_Init+0x26c>)
 8000b2e:	f001 fffb 	bl	8002b28 <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 15 if enabled
    if (config->Channel_15.Enable == ENABLE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00d      	beq.n	8000b58 <ADC_Pin_Init+0x258>
    {
        GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog,
 8000b3c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8000b3e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8000b40:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8000b42:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8000b44:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog,
 8000b46:	9102      	str	r1, [sp, #8]
 8000b48:	9201      	str	r2, [sp, #4]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4623      	mov	r3, r4
 8000b4e:	4602      	mov	r2, r0
 8000b50:	2105      	movs	r1, #5
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <ADC_Pin_Init+0x26c>)
 8000b54:	f001 ffe8 	bl	8002b28 <GPIO_Pin_Init>
    }

    // Return success
    return 1;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020800 	.word	0x40020800

08000b70 <ADC_Sequence_Config>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful configuration of the sequence.
 */
static int8_t ADC_Sequence_Config(ADC_Config *config)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
    // Configure sequence for Channel 0
    if(config->Channel_0.Enable == ENABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7a9b      	ldrb	r3, [r3, #10]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d009      	beq.n	8000b94 <ADC_Sequence_Config+0x24>
    {
        config->Port->SQR3 |= config->Channel_0.Sequence_Number << ADC_SQR3_SQ1_Pos;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7adb      	ldrb	r3, [r3, #11]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	430a      	orrs	r2, r1
 8000b92:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 1
    if(config->Channel_1.Enable == ENABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7b5b      	ldrb	r3, [r3, #13]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d009      	beq.n	8000bb0 <ADC_Sequence_Config+0x40>
    {
        config->Port->SQR3 |= config->Channel_1.Sequence_Number << ADC_SQR3_SQ2_Pos;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7b9b      	ldrb	r3, [r3, #14]
 8000ba6:	015a      	lsls	r2, r3, #5
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 2
    if(config->Channel_2.Enable == ENABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7c1b      	ldrb	r3, [r3, #16]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d009      	beq.n	8000bcc <ADC_Sequence_Config+0x5c>
    {
        config->Port->SQR3 |= config->Channel_2.Sequence_Number << ADC_SQR3_SQ3_Pos;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7c5b      	ldrb	r3, [r3, #17]
 8000bc2:	029a      	lsls	r2, r3, #10
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 3
    if(config->Channel_3.Enable == ENABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7cdb      	ldrb	r3, [r3, #19]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d009      	beq.n	8000be8 <ADC_Sequence_Config+0x78>
    {
        config->Port->SQR3 |= config->Channel_3.Sequence_Number << ADC_SQR3_SQ4_Pos;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7d1b      	ldrb	r3, [r3, #20]
 8000bde:	03da      	lsls	r2, r3, #15
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 4
    if(config->Channel_4.Enable == ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7d9b      	ldrb	r3, [r3, #22]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d009      	beq.n	8000c04 <ADC_Sequence_Config+0x94>
    {
        config->Port->SQR3 |= config->Channel_4.Sequence_Number << ADC_SQR3_SQ5_Pos;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7ddb      	ldrb	r3, [r3, #23]
 8000bfa:	051a      	lsls	r2, r3, #20
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 5
    if(config->Channel_5.Enable == ENABLE)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7e5b      	ldrb	r3, [r3, #25]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d009      	beq.n	8000c20 <ADC_Sequence_Config+0xb0>
    {
        config->Port->SQR3 |= config->Channel_5.Sequence_Number << ADC_SQR3_SQ6_Pos;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7e9b      	ldrb	r3, [r3, #26]
 8000c16:	065a      	lsls	r2, r3, #25
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 6
    if(config->Channel_6.Enable == ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7f1b      	ldrb	r3, [r3, #28]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d009      	beq.n	8000c3c <ADC_Sequence_Config+0xcc>
    {
        config->Port->SQR2 |= config->Channel_6.Sequence_Number << ADC_SQR2_SQ7_Pos;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7f5b      	ldrb	r3, [r3, #29]
 8000c32:	4619      	mov	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 7
    if(config->Channel_7.Enable == ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7fdb      	ldrb	r3, [r3, #31]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00a      	beq.n	8000c5a <ADC_Sequence_Config+0xea>
    {
        config->Port->SQR2 |= config->Channel_7.Sequence_Number << ADC_SQR2_SQ8_Pos;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c50:	015a      	lsls	r2, r3, #5
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 8
    if(config->Channel_8.Enable == ENABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00a      	beq.n	8000c7a <ADC_Sequence_Config+0x10a>
    {
        config->Port->SQR2 |= config->Channel_8.Sequence_Number << ADC_SQR2_SQ9_Pos;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000c70:	029a      	lsls	r2, r3, #10
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 9
    if(config->Channel_9.Enable == ENABLE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00a      	beq.n	8000c9a <ADC_Sequence_Config+0x12a>
    {
        config->Port->SQR2 |= config->Channel_9.Sequence_Number << ADC_SQR2_SQ10_Pos;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c90:	03da      	lsls	r2, r3, #15
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 10
    if(config->Channel_10.Enable == ENABLE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00a      	beq.n	8000cba <ADC_Sequence_Config+0x14a>
    {
        config->Port->SQR2 |= config->Channel_10.Sequence_Number << ADC_SQR2_SQ11_Pos;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000cb0:	051a      	lsls	r2, r3, #20
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 11
    if(config->Channel_11.Enable == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00a      	beq.n	8000cda <ADC_Sequence_Config+0x16a>
    {
        config->Port->SQR2 |= config->Channel_11.Sequence_Number << ADC_SQR2_SQ12_Pos;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000cd0:	065a      	lsls	r2, r3, #25
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 12
    if(config->Channel_12.Enable == ENABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00a      	beq.n	8000cfa <ADC_Sequence_Config+0x18a>
    {
        config->Port->SQR1 |= config->Channel_12.Sequence_Number << ADC_SQR1_SQ13_Pos;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 13
    if(config->Channel_13.Enable == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00a      	beq.n	8000d1a <ADC_Sequence_Config+0x1aa>
    {
        config->Port->SQR1 |= config->Channel_13.Sequence_Number << ADC_SQR1_SQ14_Pos;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000d10:	015a      	lsls	r2, r3, #5
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 14
    if(config->Channel_14.Enable == ENABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00a      	beq.n	8000d3a <ADC_Sequence_Config+0x1ca>
    {
        config->Port->SQR1 |= config->Channel_14.Sequence_Number << ADC_SQR1_SQ15_Pos;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d30:	029a      	lsls	r2, r3, #10
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 15
    if(config->Channel_15.Enable == ENABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00a      	beq.n	8000d5a <ADC_Sequence_Config+0x1ea>
    {
        config->Port->SQR1 |= config->Channel_15.Sequence_Number << ADC_SQR1_SQ16_Pos;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d50:	03da      	lsls	r2, r3, #15
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    // Return success
    return 1;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <ADC_Init>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t ADC_Init(ADC_Config *config)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    // Enable the clock for the selected ADC port
    if (config->Port == ADC_Configuration.Port._ADC1_)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a8a      	ldr	r2, [pc, #552]	@ (8000fa0 <ADC_Init+0x238>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d106      	bne.n	8000d88 <ADC_Init+0x20>
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000d7a:	4b8a      	ldr	r3, [pc, #552]	@ (8000fa4 <ADC_Init+0x23c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a89      	ldr	r2, [pc, #548]	@ (8000fa4 <ADC_Init+0x23c>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	e01a      	b.n	8000dbe <ADC_Init+0x56>
    else if (config->Port == ADC_Configuration.Port._ADC2_)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a86      	ldr	r2, [pc, #536]	@ (8000fa8 <ADC_Init+0x240>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <ADC_Init+0x38>
        RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000d92:	4b84      	ldr	r3, [pc, #528]	@ (8000fa4 <ADC_Init+0x23c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	4a83      	ldr	r2, [pc, #524]	@ (8000fa4 <ADC_Init+0x23c>)
 8000d98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9e:	e00e      	b.n	8000dbe <ADC_Init+0x56>
    else if (config->Port == ADC_Configuration.Port._ADC3_)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a81      	ldr	r2, [pc, #516]	@ (8000fac <ADC_Init+0x244>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d106      	bne.n	8000db8 <ADC_Init+0x50>
        RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 8000daa:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa4 <ADC_Init+0x23c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a7d      	ldr	r2, [pc, #500]	@ (8000fa4 <ADC_Init+0x23c>)
 8000db0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	e002      	b.n	8000dbe <ADC_Init+0x56>
    else
        return -1;
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	e138      	b.n	8001030 <ADC_Init+0x2c8>

    // Configure the ADC scan mode
    config->Port->CR1 |= ADC_CR1_SCAN;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000dcc:	605a      	str	r2, [r3, #4]

    // Set the ADC resolution
    if (config->Resolution == ADC_Configuration.Resolution.Bit_12)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d108      	bne.n	8000dec <ADC_Init+0x84>
        config->Port->CR1 &= ~ADC_CR1_RES;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	e02f      	b.n	8000e4c <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_10)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000df2:	2200      	movs	r2, #0
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d108      	bne.n	8000e0a <ADC_Init+0xa2>
        config->Port->CR1 |=  1 << ADC_CR1_RES_Pos;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	e020      	b.n	8000e4c <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_8)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000e10:	2200      	movs	r2, #0
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d108      	bne.n	8000e28 <ADC_Init+0xc0>
        config->Port->CR1 |=  2 << ADC_CR1_RES_Pos;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	e011      	b.n	8000e4c <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_6)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d108      	bne.n	8000e46 <ADC_Init+0xde>
        config->Port->CR1 |=  3 << ADC_CR1_RES_Pos;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	e002      	b.n	8000e4c <ADC_Init+0xe4>
    else
        return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e0f1      	b.n	8001030 <ADC_Init+0x2c8>

    // Configure the conversion mode
    if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Single) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d108      	bne.n	8000e68 <ADC_Init+0x100>
        config->Port->CR2 &= ~ADC_CR2_CONT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0202 	bic.w	r2, r2, #2
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	e010      	b.n	8000e8a <ADC_Init+0x122>
    } else if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Continuous) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d108      	bne.n	8000e84 <ADC_Init+0x11c>
        config->Port->CR2 |= ADC_CR2_CONT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0202 	orr.w	r2, r2, #2
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	e002      	b.n	8000e8a <ADC_Init+0x122>
    } else {
        return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	e0d2      	b.n	8001030 <ADC_Init+0x2c8>
    }

    // Enable end-of-conversion selection
    config->Port->CR2 |= ADC_CR2_EOCS;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e98:	609a      	str	r2, [r3, #8]

    // Set the data alignment
    if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Right_Justified) {
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	791b      	ldrb	r3, [r3, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d108      	bne.n	8000eb6 <ADC_Init+0x14e>
        config->Port->CR2 &= ~ADC_CR2_ALIGN;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	e010      	b.n	8000ed8 <ADC_Init+0x170>
    } else if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Left_Justified) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	791b      	ldrb	r3, [r3, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d108      	bne.n	8000ed2 <ADC_Init+0x16a>
        config->Port->CR2 |= ADC_CR2_ALIGN;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	e002      	b.n	8000ed8 <ADC_Init+0x170>
    } else {
        return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e0ab      	b.n	8001030 <ADC_Init+0x2c8>
    }

    // Configure sampling settings and initialize ADC pins
    pin_temp = ADC_Sampling_Config(config);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fbe1 	bl	80006a0 <ADC_Sampling_Config>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b33      	ldr	r3, [pc, #204]	@ (8000fb0 <ADC_Init+0x248>)
 8000ee4:	701a      	strb	r2, [r3, #0]
    config->Port->SQR1 |= (pin_temp - 1) << ADC_SQR1_L_Pos;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eec:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <ADC_Init+0x248>)
 8000eee:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	051b      	lsls	r3, r3, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC_Pin_Init(config);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fcfd 	bl	8000900 <ADC_Pin_Init>

    // Configure external trigger for regular or injected channels
    if (config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	799b      	ldrb	r3, [r3, #6]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d11f      	bne.n	8000f50 <ADC_Init+0x1e8>
        config->Port->CR2 &= ~ADC_CR2_EXTSEL;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f1e:	609a      	str	r2, [r3, #8]

        if (config->External_Trigger.Enable == ENABLE) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	79db      	ldrb	r3, [r3, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d045      	beq.n	8000fb4 <ADC_Init+0x24c>
            // config->Port->CR2 |= config->External_Trigger.Trigger_Event << ADC_CR2_EXTSEL_Pos;
            config->Port->CR2 |= ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 62c0 	orr.w	r2, r2, #100663296	@ 0x6000000
 8000f36:	609a      	str	r2, [r3, #8]
            config->Port->CR2 |= ADC_CR2_EXTEN_0;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f46:	609a      	str	r2, [r3, #8]
            ADC_Timer_External_Trigger_Init(config);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff f98f 	bl	800026c <ADC_Timer_External_Trigger_Init>
 8000f4e:	e031      	b.n	8000fb4 <ADC_Init+0x24c>
        }
    } else if (config->Channel_Type == ADC_Configuration.Channel_Type.Injected) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	799b      	ldrb	r3, [r3, #6]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d11f      	bne.n	8000f9a <ADC_Init+0x232>
        config->Port->CR2 &= ~ADC_CR2_JEXTSEL;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8000f68:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= config->External_Trigger.Enable << ADC_CR2_JEXTEN_Pos;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6899      	ldr	r1, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	79db      	ldrb	r3, [r3, #7]
 8000f74:	051a      	lsls	r2, r3, #20
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= config->External_Trigger.Trigger_Event << ADC_CR2_JEXTSEL_Pos;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6899      	ldr	r1, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7a1b      	ldrb	r3, [r3, #8]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	609a      	str	r2, [r3, #8]
        ADC_Timer_External_Trigger_Init(config);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff f96a 	bl	800026c <ADC_Timer_External_Trigger_Init>
 8000f98:	e00c      	b.n	8000fb4 <ADC_Init+0x24c>
    } else {
        return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e047      	b.n	8001030 <ADC_Init+0x2c8>
 8000fa0:	40012000 	.word	0x40012000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40012100 	.word	0x40012100
 8000fac:	40012200 	.word	0x40012200
 8000fb0:	20000058 	.word	0x20000058
    }

    // Enable DMA and set DDS for continuous requests
    config->Port->CR2 |= ADC_CR2_DMA;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fc2:	609a      	str	r2, [r3, #8]
    config->Port->CR2 |= ADC_CR2_DDS;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fd2:	609a      	str	r2, [r3, #8]

    // Configure ADC sequence
    ADC_Sequence_Config(config);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fdcb 	bl	8000b70 <ADC_Sequence_Config>

    // Enable the ADC
    ADC_Enable(config);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f830 	bl	8001040 <ADC_Enable>

    // Initialize the DMA with the provided settings
    xADC.Request = DMA_Configuration.Request._ADC1;
 8000fe0:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <ADC_Init+0x2d0>)
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <ADC_Init+0x2d4>)
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8000fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    xADC.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <ADC_Init+0x2d0>)
 8000ff6:	611a      	str	r2, [r3, #16]
    xADC.circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8000ff8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <ADC_Init+0x2d0>)
 8000ffe:	619a      	str	r2, [r3, #24]
    xADC.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8001000:	2200      	movs	r2, #0
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <ADC_Init+0x2d0>)
 8001004:	60da      	str	r2, [r3, #12]
    xADC.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 8001006:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <ADC_Init+0x2d0>)
 800100c:	629a      	str	r2, [r3, #40]	@ 0x28
    xADC.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800100e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <ADC_Init+0x2d0>)
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
    xADC.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8001016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <ADC_Init+0x2d0>)
 800101e:	841a      	strh	r2, [r3, #32]
    xADC.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8001020:	2300      	movs	r3, #0
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <ADC_Init+0x2d0>)
 8001026:	845a      	strh	r2, [r3, #34]	@ 0x22
    DMA_Init(&xADC);
 8001028:	4803      	ldr	r0, [pc, #12]	@ (8001038 <ADC_Init+0x2d0>)
 800102a:	f001 fabf 	bl	80025ac <DMA_Init>

    // Return success
    return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	20000020 	.word	0x20000020
 800103c:	08003184 	.word	0x08003184

08001040 <ADC_Enable>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful enabling of the ADC.
 */
int8_t ADC_Enable(ADC_Config *config)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    // Enable the ADC by setting the ADON bit
    config->Port->CR2 |= ADC_CR2_ADON;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	609a      	str	r2, [r3, #8]

    // Introduce a delay for ADC stabilization
    Delay_milli(1000);
 8001058:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800106c <ADC_Enable+0x2c>
 800105c:	f7ff f8e2 	bl	8000224 <Delay_milli>

    // Return success
    return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	447a0000 	.word	0x447a0000

08001070 <ADC_Start>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful start of the ADC conversion, or -1 if the channel type is invalid.
 */
int8_t ADC_Start(ADC_Config *config)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    // Clear the ADC status register
    config->Port->SR = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

    // Start the conversion based on the channel type
    if (config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	799b      	ldrb	r3, [r3, #6]
 8001084:	2200      	movs	r2, #0
 8001086:	4293      	cmp	r3, r2
 8001088:	d108      	bne.n	800109c <ADC_Start+0x2c>
        config->Port->CR2 |= ADC_CR2_SWSTART;  // Start regular conversion
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	e010      	b.n	80010be <ADC_Start+0x4e>
    }
    else if (config->Channel_Type == ADC_Configuration.Channel_Type.Injected) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	799b      	ldrb	r3, [r3, #6]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d108      	bne.n	80010b8 <ADC_Start+0x48>
        config->Port->CR2 |= ADC_CR2_JSWSTART; // Start injected conversion
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	e002      	b.n	80010be <ADC_Start+0x4e>
    }
    else {
        return -1; // Return error if channel type is invalid
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	e000      	b.n	80010c0 <ADC_Start+0x50>
    }

    // Return success
    return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <ADC_Start_Capture>:
 * @param[out] buffer Pointer to the buffer where ADC data will be stored.
 *
 * @return int8_t Returns 1 on successful start of ADC capture.
 */
int8_t ADC_Start_Capture(ADC_Config *config, uint16_t *buffer)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    // Check for overrun and reset ADC if necessary
    if ((config->Port->SR) & (ADC_SR_OVR))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00f      	beq.n	8001104 <ADC_Start_Capture+0x38>
    {
        config->Port->CR2 &= ~ADC_CR2_ADON; // Turn off the ADC
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= ADC_CR2_ADON;  // Turn on the ADC
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	609a      	str	r2, [r3, #8]
    }

    // Configure DMA settings for the ADC capture
    xADC.buffer_length = pin_temp;
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <ADC_Start_Capture+0x7c>)
 8001106:	f993 3000 	ldrsb.w	r3, [r3]
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <ADC_Start_Capture+0x80>)
 800110e:	869a      	strh	r2, [r3, #52]	@ 0x34
    xADC.peripheral_address = (uint32_t)&(config->Port->DR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	334c      	adds	r3, #76	@ 0x4c
 8001116:	461a      	mov	r2, r3
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <ADC_Start_Capture+0x80>)
 800111a:	62da      	str	r2, [r3, #44]	@ 0x2c
    xADC.memory_address = (uint32_t)buffer;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <ADC_Start_Capture+0x80>)
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30

    // Initialize DMA with the target settings
    DMA_Set_Target(&xADC);
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <ADC_Start_Capture+0x80>)
 8001124:	f001 fbb0 	bl	8002888 <DMA_Set_Target>
    DMA_Set_Trigger(&xADC);
 8001128:	4808      	ldr	r0, [pc, #32]	@ (800114c <ADC_Start_Capture+0x80>)
 800112a:	f001 fbeb 	bl	8002904 <DMA_Set_Trigger>

    // Clear the ADC status register
    config->Port->SR = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]

    // Start the ADC conversion
    ADC_Start(config);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff9a 	bl	8001070 <ADC_Start>

    // Return success
    return 1;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000058 	.word	0x20000058
 800114c:	20000020 	.word	0x20000020

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8001190:	4b56      	ldr	r3, [pc, #344]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01b      	beq.n	80011d4 <DMA1_Stream0_IRQHandler+0x48>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800119c:	4b54      	ldr	r3, [pc, #336]	@ (80012f0 <DMA1_Stream0_IRQHandler+0x164>)
 800119e:	2201      	movs	r2, #1
 80011a0:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80011a2:	4b54      	ldr	r3, [pc, #336]	@ (80012f4 <DMA1_Stream0_IRQHandler+0x168>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 80011a8:	4b53      	ldr	r3, [pc, #332]	@ (80012f8 <DMA1_Stream0_IRQHandler+0x16c>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 80011ae:	4b53      	ldr	r3, [pc, #332]	@ (80012fc <DMA1_Stream0_IRQHandler+0x170>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 80011b4:	4b52      	ldr	r3, [pc, #328]	@ (8001300 <DMA1_Stream0_IRQHandler+0x174>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 80011ba:	4b52      	ldr	r3, [pc, #328]	@ (8001304 <DMA1_Stream0_IRQHandler+0x178>)
 80011bc:	2201      	movs	r2, #1
 80011be:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 80011c0:	4b51      	ldr	r3, [pc, #324]	@ (8001308 <DMA1_Stream0_IRQHandler+0x17c>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80011c6:	4b49      	ldr	r3, [pc, #292]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4a48      	ldr	r2, [pc, #288]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6093      	str	r3, [r2, #8]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 80011d2:	e086      	b.n	80012e2 <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 80011d4:	4b45      	ldr	r3, [pc, #276]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01b      	beq.n	8001218 <DMA1_Stream0_IRQHandler+0x8c>
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011e0:	4b43      	ldr	r3, [pc, #268]	@ (80012f0 <DMA1_Stream0_IRQHandler+0x164>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011e6:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <DMA1_Stream0_IRQHandler+0x168>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011ec:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <DMA1_Stream0_IRQHandler+0x16c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011f2:	4b42      	ldr	r3, [pc, #264]	@ (80012fc <DMA1_Stream0_IRQHandler+0x170>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011f8:	4b41      	ldr	r3, [pc, #260]	@ (8001300 <DMA1_Stream0_IRQHandler+0x174>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <DMA1_Stream0_IRQHandler+0x178>)
 8001200:	2201      	movs	r2, #1
 8001202:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8001204:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <DMA1_Stream0_IRQHandler+0x17c>)
 8001206:	2201      	movs	r2, #1
 8001208:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 800120a:	4b38      	ldr	r3, [pc, #224]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4a37      	ldr	r2, [pc, #220]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6093      	str	r3, [r2, #8]
}
 8001216:	e064      	b.n	80012e2 <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8001218:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01b      	beq.n	800125c <DMA1_Stream0_IRQHandler+0xd0>
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8001224:	4b32      	ldr	r3, [pc, #200]	@ (80012f0 <DMA1_Stream0_IRQHandler+0x164>)
 8001226:	2201      	movs	r2, #1
 8001228:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800122a:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <DMA1_Stream0_IRQHandler+0x168>)
 800122c:	2201      	movs	r2, #1
 800122e:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001230:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <DMA1_Stream0_IRQHandler+0x16c>)
 8001232:	2201      	movs	r2, #1
 8001234:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001236:	4b31      	ldr	r3, [pc, #196]	@ (80012fc <DMA1_Stream0_IRQHandler+0x170>)
 8001238:	2201      	movs	r2, #1
 800123a:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 800123c:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <DMA1_Stream0_IRQHandler+0x174>)
 800123e:	2201      	movs	r2, #1
 8001240:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001242:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <DMA1_Stream0_IRQHandler+0x178>)
 8001244:	2201      	movs	r2, #1
 8001246:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8001248:	4b2f      	ldr	r3, [pc, #188]	@ (8001308 <DMA1_Stream0_IRQHandler+0x17c>)
 800124a:	2201      	movs	r2, #1
 800124c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800124e:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4a26      	ldr	r2, [pc, #152]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6093      	str	r3, [r2, #8]
}
 800125a:	e042      	b.n	80012e2 <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_HTIF0)
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d01b      	beq.n	80012a0 <DMA1_Stream0_IRQHandler+0x114>
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <DMA1_Stream0_IRQHandler+0x164>)
 800126a:	2201      	movs	r2, #1
 800126c:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <DMA1_Stream0_IRQHandler+0x168>)
 8001270:	2201      	movs	r2, #1
 8001272:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <DMA1_Stream0_IRQHandler+0x16c>)
 8001276:	2201      	movs	r2, #1
 8001278:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <DMA1_Stream0_IRQHandler+0x170>)
 800127c:	2201      	movs	r2, #1
 800127e:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <DMA1_Stream0_IRQHandler+0x174>)
 8001282:	2201      	movs	r2, #1
 8001284:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001286:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <DMA1_Stream0_IRQHandler+0x178>)
 8001288:	2201      	movs	r2, #1
 800128a:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <DMA1_Stream0_IRQHandler+0x17c>)
 800128e:	2201      	movs	r2, #1
 8001290:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001292:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	6093      	str	r3, [r2, #8]
}
 800129e:	e020      	b.n	80012e2 <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TCIF0)
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01a      	beq.n	80012e2 <DMA1_Stream0_IRQHandler+0x156>
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <DMA1_Stream0_IRQHandler+0x164>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <DMA1_Stream0_IRQHandler+0x168>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <DMA1_Stream0_IRQHandler+0x16c>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <DMA1_Stream0_IRQHandler+0x170>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <DMA1_Stream0_IRQHandler+0x174>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <DMA1_Stream0_IRQHandler+0x178>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <DMA1_Stream0_IRQHandler+0x17c>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <DMA1_Stream0_IRQHandler+0x160>)
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	6093      	str	r3, [r2, #8]
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40026000 	.word	0x40026000
 80012f0:	20000204 	.word	0x20000204
 80012f4:	200001e4 	.word	0x200001e4
 80012f8:	20000124 	.word	0x20000124
 80012fc:	200000fc 	.word	0x200000fc
 8001300:	20000074 	.word	0x20000074
 8001304:	200000a4 	.word	0x200000a4
 8001308:	2000024c 	.word	0x2000024c

0800130c <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8001310:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001318:	2b00      	cmp	r3, #0
 800131a:	d015      	beq.n	8001348 <DMA1_Stream1_IRQHandler+0x3c>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800131c:	4b45      	ldr	r3, [pc, #276]	@ (8001434 <DMA1_Stream1_IRQHandler+0x128>)
 800131e:	2201      	movs	r2, #1
 8001320:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001322:	4b45      	ldr	r3, [pc, #276]	@ (8001438 <DMA1_Stream1_IRQHandler+0x12c>)
 8001324:	2201      	movs	r2, #1
 8001326:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001328:	4b44      	ldr	r3, [pc, #272]	@ (800143c <DMA1_Stream1_IRQHandler+0x130>)
 800132a:	2201      	movs	r2, #1
 800132c:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 800132e:	4b44      	ldr	r3, [pc, #272]	@ (8001440 <DMA1_Stream1_IRQHandler+0x134>)
 8001330:	2201      	movs	r2, #1
 8001332:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8001334:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <DMA1_Stream1_IRQHandler+0x138>)
 8001336:	2201      	movs	r2, #1
 8001338:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800133a:	4b3d      	ldr	r3, [pc, #244]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4a3c      	ldr	r2, [pc, #240]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 8001340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001344:	6093      	str	r3, [r2, #8]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 8001346:	e06e      	b.n	8001426 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8001348:	4b39      	ldr	r3, [pc, #228]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d015      	beq.n	8001380 <DMA1_Stream1_IRQHandler+0x74>
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <DMA1_Stream1_IRQHandler+0x128>)
 8001356:	2201      	movs	r2, #1
 8001358:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <DMA1_Stream1_IRQHandler+0x12c>)
 800135c:	2201      	movs	r2, #1
 800135e:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001360:	4b36      	ldr	r3, [pc, #216]	@ (800143c <DMA1_Stream1_IRQHandler+0x130>)
 8001362:	2201      	movs	r2, #1
 8001364:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001366:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <DMA1_Stream1_IRQHandler+0x134>)
 8001368:	2201      	movs	r2, #1
 800136a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 800136c:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <DMA1_Stream1_IRQHandler+0x138>)
 800136e:	2201      	movs	r2, #1
 8001370:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001372:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4a2e      	ldr	r2, [pc, #184]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	6093      	str	r3, [r2, #8]
}
 800137e:	e052      	b.n	8001426 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8001380:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001388:	2b00      	cmp	r3, #0
 800138a:	d015      	beq.n	80013b8 <DMA1_Stream1_IRQHandler+0xac>
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <DMA1_Stream1_IRQHandler+0x128>)
 800138e:	2201      	movs	r2, #1
 8001390:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <DMA1_Stream1_IRQHandler+0x12c>)
 8001394:	2201      	movs	r2, #1
 8001396:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <DMA1_Stream1_IRQHandler+0x130>)
 800139a:	2201      	movs	r2, #1
 800139c:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 800139e:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <DMA1_Stream1_IRQHandler+0x134>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <DMA1_Stream1_IRQHandler+0x138>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80013aa:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4a20      	ldr	r2, [pc, #128]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b4:	6093      	str	r3, [r2, #8]
}
 80013b6:	e036      	b.n	8001426 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_HTIF1)
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <DMA1_Stream1_IRQHandler+0xe4>
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <DMA1_Stream1_IRQHandler+0x128>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <DMA1_Stream1_IRQHandler+0x12c>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <DMA1_Stream1_IRQHandler+0x130>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <DMA1_Stream1_IRQHandler+0x134>)
 80013d8:	2201      	movs	r2, #1
 80013da:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <DMA1_Stream1_IRQHandler+0x138>)
 80013de:	2201      	movs	r2, #1
 80013e0:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 80013e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ec:	6093      	str	r3, [r2, #8]
}
 80013ee:	e01a      	b.n	8001426 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_TCIF1)
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d014      	beq.n	8001426 <DMA1_Stream1_IRQHandler+0x11a>
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <DMA1_Stream1_IRQHandler+0x128>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <DMA1_Stream1_IRQHandler+0x12c>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <DMA1_Stream1_IRQHandler+0x130>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <DMA1_Stream1_IRQHandler+0x134>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <DMA1_Stream1_IRQHandler+0x138>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <DMA1_Stream1_IRQHandler+0x124>)
 8001420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001424:	6093      	str	r3, [r2, #8]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40026000 	.word	0x40026000
 8001434:	200001b4 	.word	0x200001b4
 8001438:	20000214 	.word	0x20000214
 800143c:	2000011c 	.word	0x2000011c
 8001440:	200000e4 	.word	0x200000e4
 8001444:	20000254 	.word	0x20000254

08001448 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 800144c:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00c      	beq.n	8001472 <DMA1_Stream2_IRQHandler+0x2a>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001458:	4b2f      	ldr	r3, [pc, #188]	@ (8001518 <DMA1_Stream2_IRQHandler+0xd0>)
 800145a:	2201      	movs	r2, #1
 800145c:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 800145e:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <DMA1_Stream2_IRQHandler+0xd4>)
 8001460:	2201      	movs	r2, #1
 8001462:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a2a      	ldr	r2, [pc, #168]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146e:	6093      	str	r3, [r2, #8]
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 8001470:	e04a      	b.n	8001508 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8001472:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00c      	beq.n	8001498 <DMA1_Stream2_IRQHandler+0x50>
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <DMA1_Stream2_IRQHandler+0xd0>)
 8001480:	2201      	movs	r2, #1
 8001482:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <DMA1_Stream2_IRQHandler+0xd4>)
 8001486:	2201      	movs	r2, #1
 8001488:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800148a:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	6093      	str	r3, [r2, #8]
}
 8001496:	e037      	b.n	8001508 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00c      	beq.n	80014be <DMA1_Stream2_IRQHandler+0x76>
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <DMA1_Stream2_IRQHandler+0xd0>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <DMA1_Stream2_IRQHandler+0xd4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 80014b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014ba:	6093      	str	r3, [r2, #8]
}
 80014bc:	e024      	b.n	8001508 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_HTIF2)
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <DMA1_Stream2_IRQHandler+0x9c>
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <DMA1_Stream2_IRQHandler+0xd0>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <DMA1_Stream2_IRQHandler+0xd4>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4a0e      	ldr	r2, [pc, #56]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 80014dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014e0:	6093      	str	r3, [r2, #8]
}
 80014e2:	e011      	b.n	8001508 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_TCIF2)
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <DMA1_Stream2_IRQHandler+0xc0>
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <DMA1_Stream2_IRQHandler+0xd0>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <DMA1_Stream2_IRQHandler+0xd4>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <DMA1_Stream2_IRQHandler+0xcc>)
 8001502:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001506:	6093      	str	r3, [r2, #8]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40026000 	.word	0x40026000
 8001518:	200000ec 	.word	0x200000ec
 800151c:	2000025c 	.word	0x2000025c

08001520 <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8001524:	4b56      	ldr	r3, [pc, #344]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01b      	beq.n	8001568 <DMA1_Stream3_IRQHandler+0x48>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001530:	4b54      	ldr	r3, [pc, #336]	@ (8001684 <DMA1_Stream3_IRQHandler+0x164>)
 8001532:	2201      	movs	r2, #1
 8001534:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001536:	4b54      	ldr	r3, [pc, #336]	@ (8001688 <DMA1_Stream3_IRQHandler+0x168>)
 8001538:	2201      	movs	r2, #1
 800153a:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 800153c:	4b53      	ldr	r3, [pc, #332]	@ (800168c <DMA1_Stream3_IRQHandler+0x16c>)
 800153e:	2201      	movs	r2, #1
 8001540:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001542:	4b53      	ldr	r3, [pc, #332]	@ (8001690 <DMA1_Stream3_IRQHandler+0x170>)
 8001544:	2201      	movs	r2, #1
 8001546:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001548:	4b52      	ldr	r3, [pc, #328]	@ (8001694 <DMA1_Stream3_IRQHandler+0x174>)
 800154a:	2201      	movs	r2, #1
 800154c:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800154e:	4b52      	ldr	r3, [pc, #328]	@ (8001698 <DMA1_Stream3_IRQHandler+0x178>)
 8001550:	2201      	movs	r2, #1
 8001552:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8001554:	4b51      	ldr	r3, [pc, #324]	@ (800169c <DMA1_Stream3_IRQHandler+0x17c>)
 8001556:	2201      	movs	r2, #1
 8001558:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800155a:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001564:	6093      	str	r3, [r2, #8]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 8001566:	e086      	b.n	8001676 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 8001568:	4b45      	ldr	r3, [pc, #276]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01b      	beq.n	80015ac <DMA1_Stream3_IRQHandler+0x8c>
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001574:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <DMA1_Stream3_IRQHandler+0x164>)
 8001576:	2201      	movs	r2, #1
 8001578:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800157a:	4b43      	ldr	r3, [pc, #268]	@ (8001688 <DMA1_Stream3_IRQHandler+0x168>)
 800157c:	2201      	movs	r2, #1
 800157e:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001580:	4b42      	ldr	r3, [pc, #264]	@ (800168c <DMA1_Stream3_IRQHandler+0x16c>)
 8001582:	2201      	movs	r2, #1
 8001584:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001586:	4b42      	ldr	r3, [pc, #264]	@ (8001690 <DMA1_Stream3_IRQHandler+0x170>)
 8001588:	2201      	movs	r2, #1
 800158a:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <DMA1_Stream3_IRQHandler+0x174>)
 800158e:	2201      	movs	r2, #1
 8001590:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001592:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <DMA1_Stream3_IRQHandler+0x178>)
 8001594:	2201      	movs	r2, #1
 8001596:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8001598:	4b40      	ldr	r3, [pc, #256]	@ (800169c <DMA1_Stream3_IRQHandler+0x17c>)
 800159a:	2201      	movs	r2, #1
 800159c:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800159e:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4a37      	ldr	r2, [pc, #220]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 80015a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015a8:	6093      	str	r3, [r2, #8]
}
 80015aa:	e064      	b.n	8001676 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TEIF3)
 80015ac:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <DMA1_Stream3_IRQHandler+0xd0>
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80015b8:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <DMA1_Stream3_IRQHandler+0x164>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80015be:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <DMA1_Stream3_IRQHandler+0x168>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <DMA1_Stream3_IRQHandler+0x16c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80015ca:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <DMA1_Stream3_IRQHandler+0x170>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80015d0:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <DMA1_Stream3_IRQHandler+0x174>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <DMA1_Stream3_IRQHandler+0x178>)
 80015d8:	2201      	movs	r2, #1
 80015da:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 80015dc:	4b2f      	ldr	r3, [pc, #188]	@ (800169c <DMA1_Stream3_IRQHandler+0x17c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 80015e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ec:	6093      	str	r3, [r2, #8]
}
 80015ee:	e042      	b.n	8001676 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_HTIF3)
 80015f0:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01b      	beq.n	8001634 <DMA1_Stream3_IRQHandler+0x114>
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <DMA1_Stream3_IRQHandler+0x164>)
 80015fe:	2201      	movs	r2, #1
 8001600:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001602:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <DMA1_Stream3_IRQHandler+0x168>)
 8001604:	2201      	movs	r2, #1
 8001606:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <DMA1_Stream3_IRQHandler+0x16c>)
 800160a:	2201      	movs	r2, #1
 800160c:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <DMA1_Stream3_IRQHandler+0x170>)
 8001610:	2201      	movs	r2, #1
 8001612:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <DMA1_Stream3_IRQHandler+0x174>)
 8001616:	2201      	movs	r2, #1
 8001618:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <DMA1_Stream3_IRQHandler+0x178>)
 800161c:	2201      	movs	r2, #1
 800161e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001620:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <DMA1_Stream3_IRQHandler+0x17c>)
 8001622:	2201      	movs	r2, #1
 8001624:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 800162c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001630:	6093      	str	r3, [r2, #8]
}
 8001632:	e020      	b.n	8001676 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01a      	beq.n	8001676 <DMA1_Stream3_IRQHandler+0x156>
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001640:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <DMA1_Stream3_IRQHandler+0x164>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <DMA1_Stream3_IRQHandler+0x168>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <DMA1_Stream3_IRQHandler+0x16c>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <DMA1_Stream3_IRQHandler+0x170>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <DMA1_Stream3_IRQHandler+0x174>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <DMA1_Stream3_IRQHandler+0x178>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <DMA1_Stream3_IRQHandler+0x17c>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <DMA1_Stream3_IRQHandler+0x160>)
 8001670:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001674:	6093      	str	r3, [r2, #8]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40026000 	.word	0x40026000
 8001684:	2000020c 	.word	0x2000020c
 8001688:	200001ec 	.word	0x200001ec
 800168c:	2000011c 	.word	0x2000011c
 8001690:	200000ec 	.word	0x200000ec
 8001694:	2000005c 	.word	0x2000005c
 8001698:	2000009c 	.word	0x2000009c
 800169c:	20000264 	.word	0x20000264

080016a0 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 80016a4:	4b56      	ldr	r3, [pc, #344]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01b      	beq.n	80016e8 <DMA1_Stream4_IRQHandler+0x48>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80016b0:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <DMA1_Stream4_IRQHandler+0x164>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80016b6:	4b54      	ldr	r3, [pc, #336]	@ (8001808 <DMA1_Stream4_IRQHandler+0x168>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 80016bc:	4b53      	ldr	r3, [pc, #332]	@ (800180c <DMA1_Stream4_IRQHandler+0x16c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80016c2:	4b53      	ldr	r3, [pc, #332]	@ (8001810 <DMA1_Stream4_IRQHandler+0x170>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80016c8:	4b52      	ldr	r3, [pc, #328]	@ (8001814 <DMA1_Stream4_IRQHandler+0x174>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80016ce:	4b52      	ldr	r3, [pc, #328]	@ (8001818 <DMA1_Stream4_IRQHandler+0x178>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 80016d4:	4b51      	ldr	r3, [pc, #324]	@ (800181c <DMA1_Stream4_IRQHandler+0x17c>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80016da:	4b49      	ldr	r3, [pc, #292]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4a48      	ldr	r2, [pc, #288]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	60d3      	str	r3, [r2, #12]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 80016e6:	e086      	b.n	80017f6 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 80016e8:	4b45      	ldr	r3, [pc, #276]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01b      	beq.n	800172c <DMA1_Stream4_IRQHandler+0x8c>
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80016f4:	4b43      	ldr	r3, [pc, #268]	@ (8001804 <DMA1_Stream4_IRQHandler+0x164>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80016fa:	4b43      	ldr	r3, [pc, #268]	@ (8001808 <DMA1_Stream4_IRQHandler+0x168>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001700:	4b42      	ldr	r3, [pc, #264]	@ (800180c <DMA1_Stream4_IRQHandler+0x16c>)
 8001702:	2201      	movs	r2, #1
 8001704:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001706:	4b42      	ldr	r3, [pc, #264]	@ (8001810 <DMA1_Stream4_IRQHandler+0x170>)
 8001708:	2201      	movs	r2, #1
 800170a:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800170c:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <DMA1_Stream4_IRQHandler+0x174>)
 800170e:	2201      	movs	r2, #1
 8001710:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001712:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <DMA1_Stream4_IRQHandler+0x178>)
 8001714:	2201      	movs	r2, #1
 8001716:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8001718:	4b40      	ldr	r3, [pc, #256]	@ (800181c <DMA1_Stream4_IRQHandler+0x17c>)
 800171a:	2201      	movs	r2, #1
 800171c:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800171e:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4a37      	ldr	r2, [pc, #220]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	60d3      	str	r3, [r2, #12]
}
 800172a:	e064      	b.n	80017f6 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TEIF4)
 800172c:	4b34      	ldr	r3, [pc, #208]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <DMA1_Stream4_IRQHandler+0xd0>
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001738:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <DMA1_Stream4_IRQHandler+0x164>)
 800173a:	2201      	movs	r2, #1
 800173c:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <DMA1_Stream4_IRQHandler+0x168>)
 8001740:	2201      	movs	r2, #1
 8001742:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001744:	4b31      	ldr	r3, [pc, #196]	@ (800180c <DMA1_Stream4_IRQHandler+0x16c>)
 8001746:	2201      	movs	r2, #1
 8001748:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800174a:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <DMA1_Stream4_IRQHandler+0x170>)
 800174c:	2201      	movs	r2, #1
 800174e:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001750:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <DMA1_Stream4_IRQHandler+0x174>)
 8001752:	2201      	movs	r2, #1
 8001754:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001756:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <DMA1_Stream4_IRQHandler+0x178>)
 8001758:	2201      	movs	r2, #1
 800175a:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 800175c:	4b2f      	ldr	r3, [pc, #188]	@ (800181c <DMA1_Stream4_IRQHandler+0x17c>)
 800175e:	2201      	movs	r2, #1
 8001760:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4a26      	ldr	r2, [pc, #152]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	60d3      	str	r3, [r2, #12]
}
 800176e:	e042      	b.n	80017f6 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_HTIF4)
 8001770:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01b      	beq.n	80017b4 <DMA1_Stream4_IRQHandler+0x114>
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <DMA1_Stream4_IRQHandler+0x164>)
 800177e:	2201      	movs	r2, #1
 8001780:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <DMA1_Stream4_IRQHandler+0x168>)
 8001784:	2201      	movs	r2, #1
 8001786:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001788:	4b20      	ldr	r3, [pc, #128]	@ (800180c <DMA1_Stream4_IRQHandler+0x16c>)
 800178a:	2201      	movs	r2, #1
 800178c:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <DMA1_Stream4_IRQHandler+0x170>)
 8001790:	2201      	movs	r2, #1
 8001792:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <DMA1_Stream4_IRQHandler+0x174>)
 8001796:	2201      	movs	r2, #1
 8001798:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <DMA1_Stream4_IRQHandler+0x178>)
 800179c:	2201      	movs	r2, #1
 800179e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <DMA1_Stream4_IRQHandler+0x17c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	4a15      	ldr	r2, [pc, #84]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	60d3      	str	r3, [r2, #12]
}
 80017b2:	e020      	b.n	80017f6 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TCIF4)
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01a      	beq.n	80017f6 <DMA1_Stream4_IRQHandler+0x156>
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <DMA1_Stream4_IRQHandler+0x164>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <DMA1_Stream4_IRQHandler+0x168>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <DMA1_Stream4_IRQHandler+0x16c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <DMA1_Stream4_IRQHandler+0x170>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <DMA1_Stream4_IRQHandler+0x174>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <DMA1_Stream4_IRQHandler+0x178>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <DMA1_Stream4_IRQHandler+0x17c>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <DMA1_Stream4_IRQHandler+0x160>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	60d3      	str	r3, [r2, #12]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40026000 	.word	0x40026000
 8001804:	200001fc 	.word	0x200001fc
 8001808:	200001c4 	.word	0x200001c4
 800180c:	200000f4 	.word	0x200000f4
 8001810:	2000008c 	.word	0x2000008c
 8001814:	20000064 	.word	0x20000064
 8001818:	200000b4 	.word	0x200000b4
 800181c:	2000026c 	.word	0x2000026c

08001820 <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8001824:	4b56      	ldr	r3, [pc, #344]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01b      	beq.n	8001868 <DMA1_Stream5_IRQHandler+0x48>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001830:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <DMA1_Stream5_IRQHandler+0x164>)
 8001832:	2201      	movs	r2, #1
 8001834:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001836:	4b54      	ldr	r3, [pc, #336]	@ (8001988 <DMA1_Stream5_IRQHandler+0x168>)
 8001838:	2201      	movs	r2, #1
 800183a:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 800183c:	4b53      	ldr	r3, [pc, #332]	@ (800198c <DMA1_Stream5_IRQHandler+0x16c>)
 800183e:	2201      	movs	r2, #1
 8001840:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 8001842:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <DMA1_Stream5_IRQHandler+0x170>)
 8001844:	2201      	movs	r2, #1
 8001846:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001848:	4b52      	ldr	r3, [pc, #328]	@ (8001994 <DMA1_Stream5_IRQHandler+0x174>)
 800184a:	2201      	movs	r2, #1
 800184c:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800184e:	4b52      	ldr	r3, [pc, #328]	@ (8001998 <DMA1_Stream5_IRQHandler+0x178>)
 8001850:	2201      	movs	r2, #1
 8001852:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 8001854:	4b51      	ldr	r3, [pc, #324]	@ (800199c <DMA1_Stream5_IRQHandler+0x17c>)
 8001856:	2201      	movs	r2, #1
 8001858:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800185a:	4b49      	ldr	r3, [pc, #292]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4a48      	ldr	r2, [pc, #288]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 8001860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001864:	60d3      	str	r3, [r2, #12]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 8001866:	e086      	b.n	8001976 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 8001868:	4b45      	ldr	r3, [pc, #276]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <DMA1_Stream5_IRQHandler+0x8c>
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001874:	4b43      	ldr	r3, [pc, #268]	@ (8001984 <DMA1_Stream5_IRQHandler+0x164>)
 8001876:	2201      	movs	r2, #1
 8001878:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800187a:	4b43      	ldr	r3, [pc, #268]	@ (8001988 <DMA1_Stream5_IRQHandler+0x168>)
 800187c:	2201      	movs	r2, #1
 800187e:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8001880:	4b42      	ldr	r3, [pc, #264]	@ (800198c <DMA1_Stream5_IRQHandler+0x16c>)
 8001882:	2201      	movs	r2, #1
 8001884:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001886:	4b42      	ldr	r3, [pc, #264]	@ (8001990 <DMA1_Stream5_IRQHandler+0x170>)
 8001888:	2201      	movs	r2, #1
 800188a:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800188c:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <DMA1_Stream5_IRQHandler+0x174>)
 800188e:	2201      	movs	r2, #1
 8001890:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <DMA1_Stream5_IRQHandler+0x178>)
 8001894:	2201      	movs	r2, #1
 8001896:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8001898:	4b40      	ldr	r3, [pc, #256]	@ (800199c <DMA1_Stream5_IRQHandler+0x17c>)
 800189a:	2201      	movs	r2, #1
 800189c:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800189e:	4b38      	ldr	r3, [pc, #224]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4a37      	ldr	r2, [pc, #220]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a8:	60d3      	str	r3, [r2, #12]
}
 80018aa:	e064      	b.n	8001976 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80018ac:	4b34      	ldr	r3, [pc, #208]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01b      	beq.n	80018f0 <DMA1_Stream5_IRQHandler+0xd0>
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <DMA1_Stream5_IRQHandler+0x164>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80018be:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <DMA1_Stream5_IRQHandler+0x168>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 80018c4:	4b31      	ldr	r3, [pc, #196]	@ (800198c <DMA1_Stream5_IRQHandler+0x16c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 80018ca:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <DMA1_Stream5_IRQHandler+0x170>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80018d0:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <DMA1_Stream5_IRQHandler+0x174>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <DMA1_Stream5_IRQHandler+0x178>)
 80018d8:	2201      	movs	r2, #1
 80018da:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 80018dc:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <DMA1_Stream5_IRQHandler+0x17c>)
 80018de:	2201      	movs	r2, #1
 80018e0:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4a26      	ldr	r2, [pc, #152]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 80018e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ec:	60d3      	str	r3, [r2, #12]
}
 80018ee:	e042      	b.n	8001976 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_HTIF5)
 80018f0:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01b      	beq.n	8001934 <DMA1_Stream5_IRQHandler+0x114>
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80018fc:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <DMA1_Stream5_IRQHandler+0x164>)
 80018fe:	2201      	movs	r2, #1
 8001900:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <DMA1_Stream5_IRQHandler+0x168>)
 8001904:	2201      	movs	r2, #1
 8001906:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8001908:	4b20      	ldr	r3, [pc, #128]	@ (800198c <DMA1_Stream5_IRQHandler+0x16c>)
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <DMA1_Stream5_IRQHandler+0x170>)
 8001910:	2201      	movs	r2, #1
 8001912:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <DMA1_Stream5_IRQHandler+0x174>)
 8001916:	2201      	movs	r2, #1
 8001918:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <DMA1_Stream5_IRQHandler+0x178>)
 800191c:	2201      	movs	r2, #1
 800191e:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <DMA1_Stream5_IRQHandler+0x17c>)
 8001922:	2201      	movs	r2, #1
 8001924:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	4a15      	ldr	r2, [pc, #84]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 800192c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001930:	60d3      	str	r3, [r2, #12]
}
 8001932:	e020      	b.n	8001976 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01a      	beq.n	8001976 <DMA1_Stream5_IRQHandler+0x156>
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <DMA1_Stream5_IRQHandler+0x164>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <DMA1_Stream5_IRQHandler+0x168>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 800194c:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <DMA1_Stream5_IRQHandler+0x16c>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <DMA1_Stream5_IRQHandler+0x170>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001958:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <DMA1_Stream5_IRQHandler+0x174>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <DMA1_Stream5_IRQHandler+0x178>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <DMA1_Stream5_IRQHandler+0x17c>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <DMA1_Stream5_IRQHandler+0x160>)
 8001970:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001974:	60d3      	str	r3, [r2, #12]
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40026000 	.word	0x40026000
 8001984:	200000bc 	.word	0x200000bc
 8001988:	200001dc 	.word	0x200001dc
 800198c:	200001a4 	.word	0x200001a4
 8001990:	2000021c 	.word	0x2000021c
 8001994:	200001cc 	.word	0x200001cc
 8001998:	200000d4 	.word	0x200000d4
 800199c:	20000274 	.word	0x20000274

080019a0 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 80019a4:	4b49      	ldr	r3, [pc, #292]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d018      	beq.n	80019e2 <DMA1_Stream6_IRQHandler+0x42>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80019b0:	4b47      	ldr	r3, [pc, #284]	@ (8001ad0 <DMA1_Stream6_IRQHandler+0x130>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <DMA1_Stream6_IRQHandler+0x134>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 80019bc:	4b46      	ldr	r3, [pc, #280]	@ (8001ad8 <DMA1_Stream6_IRQHandler+0x138>)
 80019be:	2201      	movs	r2, #1
 80019c0:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 80019c2:	4b46      	ldr	r3, [pc, #280]	@ (8001adc <DMA1_Stream6_IRQHandler+0x13c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80019c8:	4b45      	ldr	r3, [pc, #276]	@ (8001ae0 <DMA1_Stream6_IRQHandler+0x140>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 80019ce:	4b45      	ldr	r3, [pc, #276]	@ (8001ae4 <DMA1_Stream6_IRQHandler+0x144>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80019d4:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4a3c      	ldr	r2, [pc, #240]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019de:	60d3      	str	r3, [r2, #12]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 80019e0:	e06e      	b.n	8001ac0 <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 80019e2:	4b3a      	ldr	r3, [pc, #232]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d015      	beq.n	8001a1a <DMA1_Stream6_IRQHandler+0x7a>
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80019ee:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <DMA1_Stream6_IRQHandler+0x134>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80019f4:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <DMA1_Stream6_IRQHandler+0x138>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <DMA1_Stream6_IRQHandler+0x13c>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001a00:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <DMA1_Stream6_IRQHandler+0x140>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <DMA1_Stream6_IRQHandler+0x144>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a2e      	ldr	r2, [pc, #184]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	e052      	b.n	8001ac0 <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8001a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <DMA1_Stream6_IRQHandler+0xb2>
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <DMA1_Stream6_IRQHandler+0x134>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <DMA1_Stream6_IRQHandler+0x138>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8001a32:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <DMA1_Stream6_IRQHandler+0x13c>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001a38:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <DMA1_Stream6_IRQHandler+0x140>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8001a3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <DMA1_Stream6_IRQHandler+0x144>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a20      	ldr	r2, [pc, #128]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	e036      	b.n	8001ac0 <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d015      	beq.n	8001a8a <DMA1_Stream6_IRQHandler+0xea>
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <DMA1_Stream6_IRQHandler+0x134>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <DMA1_Stream6_IRQHandler+0x138>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <DMA1_Stream6_IRQHandler+0x13c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <DMA1_Stream6_IRQHandler+0x140>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001a76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <DMA1_Stream6_IRQHandler+0x144>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	e01a      	b.n	8001ac0 <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d014      	beq.n	8001ac0 <DMA1_Stream6_IRQHandler+0x120>
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <DMA1_Stream6_IRQHandler+0x134>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <DMA1_Stream6_IRQHandler+0x138>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <DMA1_Stream6_IRQHandler+0x13c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <DMA1_Stream6_IRQHandler+0x140>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <DMA1_Stream6_IRQHandler+0x144>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <DMA1_Stream6_IRQHandler+0x12c>)
 8001aba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40026000 	.word	0x40026000
 8001ad0:	200001d4 	.word	0x200001d4
 8001ad4:	2000019c 	.word	0x2000019c
 8001ad8:	20000124 	.word	0x20000124
 8001adc:	200000dc 	.word	0x200000dc
 8001ae0:	2000007c 	.word	0x2000007c
 8001ae4:	2000027c 	.word	0x2000027c

08001ae8 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8001aec:	4b56      	ldr	r3, [pc, #344]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01b      	beq.n	8001b30 <DMA1_Stream7_IRQHandler+0x48>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001af8:	4b54      	ldr	r3, [pc, #336]	@ (8001c4c <DMA1_Stream7_IRQHandler+0x164>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001afe:	4b54      	ldr	r3, [pc, #336]	@ (8001c50 <DMA1_Stream7_IRQHandler+0x168>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001b04:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <DMA1_Stream7_IRQHandler+0x16c>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001b0a:	4b53      	ldr	r3, [pc, #332]	@ (8001c58 <DMA1_Stream7_IRQHandler+0x170>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001b10:	4b52      	ldr	r3, [pc, #328]	@ (8001c5c <DMA1_Stream7_IRQHandler+0x174>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8001b16:	4b52      	ldr	r3, [pc, #328]	@ (8001c60 <DMA1_Stream7_IRQHandler+0x178>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8001b1c:	4b51      	ldr	r3, [pc, #324]	@ (8001c64 <DMA1_Stream7_IRQHandler+0x17c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001b22:	4b49      	ldr	r3, [pc, #292]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a48      	ldr	r2, [pc, #288]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b2c:	60d3      	str	r3, [r2, #12]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 8001b2e:	e086      	b.n	8001c3e <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8001b30:	4b45      	ldr	r3, [pc, #276]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <DMA1_Stream7_IRQHandler+0x8c>
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b3c:	4b43      	ldr	r3, [pc, #268]	@ (8001c4c <DMA1_Stream7_IRQHandler+0x164>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b42:	4b43      	ldr	r3, [pc, #268]	@ (8001c50 <DMA1_Stream7_IRQHandler+0x168>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b48:	4b42      	ldr	r3, [pc, #264]	@ (8001c54 <DMA1_Stream7_IRQHandler+0x16c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b4e:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <DMA1_Stream7_IRQHandler+0x170>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b54:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <DMA1_Stream7_IRQHandler+0x174>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001b5a:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <DMA1_Stream7_IRQHandler+0x178>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8001b60:	4b40      	ldr	r3, [pc, #256]	@ (8001c64 <DMA1_Stream7_IRQHandler+0x17c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001b66:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4a37      	ldr	r2, [pc, #220]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001b6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b70:	60d3      	str	r3, [r2, #12]
}
 8001b72:	e064      	b.n	8001c3e <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8001b74:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <DMA1_Stream7_IRQHandler+0xd0>
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001b80:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <DMA1_Stream7_IRQHandler+0x164>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001b86:	4b32      	ldr	r3, [pc, #200]	@ (8001c50 <DMA1_Stream7_IRQHandler+0x168>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001b8c:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <DMA1_Stream7_IRQHandler+0x16c>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001b92:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <DMA1_Stream7_IRQHandler+0x170>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <DMA1_Stream7_IRQHandler+0x174>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001b9e:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <DMA1_Stream7_IRQHandler+0x178>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <DMA1_Stream7_IRQHandler+0x17c>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001baa:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001bb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bb4:	60d3      	str	r3, [r2, #12]
}
 8001bb6:	e042      	b.n	8001c3e <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8001bb8:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <DMA1_Stream7_IRQHandler+0x114>
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <DMA1_Stream7_IRQHandler+0x164>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001bca:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <DMA1_Stream7_IRQHandler+0x168>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001bd0:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <DMA1_Stream7_IRQHandler+0x16c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <DMA1_Stream7_IRQHandler+0x170>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <DMA1_Stream7_IRQHandler+0x174>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <DMA1_Stream7_IRQHandler+0x178>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <DMA1_Stream7_IRQHandler+0x17c>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001bee:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4a15      	ldr	r2, [pc, #84]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001bf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bf8:	60d3      	str	r3, [r2, #12]
}
 8001bfa:	e020      	b.n	8001c3e <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01a      	beq.n	8001c3e <DMA1_Stream7_IRQHandler+0x156>
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001c08:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <DMA1_Stream7_IRQHandler+0x164>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <DMA1_Stream7_IRQHandler+0x168>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <DMA1_Stream7_IRQHandler+0x16c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <DMA1_Stream7_IRQHandler+0x170>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <DMA1_Stream7_IRQHandler+0x174>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <DMA1_Stream7_IRQHandler+0x178>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <DMA1_Stream7_IRQHandler+0x17c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <DMA1_Stream7_IRQHandler+0x160>)
 8001c38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c3c:	60d3      	str	r3, [r2, #12]
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40026000 	.word	0x40026000
 8001c4c:	2000006c 	.word	0x2000006c
 8001c50:	20000084 	.word	0x20000084
 8001c54:	20000104 	.word	0x20000104
 8001c58:	200001f4 	.word	0x200001f4
 8001c5c:	200001ac 	.word	0x200001ac
 8001c60:	200001bc 	.word	0x200001bc
 8001c64:	20000284 	.word	0x20000284

08001c68 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8001c6c:	4b47      	ldr	r3, [pc, #284]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <DMA2_Stream0_IRQHandler+0x3c>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001c78:	4b45      	ldr	r3, [pc, #276]	@ (8001d90 <DMA2_Stream0_IRQHandler+0x128>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8001c7e:	4b45      	ldr	r3, [pc, #276]	@ (8001d94 <DMA2_Stream0_IRQHandler+0x12c>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001c84:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <DMA2_Stream0_IRQHandler+0x130>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8001c8a:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <DMA2_Stream0_IRQHandler+0x134>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8001c90:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <DMA2_Stream0_IRQHandler+0x138>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001c96:	4b3d      	ldr	r3, [pc, #244]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6093      	str	r3, [r2, #8]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 8001ca2:	e06e      	b.n	8001d82 <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8001ca4:	4b39      	ldr	r3, [pc, #228]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d015      	beq.n	8001cdc <DMA2_Stream0_IRQHandler+0x74>
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cb0:	4b37      	ldr	r3, [pc, #220]	@ (8001d90 <DMA2_Stream0_IRQHandler+0x128>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cb6:	4b37      	ldr	r3, [pc, #220]	@ (8001d94 <DMA2_Stream0_IRQHandler+0x12c>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cbc:	4b36      	ldr	r3, [pc, #216]	@ (8001d98 <DMA2_Stream0_IRQHandler+0x130>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cc2:	4b36      	ldr	r3, [pc, #216]	@ (8001d9c <DMA2_Stream0_IRQHandler+0x134>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8001cc8:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <DMA2_Stream0_IRQHandler+0x138>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001cce:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6093      	str	r3, [r2, #8]
}
 8001cda:	e052      	b.n	8001d82 <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d015      	beq.n	8001d14 <DMA2_Stream0_IRQHandler+0xac>
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001ce8:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <DMA2_Stream0_IRQHandler+0x128>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8001cee:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <DMA2_Stream0_IRQHandler+0x12c>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <DMA2_Stream0_IRQHandler+0x130>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8001cfa:	4b28      	ldr	r3, [pc, #160]	@ (8001d9c <DMA2_Stream0_IRQHandler+0x134>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <DMA2_Stream0_IRQHandler+0x138>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4a20      	ldr	r2, [pc, #128]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6093      	str	r3, [r2, #8]
}
 8001d12:	e036      	b.n	8001d82 <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d015      	beq.n	8001d4c <DMA2_Stream0_IRQHandler+0xe4>
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <DMA2_Stream0_IRQHandler+0x128>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <DMA2_Stream0_IRQHandler+0x12c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <DMA2_Stream0_IRQHandler+0x130>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <DMA2_Stream0_IRQHandler+0x134>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <DMA2_Stream0_IRQHandler+0x138>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6093      	str	r3, [r2, #8]
}
 8001d4a:	e01a      	b.n	8001d82 <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d014      	beq.n	8001d82 <DMA2_Stream0_IRQHandler+0x11a>
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <DMA2_Stream0_IRQHandler+0x128>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <DMA2_Stream0_IRQHandler+0x12c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <DMA2_Stream0_IRQHandler+0x130>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <DMA2_Stream0_IRQHandler+0x134>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <DMA2_Stream0_IRQHandler+0x138>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4a04      	ldr	r2, [pc, #16]	@ (8001d8c <DMA2_Stream0_IRQHandler+0x124>)
 8001d7c:	f043 0320 	orr.w	r3, r3, #32
 8001d80:	6093      	str	r3, [r2, #8]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40026400 	.word	0x40026400
 8001d90:	20000094 	.word	0x20000094
 8001d94:	20000234 	.word	0x20000234
 8001d98:	20000154 	.word	0x20000154
 8001d9c:	2000015c 	.word	0x2000015c
 8001da0:	2000028c 	.word	0x2000028c

08001da4 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8001da8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01e      	beq.n	8001df2 <DMA2_Stream1_IRQHandler+0x4e>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8001db4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f28 <DMA2_Stream1_IRQHandler+0x184>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001dba:	4b5c      	ldr	r3, [pc, #368]	@ (8001f2c <DMA2_Stream1_IRQHandler+0x188>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001dc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f30 <DMA2_Stream1_IRQHandler+0x18c>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8001dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x190>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x194>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x198>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001dd8:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <DMA2_Stream1_IRQHandler+0x19c>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8001dde:	4b59      	ldr	r3, [pc, #356]	@ (8001f44 <DMA2_Stream1_IRQHandler+0x1a0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001de4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dee:	6093      	str	r3, [r2, #8]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 8001df0:	e092      	b.n	8001f18 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8001df2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01e      	beq.n	8001e3c <DMA2_Stream1_IRQHandler+0x98>
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <DMA2_Stream1_IRQHandler+0x184>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e04:	4b49      	ldr	r3, [pc, #292]	@ (8001f2c <DMA2_Stream1_IRQHandler+0x188>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e0a:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <DMA2_Stream1_IRQHandler+0x18c>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e10:	4b48      	ldr	r3, [pc, #288]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x190>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e16:	4b48      	ldr	r3, [pc, #288]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x194>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e1c:	4b47      	ldr	r3, [pc, #284]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x198>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <DMA2_Stream1_IRQHandler+0x19c>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8001e28:	4b46      	ldr	r3, [pc, #280]	@ (8001f44 <DMA2_Stream1_IRQHandler+0x1a0>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a3c      	ldr	r2, [pc, #240]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	6093      	str	r3, [r2, #8]
}
 8001e3a:	e06d      	b.n	8001f18 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8001e3c:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01e      	beq.n	8001e86 <DMA2_Stream1_IRQHandler+0xe2>
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8001e48:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <DMA2_Stream1_IRQHandler+0x184>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001e4e:	4b37      	ldr	r3, [pc, #220]	@ (8001f2c <DMA2_Stream1_IRQHandler+0x188>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001e54:	4b36      	ldr	r3, [pc, #216]	@ (8001f30 <DMA2_Stream1_IRQHandler+0x18c>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8001e5a:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x190>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8001e60:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x194>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8001e66:	4b35      	ldr	r3, [pc, #212]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x198>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001e6c:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <DMA2_Stream1_IRQHandler+0x19c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8001e72:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <DMA2_Stream1_IRQHandler+0x1a0>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a29      	ldr	r2, [pc, #164]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e82:	6093      	str	r3, [r2, #8]
}
 8001e84:	e048      	b.n	8001f18 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8001e86:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01e      	beq.n	8001ed0 <DMA2_Stream1_IRQHandler+0x12c>
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e92:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <DMA2_Stream1_IRQHandler+0x184>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e98:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <DMA2_Stream1_IRQHandler+0x188>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001e9e:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <DMA2_Stream1_IRQHandler+0x18c>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x190>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x194>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x198>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001eb6:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <DMA2_Stream1_IRQHandler+0x19c>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <DMA2_Stream1_IRQHandler+0x1a0>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ecc:	6093      	str	r3, [r2, #8]
}
 8001ece:	e023      	b.n	8001f18 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01d      	beq.n	8001f18 <DMA2_Stream1_IRQHandler+0x174>
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <DMA2_Stream1_IRQHandler+0x184>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <DMA2_Stream1_IRQHandler+0x188>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <DMA2_Stream1_IRQHandler+0x18c>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <DMA2_Stream1_IRQHandler+0x190>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <DMA2_Stream1_IRQHandler+0x194>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <DMA2_Stream1_IRQHandler+0x198>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <DMA2_Stream1_IRQHandler+0x19c>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <DMA2_Stream1_IRQHandler+0x1a0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <DMA2_Stream1_IRQHandler+0x180>)
 8001f12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f16:	6093      	str	r3, [r2, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40026400 	.word	0x40026400
 8001f28:	20000244 	.word	0x20000244
 8001f2c:	20000134 	.word	0x20000134
 8001f30:	20000164 	.word	0x20000164
 8001f34:	2000018c 	.word	0x2000018c
 8001f38:	20000194 	.word	0x20000194
 8001f3c:	2000022c 	.word	0x2000022c
 8001f40:	2000010c 	.word	0x2000010c
 8001f44:	20000294 	.word	0x20000294

08001f48 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8001f4c:	4b40      	ldr	r3, [pc, #256]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d012      	beq.n	8001f7e <DMA2_Stream2_IRQHandler+0x36>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001f58:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <DMA2_Stream2_IRQHandler+0x10c>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002058 <DMA2_Stream2_IRQHandler+0x110>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8001f64:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <DMA2_Stream2_IRQHandler+0x114>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002060 <DMA2_Stream2_IRQHandler+0x118>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001f70:	4b37      	ldr	r3, [pc, #220]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a36      	ldr	r2, [pc, #216]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7a:	6093      	str	r3, [r2, #8]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 8001f7c:	e062      	b.n	8002044 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <DMA2_Stream2_IRQHandler+0x68>
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f8a:	4b32      	ldr	r3, [pc, #200]	@ (8002054 <DMA2_Stream2_IRQHandler+0x10c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f90:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <DMA2_Stream2_IRQHandler+0x110>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f96:	4b31      	ldr	r3, [pc, #196]	@ (800205c <DMA2_Stream2_IRQHandler+0x114>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <DMA2_Stream2_IRQHandler+0x118>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fac:	6093      	str	r3, [r2, #8]
}
 8001fae:	e049      	b.n	8002044 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8001fb0:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <DMA2_Stream2_IRQHandler+0x9a>
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <DMA2_Stream2_IRQHandler+0x10c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001fc2:	4b25      	ldr	r3, [pc, #148]	@ (8002058 <DMA2_Stream2_IRQHandler+0x110>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001fc8:	4b24      	ldr	r3, [pc, #144]	@ (800205c <DMA2_Stream2_IRQHandler+0x114>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8001fce:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <DMA2_Stream2_IRQHandler+0x118>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001fda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fde:	6093      	str	r3, [r2, #8]
}
 8001fe0:	e030      	b.n	8002044 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d012      	beq.n	8002014 <DMA2_Stream2_IRQHandler+0xcc>
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <DMA2_Stream2_IRQHandler+0x10c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <DMA2_Stream2_IRQHandler+0x110>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <DMA2_Stream2_IRQHandler+0x114>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8002000:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <DMA2_Stream2_IRQHandler+0x118>)
 8002002:	2201      	movs	r2, #1
 8002004:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a11      	ldr	r2, [pc, #68]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 800200c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002010:	6093      	str	r3, [r2, #8]
}
 8002012:	e017      	b.n	8002044 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d011      	beq.n	8002044 <DMA2_Stream2_IRQHandler+0xfc>
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <DMA2_Stream2_IRQHandler+0x10c>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <DMA2_Stream2_IRQHandler+0x110>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <DMA2_Stream2_IRQHandler+0x114>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8002032:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <DMA2_Stream2_IRQHandler+0x118>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <DMA2_Stream2_IRQHandler+0x108>)
 800203e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002042:	6093      	str	r3, [r2, #8]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40026400 	.word	0x40026400
 8002054:	2000016c 	.word	0x2000016c
 8002058:	200000c4 	.word	0x200000c4
 800205c:	2000023c 	.word	0x2000023c
 8002060:	2000029c 	.word	0x2000029c

08002064 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8002068:	4b38      	ldr	r3, [pc, #224]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00f      	beq.n	8002094 <DMA2_Stream3_IRQHandler+0x30>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <DMA2_Stream3_IRQHandler+0xec>)
 8002076:	2201      	movs	r2, #1
 8002078:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800207a:	4b36      	ldr	r3, [pc, #216]	@ (8002154 <DMA2_Stream3_IRQHandler+0xf0>)
 800207c:	2201      	movs	r2, #1
 800207e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8002080:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <DMA2_Stream3_IRQHandler+0xf4>)
 8002082:	2201      	movs	r2, #1
 8002084:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8002086:	4b31      	ldr	r3, [pc, #196]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4a30      	ldr	r2, [pc, #192]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 800208c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002090:	6093      	str	r3, [r2, #8]
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 8002092:	e056      	b.n	8002142 <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00f      	beq.n	80020c0 <DMA2_Stream3_IRQHandler+0x5c>
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <DMA2_Stream3_IRQHandler+0xec>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80020a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <DMA2_Stream3_IRQHandler+0xf0>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <DMA2_Stream3_IRQHandler+0xf4>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80020b2:	4b26      	ldr	r3, [pc, #152]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a25      	ldr	r2, [pc, #148]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020bc:	6093      	str	r3, [r2, #8]
}
 80020be:	e040      	b.n	8002142 <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_TEIF3)
 80020c0:	4b22      	ldr	r3, [pc, #136]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00f      	beq.n	80020ec <DMA2_Stream3_IRQHandler+0x88>
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 80020cc:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <DMA2_Stream3_IRQHandler+0xec>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <DMA2_Stream3_IRQHandler+0xf0>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <DMA2_Stream3_IRQHandler+0xf4>)
 80020da:	2201      	movs	r2, #1
 80020dc:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80020de:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4a1a      	ldr	r2, [pc, #104]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 80020e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020e8:	6093      	str	r3, [r2, #8]
}
 80020ea:	e02a      	b.n	8002142 <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_HTIF3)
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00f      	beq.n	8002118 <DMA2_Stream3_IRQHandler+0xb4>
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <DMA2_Stream3_IRQHandler+0xec>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <DMA2_Stream3_IRQHandler+0xf0>)
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <DMA2_Stream3_IRQHandler+0xf4>)
 8002106:	2201      	movs	r2, #1
 8002108:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 8002110:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002114:	6093      	str	r3, [r2, #8]
}
 8002116:	e014      	b.n	8002142 <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00e      	beq.n	8002142 <DMA2_Stream3_IRQHandler+0xde>
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8002124:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <DMA2_Stream3_IRQHandler+0xec>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <DMA2_Stream3_IRQHandler+0xf0>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <DMA2_Stream3_IRQHandler+0xf4>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8002136:	4b05      	ldr	r3, [pc, #20]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4a04      	ldr	r2, [pc, #16]	@ (800214c <DMA2_Stream3_IRQHandler+0xe8>)
 800213c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002140:	6093      	str	r3, [r2, #8]
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40026400 	.word	0x40026400
 8002150:	20000224 	.word	0x20000224
 8002154:	200000ac 	.word	0x200000ac
 8002158:	200002a4 	.word	0x200002a4

0800215c <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8002160:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00f      	beq.n	800218c <DMA2_Stream4_IRQHandler+0x30>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 800216c:	4b36      	ldr	r3, [pc, #216]	@ (8002248 <DMA2_Stream4_IRQHandler+0xec>)
 800216e:	2201      	movs	r2, #1
 8002170:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002172:	4b36      	ldr	r3, [pc, #216]	@ (800224c <DMA2_Stream4_IRQHandler+0xf0>)
 8002174:	2201      	movs	r2, #1
 8002176:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8002178:	4b35      	ldr	r3, [pc, #212]	@ (8002250 <DMA2_Stream4_IRQHandler+0xf4>)
 800217a:	2201      	movs	r2, #1
 800217c:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	60d3      	str	r3, [r2, #12]
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 800218a:	e056      	b.n	800223a <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 800218c:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00f      	beq.n	80021b8 <DMA2_Stream4_IRQHandler+0x5c>
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002198:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <DMA2_Stream4_IRQHandler+0xec>)
 800219a:	2201      	movs	r2, #1
 800219c:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800219e:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <DMA2_Stream4_IRQHandler+0xf0>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80021a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <DMA2_Stream4_IRQHandler+0xf4>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80021aa:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a25      	ldr	r2, [pc, #148]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	60d3      	str	r3, [r2, #12]
}
 80021b6:	e040      	b.n	800223a <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TEIF4)
 80021b8:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00f      	beq.n	80021e4 <DMA2_Stream4_IRQHandler+0x88>
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80021c4:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <DMA2_Stream4_IRQHandler+0xec>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80021ca:	4b20      	ldr	r3, [pc, #128]	@ (800224c <DMA2_Stream4_IRQHandler+0xf0>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 80021d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <DMA2_Stream4_IRQHandler+0xf4>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80021d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a1a      	ldr	r2, [pc, #104]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	60d3      	str	r3, [r2, #12]
}
 80021e2:	e02a      	b.n	800223a <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_HTIF4)
 80021e4:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00f      	beq.n	8002210 <DMA2_Stream4_IRQHandler+0xb4>
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <DMA2_Stream4_IRQHandler+0xec>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <DMA2_Stream4_IRQHandler+0xf0>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <DMA2_Stream4_IRQHandler+0xf4>)
 80021fe:	2201      	movs	r2, #1
 8002200:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002208:	f043 0310 	orr.w	r3, r3, #16
 800220c:	60d3      	str	r3, [r2, #12]
}
 800220e:	e014      	b.n	800223a <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <DMA2_Stream4_IRQHandler+0xde>
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <DMA2_Stream4_IRQHandler+0xec>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <DMA2_Stream4_IRQHandler+0xf0>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8002228:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <DMA2_Stream4_IRQHandler+0xf4>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <DMA2_Stream4_IRQHandler+0xe8>)
 8002234:	f043 0320 	orr.w	r3, r3, #32
 8002238:	60d3      	str	r3, [r2, #12]
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40026400 	.word	0x40026400
 8002248:	2000014c 	.word	0x2000014c
 800224c:	20000174 	.word	0x20000174
 8002250:	200002ac 	.word	0x200002ac

08002254 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8002258:	4b31      	ldr	r3, [pc, #196]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00c      	beq.n	800227e <DMA2_Stream5_IRQHandler+0x2a>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8002264:	4b2f      	ldr	r3, [pc, #188]	@ (8002324 <DMA2_Stream5_IRQHandler+0xd0>)
 8002266:	2201      	movs	r2, #1
 8002268:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 800226a:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <DMA2_Stream5_IRQHandler+0xd4>)
 800226c:	2201      	movs	r2, #1
 800226e:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8002270:	4b2b      	ldr	r3, [pc, #172]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a2a      	ldr	r2, [pc, #168]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 8002276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800227a:	60d3      	str	r3, [r2, #12]
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 800227c:	e04a      	b.n	8002314 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 800227e:	4b28      	ldr	r3, [pc, #160]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <DMA2_Stream5_IRQHandler+0x50>
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <DMA2_Stream5_IRQHandler+0xd0>)
 800228c:	2201      	movs	r2, #1
 800228e:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8002290:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <DMA2_Stream5_IRQHandler+0xd4>)
 8002292:	2201      	movs	r2, #1
 8002294:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8002296:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4a21      	ldr	r2, [pc, #132]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a0:	60d3      	str	r3, [r2, #12]
}
 80022a2:	e037      	b.n	8002314 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_TEIF5)
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00c      	beq.n	80022ca <DMA2_Stream5_IRQHandler+0x76>
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <DMA2_Stream5_IRQHandler+0xd0>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <DMA2_Stream5_IRQHandler+0xd4>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	e024      	b.n	8002314 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_HTIF5)
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <DMA2_Stream5_IRQHandler+0x9c>
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <DMA2_Stream5_IRQHandler+0xd0>)
 80022d8:	2201      	movs	r2, #1
 80022da:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <DMA2_Stream5_IRQHandler+0xd4>)
 80022de:	2201      	movs	r2, #1
 80022e0:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 80022e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ec:	60d3      	str	r3, [r2, #12]
}
 80022ee:	e011      	b.n	8002314 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_TCIF5)
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <DMA2_Stream5_IRQHandler+0xc0>
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <DMA2_Stream5_IRQHandler+0xd0>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <DMA2_Stream5_IRQHandler+0xd4>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <DMA2_Stream5_IRQHandler+0xcc>)
 800230e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40026400 	.word	0x40026400
 8002324:	2000012c 	.word	0x2000012c
 8002328:	200002b4 	.word	0x200002b4

0800232c <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8002330:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <DMA2_Stream6_IRQHandler+0x3c>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 800233c:	4b45      	ldr	r3, [pc, #276]	@ (8002454 <DMA2_Stream6_IRQHandler+0x128>)
 800233e:	2201      	movs	r2, #1
 8002340:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002342:	4b45      	ldr	r3, [pc, #276]	@ (8002458 <DMA2_Stream6_IRQHandler+0x12c>)
 8002344:	2201      	movs	r2, #1
 8002346:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002348:	4b44      	ldr	r3, [pc, #272]	@ (800245c <DMA2_Stream6_IRQHandler+0x130>)
 800234a:	2201      	movs	r2, #1
 800234c:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 800234e:	4b44      	ldr	r3, [pc, #272]	@ (8002460 <DMA2_Stream6_IRQHandler+0x134>)
 8002350:	2201      	movs	r2, #1
 8002352:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8002354:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <DMA2_Stream6_IRQHandler+0x138>)
 8002356:	2201      	movs	r2, #1
 8002358:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a3c      	ldr	r2, [pc, #240]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002364:	60d3      	str	r3, [r2, #12]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 8002366:	e06e      	b.n	8002446 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8002368:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <DMA2_Stream6_IRQHandler+0x74>
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8002374:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <DMA2_Stream6_IRQHandler+0x128>)
 8002376:	2201      	movs	r2, #1
 8002378:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800237a:	4b37      	ldr	r3, [pc, #220]	@ (8002458 <DMA2_Stream6_IRQHandler+0x12c>)
 800237c:	2201      	movs	r2, #1
 800237e:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002380:	4b36      	ldr	r3, [pc, #216]	@ (800245c <DMA2_Stream6_IRQHandler+0x130>)
 8002382:	2201      	movs	r2, #1
 8002384:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002386:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <DMA2_Stream6_IRQHandler+0x134>)
 8002388:	2201      	movs	r2, #1
 800238a:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <DMA2_Stream6_IRQHandler+0x138>)
 800238e:	2201      	movs	r2, #1
 8002390:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8002392:	4b2f      	ldr	r3, [pc, #188]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a2e      	ldr	r2, [pc, #184]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800239c:	60d3      	str	r3, [r2, #12]
}
 800239e:	e052      	b.n	8002446 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_TEIF6)
 80023a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <DMA2_Stream6_IRQHandler+0xac>
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80023ac:	4b29      	ldr	r3, [pc, #164]	@ (8002454 <DMA2_Stream6_IRQHandler+0x128>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80023b2:	4b29      	ldr	r3, [pc, #164]	@ (8002458 <DMA2_Stream6_IRQHandler+0x12c>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <DMA2_Stream6_IRQHandler+0x130>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <DMA2_Stream6_IRQHandler+0x134>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 80023c4:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <DMA2_Stream6_IRQHandler+0x138>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4a20      	ldr	r2, [pc, #128]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 80023d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023d4:	60d3      	str	r3, [r2, #12]
}
 80023d6:	e036      	b.n	8002446 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_HTIF6)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <DMA2_Stream6_IRQHandler+0xe4>
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <DMA2_Stream6_IRQHandler+0x128>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <DMA2_Stream6_IRQHandler+0x12c>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <DMA2_Stream6_IRQHandler+0x130>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <DMA2_Stream6_IRQHandler+0x134>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <DMA2_Stream6_IRQHandler+0x138>)
 80023fe:	2201      	movs	r2, #1
 8002400:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800240c:	60d3      	str	r3, [r2, #12]
}
 800240e:	e01a      	b.n	8002446 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d014      	beq.n	8002446 <DMA2_Stream6_IRQHandler+0x11a>
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800241c:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <DMA2_Stream6_IRQHandler+0x128>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8002422:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <DMA2_Stream6_IRQHandler+0x12c>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <DMA2_Stream6_IRQHandler+0x130>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800242e:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <DMA2_Stream6_IRQHandler+0x134>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <DMA2_Stream6_IRQHandler+0x138>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <DMA2_Stream6_IRQHandler+0x124>)
 8002440:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002444:	60d3      	str	r3, [r2, #12]
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40026400 	.word	0x40026400
 8002454:	2000013c 	.word	0x2000013c
 8002458:	20000144 	.word	0x20000144
 800245c:	2000017c 	.word	0x2000017c
 8002460:	20000114 	.word	0x20000114
 8002464:	200002bc 	.word	0x200002bc

08002468 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 800246c:	4b38      	ldr	r3, [pc, #224]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00f      	beq.n	8002498 <DMA2_Stream7_IRQHandler+0x30>
	{
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8002478:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <DMA2_Stream7_IRQHandler+0xec>)
 800247a:	2201      	movs	r2, #1
 800247c:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800247e:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <DMA2_Stream7_IRQHandler+0xf0>)
 8002480:	2201      	movs	r2, #1
 8002482:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8002484:	4b35      	ldr	r3, [pc, #212]	@ (800255c <DMA2_Stream7_IRQHandler+0xf4>)
 8002486:	2201      	movs	r2, #1
 8002488:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800248a:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a30      	ldr	r2, [pc, #192]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 8002490:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002494:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 8002496:	e056      	b.n	8002546 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8002498:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00f      	beq.n	80024c4 <DMA2_Stream7_IRQHandler+0x5c>
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80024a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002554 <DMA2_Stream7_IRQHandler+0xec>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80024aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <DMA2_Stream7_IRQHandler+0xf0>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80024b0:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <DMA2_Stream7_IRQHandler+0xf4>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80024b6:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4a25      	ldr	r2, [pc, #148]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 80024bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c0:	60d3      	str	r3, [r2, #12]
}
 80024c2:	e040      	b.n	8002546 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TEIF7)
 80024c4:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00f      	beq.n	80024f0 <DMA2_Stream7_IRQHandler+0x88>
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 80024d0:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <DMA2_Stream7_IRQHandler+0xec>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 80024d6:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <DMA2_Stream7_IRQHandler+0xf0>)
 80024d8:	2201      	movs	r2, #1
 80024da:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <DMA2_Stream7_IRQHandler+0xf4>)
 80024de:	2201      	movs	r2, #1
 80024e0:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80024e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 80024e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024ec:	60d3      	str	r3, [r2, #12]
}
 80024ee:	e02a      	b.n	8002546 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_HTIF7)
 80024f0:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00f      	beq.n	800251c <DMA2_Stream7_IRQHandler+0xb4>
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80024fc:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <DMA2_Stream7_IRQHandler+0xec>)
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <DMA2_Stream7_IRQHandler+0xf0>)
 8002504:	2201      	movs	r2, #1
 8002506:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <DMA2_Stream7_IRQHandler+0xf4>)
 800250a:	2201      	movs	r2, #1
 800250c:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4a0f      	ldr	r2, [pc, #60]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 8002514:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002518:	60d3      	str	r3, [r2, #12]
}
 800251a:	e014      	b.n	8002546 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TCIF7)
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <DMA2_Stream7_IRQHandler+0xde>
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <DMA2_Stream7_IRQHandler+0xec>)
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800252e:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <DMA2_Stream7_IRQHandler+0xf0>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <DMA2_Stream7_IRQHandler+0xf4>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <DMA2_Stream7_IRQHandler+0xe8>)
 8002540:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002544:	60d3      	str	r3, [r2, #12]
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40026400 	.word	0x40026400
 8002554:	20000184 	.word	0x20000184
 8002558:	200000cc 	.word	0x200000cc
 800255c:	200002c4 	.word	0x200002c4

08002560 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0c      	ldr	r2, [pc, #48]	@ (80025a0 <DMA_Clock_Enable+0x40>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d105      	bne.n	800257e <DMA_Clock_Enable+0x1e>
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <DMA_Clock_Enable+0x44>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <DMA_Clock_Enable+0x44>)
 8002578:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config -> Request.Controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a09      	ldr	r2, [pc, #36]	@ (80025a8 <DMA_Clock_Enable+0x48>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d105      	bne.n	8002594 <DMA_Clock_Enable+0x34>
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <DMA_Clock_Enable+0x44>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <DMA_Clock_Enable+0x44>)
 800258e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002592:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40026000 	.word	0x40026000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40026400 	.word	0x40026400

080025ac <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ffd3 	bl	8002560 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7a1b      	ldrb	r3, [r3, #8]
 80025c4:	065a      	lsls	r2, r3, #25
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled
    if((config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Complete) ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	2210      	movs	r2, #16
 8002640:	4293      	cmp	r3, r2
 8002642:	d014      	beq.n	800266e <DMA_Init+0xc2>
       (config->interrupts == DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete) ||
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2208      	movs	r2, #8
    if((config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Complete) ||
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <DMA_Init+0xc2>
       (config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Error) ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	2204      	movs	r2, #4
       (config->interrupts == DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete) ||
 8002654:	4293      	cmp	r3, r2
 8002656:	d00a      	beq.n	800266e <DMA_Init+0xc2>
       (config->interrupts == DMA_Configuration.DMA_Interrupts.Direct_Mode_Error) ||
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2202      	movs	r2, #2
       (config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Error) ||
 800265e:	4293      	cmp	r3, r2
 8002660:	d005      	beq.n	800266e <DMA_Init+0xc2>
       (config->interrupts == DMA_Configuration.DMA_Interrupts.Fifo_Error))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2280      	movs	r2, #128	@ 0x80
       (config->interrupts == DMA_Configuration.DMA_Interrupts.Direct_Mode_Error) ||
 8002668:	4293      	cmp	r3, r2
 800266a:	f040 80b0 	bne.w	80027ce <DMA_Init+0x222>
    {
        if(config->interrupts == DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <DMA_Init+0xde>
        {
            config->Request.Stream->FCR |= config->interrupts;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	6959      	ldr	r1, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	430a      	orrs	r2, r1
 8002688:	615a      	str	r2, [r3, #20]
        }

        config->Request.Stream->CR |= config->interrupts;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a67      	ldr	r2, [pc, #412]	@ (8002840 <DMA_Init+0x294>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d147      	bne.n	8002736 <DMA_Init+0x18a>
        {
            if(config->Request.Stream == DMA1_Stream0)        NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a66      	ldr	r2, [pc, #408]	@ (8002844 <DMA_Init+0x298>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d103      	bne.n	80026b8 <DMA_Init+0x10c>
 80026b0:	200b      	movs	r0, #11
 80026b2:	f7fe fd4d 	bl	8001150 <__NVIC_EnableIRQ>
 80026b6:	e08a      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA1_Stream1)   NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a62      	ldr	r2, [pc, #392]	@ (8002848 <DMA_Init+0x29c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d103      	bne.n	80026ca <DMA_Init+0x11e>
 80026c2:	200c      	movs	r0, #12
 80026c4:	f7fe fd44 	bl	8001150 <__NVIC_EnableIRQ>
 80026c8:	e081      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA1_Stream2)   NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a5f      	ldr	r2, [pc, #380]	@ (800284c <DMA_Init+0x2a0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <DMA_Init+0x130>
 80026d4:	200d      	movs	r0, #13
 80026d6:	f7fe fd3b 	bl	8001150 <__NVIC_EnableIRQ>
 80026da:	e078      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA1_Stream3)   NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a5b      	ldr	r2, [pc, #364]	@ (8002850 <DMA_Init+0x2a4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d103      	bne.n	80026ee <DMA_Init+0x142>
 80026e6:	200e      	movs	r0, #14
 80026e8:	f7fe fd32 	bl	8001150 <__NVIC_EnableIRQ>
 80026ec:	e06f      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA1_Stream4)   NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a58      	ldr	r2, [pc, #352]	@ (8002854 <DMA_Init+0x2a8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d103      	bne.n	8002700 <DMA_Init+0x154>
 80026f8:	200f      	movs	r0, #15
 80026fa:	f7fe fd29 	bl	8001150 <__NVIC_EnableIRQ>
 80026fe:	e066      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA1_Stream5)   NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a54      	ldr	r2, [pc, #336]	@ (8002858 <DMA_Init+0x2ac>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d103      	bne.n	8002712 <DMA_Init+0x166>
 800270a:	2010      	movs	r0, #16
 800270c:	f7fe fd20 	bl	8001150 <__NVIC_EnableIRQ>
 8002710:	e05d      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA1_Stream6)   NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a51      	ldr	r2, [pc, #324]	@ (800285c <DMA_Init+0x2b0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <DMA_Init+0x178>
 800271c:	2011      	movs	r0, #17
 800271e:	f7fe fd17 	bl	8001150 <__NVIC_EnableIRQ>
 8002722:	e054      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA1_Stream7)   NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a4d      	ldr	r2, [pc, #308]	@ (8002860 <DMA_Init+0x2b4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d14f      	bne.n	80027ce <DMA_Init+0x222>
 800272e:	202f      	movs	r0, #47	@ 0x2f
 8002730:	f7fe fd0e 	bl	8001150 <__NVIC_EnableIRQ>
 8002734:	e04b      	b.n	80027ce <DMA_Init+0x222>
        }
        else if(config->Request.Controller == DMA2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4a      	ldr	r2, [pc, #296]	@ (8002864 <DMA_Init+0x2b8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d146      	bne.n	80027ce <DMA_Init+0x222>
        {
            if(config->Request.Stream == DMA2_Stream0)        NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a48      	ldr	r2, [pc, #288]	@ (8002868 <DMA_Init+0x2bc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d103      	bne.n	8002752 <DMA_Init+0x1a6>
 800274a:	2038      	movs	r0, #56	@ 0x38
 800274c:	f7fe fd00 	bl	8001150 <__NVIC_EnableIRQ>
 8002750:	e03d      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA2_Stream1)   NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a45      	ldr	r2, [pc, #276]	@ (800286c <DMA_Init+0x2c0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d103      	bne.n	8002764 <DMA_Init+0x1b8>
 800275c:	2039      	movs	r0, #57	@ 0x39
 800275e:	f7fe fcf7 	bl	8001150 <__NVIC_EnableIRQ>
 8002762:	e034      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA2_Stream2)   NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a41      	ldr	r2, [pc, #260]	@ (8002870 <DMA_Init+0x2c4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d103      	bne.n	8002776 <DMA_Init+0x1ca>
 800276e:	203a      	movs	r0, #58	@ 0x3a
 8002770:	f7fe fcee 	bl	8001150 <__NVIC_EnableIRQ>
 8002774:	e02b      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA2_Stream3)   NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4a3e      	ldr	r2, [pc, #248]	@ (8002874 <DMA_Init+0x2c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d103      	bne.n	8002788 <DMA_Init+0x1dc>
 8002780:	203b      	movs	r0, #59	@ 0x3b
 8002782:	f7fe fce5 	bl	8001150 <__NVIC_EnableIRQ>
 8002786:	e022      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA2_Stream4)   NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a3a      	ldr	r2, [pc, #232]	@ (8002878 <DMA_Init+0x2cc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d103      	bne.n	800279a <DMA_Init+0x1ee>
 8002792:	203c      	movs	r0, #60	@ 0x3c
 8002794:	f7fe fcdc 	bl	8001150 <__NVIC_EnableIRQ>
 8002798:	e019      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA2_Stream5)   NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a37      	ldr	r2, [pc, #220]	@ (800287c <DMA_Init+0x2d0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <DMA_Init+0x200>
 80027a4:	2044      	movs	r0, #68	@ 0x44
 80027a6:	f7fe fcd3 	bl	8001150 <__NVIC_EnableIRQ>
 80027aa:	e010      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA2_Stream6)   NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a33      	ldr	r2, [pc, #204]	@ (8002880 <DMA_Init+0x2d4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d103      	bne.n	80027be <DMA_Init+0x212>
 80027b6:	2045      	movs	r0, #69	@ 0x45
 80027b8:	f7fe fcca 	bl	8001150 <__NVIC_EnableIRQ>
 80027bc:	e007      	b.n	80027ce <DMA_Init+0x222>
            else if(config->Request.Stream == DMA2_Stream7)   NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a30      	ldr	r2, [pc, #192]	@ (8002884 <DMA_Init+0x2d8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d102      	bne.n	80027ce <DMA_Init+0x222>
 80027c8:	2046      	movs	r0, #70	@ 0x46
 80027ca:	f7fe fcc1 	bl	8001150 <__NVIC_EnableIRQ>
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8c1b      	ldrh	r3, [r3, #32]
 80027d8:	4619      	mov	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80027ec:	4619      	mov	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fe:	4293      	cmp	r3, r2
 8002800:	d108      	bne.n	8002814 <DMA_Init+0x268>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e010      	b.n	8002836 <DMA_Init+0x28a>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2200      	movs	r2, #0
 800281a:	4293      	cmp	r3, r2
 800281c:	d108      	bne.n	8002830 <DMA_Init+0x284>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e002      	b.n	8002836 <DMA_Init+0x28a>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	e000      	b.n	8002838 <DMA_Init+0x28c>
    }

    return 1;  // Return 1 on successful initialization
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40026000 	.word	0x40026000
 8002844:	40026010 	.word	0x40026010
 8002848:	40026028 	.word	0x40026028
 800284c:	40026040 	.word	0x40026040
 8002850:	40026058 	.word	0x40026058
 8002854:	40026070 	.word	0x40026070
 8002858:	40026088 	.word	0x40026088
 800285c:	400260a0 	.word	0x400260a0
 8002860:	400260b8 	.word	0x400260b8
 8002864:	40026400 	.word	0x40026400
 8002868:	40026410 	.word	0x40026410
 800286c:	40026428 	.word	0x40026428
 8002870:	40026440 	.word	0x40026440
 8002874:	40026458 	.word	0x40026458
 8002878:	40026470 	.word	0x40026470
 800287c:	40026488 	.word	0x40026488
 8002880:	400264a0 	.word	0x400264a0
 8002884:	400264b8 	.word	0x400264b8

08002888 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800289e:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8c1b      	ldrh	r3, [r3, #32]
 80028d8:	4619      	mov	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028ea:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028f4:	609a      	str	r2, [r3, #8]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4a43      	ldr	r2, [pc, #268]	@ (8002a28 <DMA_Set_Trigger+0x124>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <DMA_Set_Trigger+0x24>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	4a42      	ldr	r2, [pc, #264]	@ (8002a2c <DMA_Set_Trigger+0x128>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d178      	bne.n	8002a1a <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4a41      	ldr	r2, [pc, #260]	@ (8002a30 <DMA_Set_Trigger+0x12c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d918      	bls.n	8002962 <DMA_Set_Trigger+0x5e>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4a40      	ldr	r2, [pc, #256]	@ (8002a34 <DMA_Set_Trigger+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d814      	bhi.n	8002962 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a38 <DMA_Set_Trigger+0x134>)
 800293c:	4413      	add	r3, r2
 800293e:	10db      	asrs	r3, r3, #3
 8002940:	4a3e      	ldr	r2, [pc, #248]	@ (8002a3c <DMA_Set_Trigger+0x138>)
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	461a      	mov	r2, r3
 8002948:	4b3d      	ldr	r3, [pc, #244]	@ (8002a40 <DMA_Set_Trigger+0x13c>)
 800294a:	5c9b      	ldrb	r3, [r3, r2]
 800294c:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	213f      	movs	r1, #63	@ 0x3f
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	431a      	orrs	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e055      	b.n	8002a0e <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4a37      	ldr	r2, [pc, #220]	@ (8002a44 <DMA_Set_Trigger+0x140>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d918      	bls.n	800299c <DMA_Set_Trigger+0x98>
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4a36      	ldr	r2, [pc, #216]	@ (8002a48 <DMA_Set_Trigger+0x144>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d814      	bhi.n	800299c <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <DMA_Set_Trigger+0x148>)
 8002976:	4413      	add	r3, r2
 8002978:	10db      	asrs	r3, r3, #3
 800297a:	4a30      	ldr	r2, [pc, #192]	@ (8002a3c <DMA_Set_Trigger+0x138>)
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4b33      	ldr	r3, [pc, #204]	@ (8002a50 <DMA_Set_Trigger+0x14c>)
 8002984:	5c9b      	ldrb	r3, [r3, r2]
 8002986:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	213f      	movs	r1, #63	@ 0x3f
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	431a      	orrs	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	e038      	b.n	8002a0e <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a54 <DMA_Set_Trigger+0x150>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d918      	bls.n	80029d6 <DMA_Set_Trigger+0xd2>
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a58 <DMA_Set_Trigger+0x154>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d814      	bhi.n	80029d6 <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <DMA_Set_Trigger+0x158>)
 80029b0:	4413      	add	r3, r2
 80029b2:	10db      	asrs	r3, r3, #3
 80029b4:	4a21      	ldr	r2, [pc, #132]	@ (8002a3c <DMA_Set_Trigger+0x138>)
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <DMA_Set_Trigger+0x13c>)
 80029be:	5c9b      	ldrb	r3, [r3, r2]
 80029c0:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	213f      	movs	r1, #63	@ 0x3f
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	431a      	orrs	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e01b      	b.n	8002a0e <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4a21      	ldr	r2, [pc, #132]	@ (8002a60 <DMA_Set_Trigger+0x15c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d917      	bls.n	8002a0e <DMA_Set_Trigger+0x10a>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4a20      	ldr	r2, [pc, #128]	@ (8002a64 <DMA_Set_Trigger+0x160>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d813      	bhi.n	8002a0e <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a68 <DMA_Set_Trigger+0x164>)
 80029ea:	4413      	add	r3, r2
 80029ec:	10db      	asrs	r3, r3, #3
 80029ee:	4a13      	ldr	r2, [pc, #76]	@ (8002a3c <DMA_Set_Trigger+0x138>)
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <DMA_Set_Trigger+0x14c>)
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	213f      	movs	r1, #63	@ 0x3f
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	601a      	str	r2, [r3, #0]
    }
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40026000 	.word	0x40026000
 8002a2c:	40026400 	.word	0x40026400
 8002a30:	4002600f 	.word	0x4002600f
 8002a34:	40026058 	.word	0x40026058
 8002a38:	bffd9ff0 	.word	0xbffd9ff0
 8002a3c:	aaaaaaab 	.word	0xaaaaaaab
 8002a40:	08003580 	.word	0x08003580
 8002a44:	4002606f 	.word	0x4002606f
 8002a48:	400260b8 	.word	0x400260b8
 8002a4c:	bffd9f90 	.word	0xbffd9f90
 8002a50:	08003584 	.word	0x08003584
 8002a54:	4002640f 	.word	0x4002640f
 8002a58:	40026458 	.word	0x40026458
 8002a5c:	bffd9bf0 	.word	0xbffd9bf0
 8002a60:	4002646f 	.word	0x4002646f
 8002a64:	400264b8 	.word	0x400264b8
 8002a68:	bffd9b90 	.word	0xbffd9b90

08002a6c <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a25      	ldr	r2, [pc, #148]	@ (8002b0c <GPIO_Clock_Enable+0xa0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d106      	bne.n	8002a8a <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8002a7c:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	4a23      	ldr	r2, [pc, #140]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a88:	e039      	b.n	8002afe <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a21      	ldr	r2, [pc, #132]	@ (8002b14 <GPIO_Clock_Enable+0xa8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d106      	bne.n	8002aa0 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	e02e      	b.n	8002afe <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <GPIO_Clock_Enable+0xac>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d106      	bne.n	8002ab6 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab4:	e023      	b.n	8002afe <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	@ (8002b1c <GPIO_Clock_Enable+0xb0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d106      	bne.n	8002acc <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8002abe:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	e018      	b.n	8002afe <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <GPIO_Clock_Enable+0xb4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d106      	bne.n	8002ae2 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002ada:	f043 0310 	orr.w	r3, r3, #16
 8002ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae0:	e00d      	b.n	8002afe <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8002b24 <GPIO_Clock_Enable+0xb8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d106      	bne.n	8002af8 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4a08      	ldr	r2, [pc, #32]	@ (8002b10 <GPIO_Clock_Enable+0xa4>)
 8002af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	e002      	b.n	8002afe <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
 8002afc:	e000      	b.n	8002b00 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40021c00 	.word	0x40021c00

08002b28 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	70fb      	strb	r3, [r7, #3]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70bb      	strb	r3, [r7, #2]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff92 	bl	8002a6c <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	78b9      	ldrb	r1, [r7, #2]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	0052      	lsls	r2, r2, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	787b      	ldrb	r3, [r7, #1]
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d008      	beq.n	8002b76 <GPIO_Pin_Init+0x4e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	7879      	ldrb	r1, [r7, #1]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 8002b76:	2204      	movs	r2, #4
 8002b78:	7c3b      	ldrb	r3, [r7, #16]
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <GPIO_Pin_Init+0x6a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	7c39      	ldrb	r1, [r7, #16]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 8002b92:	2204      	movs	r2, #4
 8002b94:	7d3b      	ldrb	r3, [r7, #20]
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <GPIO_Pin_Init+0x86>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	7d39      	ldrb	r1, [r7, #20]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	0052      	lsls	r2, r2, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d80a      	bhi.n	8002bca <GPIO_Pin_Init+0xa2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	7e39      	ldrb	r1, [r7, #24]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8002bc8:	e00a      	b.n	8002be0 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	7e39      	ldrb	r1, [r7, #24]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	3a08      	subs	r2, #8
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	6039      	str	r1, [r7, #0]
 8002bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db0a      	blt.n	8002c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	490c      	ldr	r1, [pc, #48]	@ (8002c34 <__NVIC_SetPriority+0x4c>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c10:	e00a      	b.n	8002c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4908      	ldr	r1, [pc, #32]	@ (8002c38 <__NVIC_SetPriority+0x50>)
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	3b04      	subs	r3, #4
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	440b      	add	r3, r1
 8002c26:	761a      	strb	r2, [r3, #24]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000e100 	.word	0xe000e100
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c4c:	d301      	bcc.n	8002c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <SysTick_Config+0x40>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5a:	210f      	movs	r1, #15
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f7ff ffc2 	bl	8002be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <SysTick_Config+0x40>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6a:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <SysTick_Config+0x40>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000e010 	.word	0xe000e010

08002c80 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	43d2      	mvns	r2, r2
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	615a      	str	r2, [r3, #20]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	615a      	str	r2, [r3, #20]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <MCU_Clock_Setup>:
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
	uint8_t pll_m = 8;
 8002cda:	2308      	movs	r3, #8
 8002cdc:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8002cde:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002ce2:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8002cec:	4b3c      	ldr	r3, [pc, #240]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8002cfe:	bf00      	nop
 8002d00:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f9      	beq.n	8002d00 <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8002d0c:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8002d18:	4b32      	ldr	r3, [pc, #200]	@ (8002de4 <MCU_Clock_Setup+0x110>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a31      	ldr	r2, [pc, #196]	@ (8002de4 <MCU_Clock_Setup+0x110>)
 8002d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d22:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8002d24:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <MCU_Clock_Setup+0x114>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <MCU_Clock_Setup+0x114>)
 8002d2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d2e:	f043 0305 	orr.w	r3, r3, #5
 8002d32:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8002d34:	4b2a      	ldr	r3, [pc, #168]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	78ba      	ldrb	r2, [r7, #2]
 8002d3a:	0611      	lsls	r1, r2, #24
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	0412      	lsls	r2, r2, #16
 8002d40:	4311      	orrs	r1, r2
 8002d42:	88ba      	ldrh	r2, [r7, #4]
 8002d44:	0192      	lsls	r2, r2, #6
 8002d46:	4311      	orrs	r1, r2
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4a24      	ldr	r2, [pc, #144]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002d54:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d5e:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8002d60:	4b1f      	ldr	r3, [pc, #124]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d62:	4a1f      	ldr	r2, [pc, #124]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d6e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002d72:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a19      	ldr	r2, [pc, #100]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7e:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8002d80:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8002d8c:	bf00      	nop
 8002d8e:	4b14      	ldr	r3, [pc, #80]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f9      	beq.n	8002d8e <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8002da6:	bf00      	nop
 8002da8:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d1f9      	bne.n	8002da8 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 8002db4:	f000 f90c 	bl	8002fd0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <MCU_Clock_Setup+0x118>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002df0 <MCU_Clock_Setup+0x11c>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff38 	bl	8002c3c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002dcc:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd0:	4a03      	ldr	r2, [pc, #12]	@ (8002de0 <MCU_Clock_Setup+0x10c>)
 8002dd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40007000 	.word	0x40007000
 8002de8:	40023c00 	.word	0x40023c00
 8002dec:	20000000 	.word	0x20000000
 8002df0:	18618619 	.word	0x18618619

08002df4 <Delay_Config>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <Delay_Config+0x2c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <Delay_Config+0x2c>)
 8002e00:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002e04:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <Delay_Config+0x2c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <Delay_Config+0x2c>)
 8002e0e:	2205      	movs	r2, #5
 8002e10:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010

08002e24 <Delay_ms>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8002e2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e32:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002e78 <Delay_ms+0x54>
 8002e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3e:	ee17 3a90 	vmov	r3, s15
 8002e42:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <Delay_ms+0x58>)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <Delay_ms+0x58>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8002e50:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <Delay_ms+0x58>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a09      	ldr	r2, [pc, #36]	@ (8002e7c <Delay_ms+0x58>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8002e5c:	bf00      	nop
 8002e5e:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <Delay_ms+0x58>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f9      	beq.n	8002e5e <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	48241000 	.word	0x48241000
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <Delay_milli>:
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8002e8a:	e00b      	b.n	8002ea4 <Delay_milli+0x24>
		Delay_ms(1);
 8002e8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e90:	f7ff ffc8 	bl	8002e24 <Delay_ms>
	for (; ms>0; ms--)
 8002e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ea0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	dcec      	bgt.n	8002e8c <Delay_milli+0xc>
	return ms;
 8002eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eba:	ee17 3a90 	vmov	r3, s15
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <main>:
bool Joystick_2_Right = 0;



int main(void)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8002ece:	f7ff ff01 	bl	8002cd4 <MCU_Clock_Setup>
	Delay_Config();
 8002ed2:	f7ff ff8f 	bl	8002df4 <Delay_Config>

	GPIO_Pin_Init(GPIOD, 12,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8002ed6:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8002ed8:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8002eda:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.No_Pull_Up_Down,
 8002edc:	2200      	movs	r2, #0
			GPIO_Configuration.Alternate_Functions.None);
 8002ede:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12,
 8002ee0:	9102      	str	r1, [sp, #8]
 8002ee2:	9201      	str	r2, [sp, #4]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	4602      	mov	r2, r0
 8002eea:	210c      	movs	r1, #12
 8002eec:	482a      	ldr	r0, [pc, #168]	@ (8002f98 <main+0xd0>)
 8002eee:	f7ff fe1b 	bl	8002b28 <GPIO_Pin_Init>

	Joystick.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4b29      	ldr	r3, [pc, #164]	@ (8002f9c <main+0xd4>)
 8002ef6:	729a      	strb	r2, [r3, #10]
	Joystick.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <main+0xd4>)
 8002efc:	731a      	strb	r2, [r3, #12]
	Joystick.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 8002efe:	2200      	movs	r2, #0
 8002f00:	4b26      	ldr	r3, [pc, #152]	@ (8002f9c <main+0xd4>)
 8002f02:	72da      	strb	r2, [r3, #11]

	Joystick.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 8002f04:	2201      	movs	r2, #1
 8002f06:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <main+0xd4>)
 8002f08:	735a      	strb	r2, [r3, #13]
	Joystick.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	4b23      	ldr	r3, [pc, #140]	@ (8002f9c <main+0xd4>)
 8002f0e:	73da      	strb	r2, [r3, #15]
	Joystick.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 8002f10:	2201      	movs	r2, #1
 8002f12:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <main+0xd4>)
 8002f14:	739a      	strb	r2, [r3, #14]

	Joystick.Channel_2.Enable = ADC_Configuration.Channel.Enable.Enable;
 8002f16:	2201      	movs	r2, #1
 8002f18:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <main+0xd4>)
 8002f1a:	741a      	strb	r2, [r3, #16]
	Joystick.Channel_2.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <main+0xd4>)
 8002f20:	749a      	strb	r2, [r3, #18]
	Joystick.Channel_2.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_3;
 8002f22:	2202      	movs	r2, #2
 8002f24:	4b1d      	ldr	r3, [pc, #116]	@ (8002f9c <main+0xd4>)
 8002f26:	745a      	strb	r2, [r3, #17]

	Joystick.Channel_3.Enable = ADC_Configuration.Channel.Enable.Enable;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <main+0xd4>)
 8002f2c:	74da      	strb	r2, [r3, #19]
	Joystick.Channel_3.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <main+0xd4>)
 8002f32:	755a      	strb	r2, [r3, #21]
	Joystick.Channel_3.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_4;
 8002f34:	2203      	movs	r2, #3
 8002f36:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <main+0xd4>)
 8002f38:	751a      	strb	r2, [r3, #20]

	Joystick.Channel_Type = ADC_Configuration.Channel_Type.Regular;
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <main+0xd4>)
 8002f3e:	719a      	strb	r2, [r3, #6]
	Joystick.Conversion_Mode = ADC_Configuration.Conversion_Mode.Single;
 8002f40:	2201      	movs	r2, #1
 8002f42:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <main+0xd4>)
 8002f44:	715a      	strb	r2, [r3, #5]
	Joystick.Data_Alignment = ADC_Configuration.Data_Alignment.Right_Justified;
 8002f46:	2200      	movs	r2, #0
 8002f48:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <main+0xd4>)
 8002f4a:	711a      	strb	r2, [r3, #4]
	Joystick.Port = ADC_Configuration.Port._ADC1_;
 8002f4c:	4a14      	ldr	r2, [pc, #80]	@ (8002fa0 <main+0xd8>)
 8002f4e:	4b13      	ldr	r3, [pc, #76]	@ (8002f9c <main+0xd4>)
 8002f50:	601a      	str	r2, [r3, #0]
	Joystick.Resolution = ADC_Configuration.Resolution.Bit_12;
 8002f52:	2200      	movs	r2, #0
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <main+0xd4>)
 8002f56:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	Joystick.External_Trigger.Enable = ENABLE;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <main+0xd4>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	71da      	strb	r2, [r3, #7]
	Joystick.External_Trigger.Trigger_Event = ADC_Configuration.Regular_External_Trigger_Event.Timer_2_TRGO;
 8002f60:	2206      	movs	r2, #6
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <main+0xd4>)
 8002f64:	721a      	strb	r2, [r3, #8]

	ADC_Init(&Joystick);
 8002f66:	480d      	ldr	r0, [pc, #52]	@ (8002f9c <main+0xd4>)
 8002f68:	f7fd fefe 	bl	8000d68 <ADC_Init>
	ADC_Start_Capture(&Joystick, Joystick_Data_Buffer);
 8002f6c:	490d      	ldr	r1, [pc, #52]	@ (8002fa4 <main+0xdc>)
 8002f6e:	480b      	ldr	r0, [pc, #44]	@ (8002f9c <main+0xd4>)
 8002f70:	f7fe f8ac 	bl	80010cc <ADC_Start_Capture>

	for(;;)
	{


		GPIO_Pin_High(GPIOD, 12);
 8002f74:	210c      	movs	r1, #12
 8002f76:	4808      	ldr	r0, [pc, #32]	@ (8002f98 <main+0xd0>)
 8002f78:	f7ff fe97 	bl	8002caa <GPIO_Pin_High>
		Delay_milli(1000);
 8002f7c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002fa8 <main+0xe0>
 8002f80:	f7ff ff7e 	bl	8002e80 <Delay_milli>
		GPIO_Pin_Low(GPIOD, 12);
 8002f84:	210c      	movs	r1, #12
 8002f86:	4804      	ldr	r0, [pc, #16]	@ (8002f98 <main+0xd0>)
 8002f88:	f7ff fe7a 	bl	8002c80 <GPIO_Pin_Low>
		Delay_milli(1000);
 8002f8c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002fa8 <main+0xe0>
 8002f90:	f7ff ff76 	bl	8002e80 <Delay_milli>
		GPIO_Pin_High(GPIOD, 12);
 8002f94:	bf00      	nop
 8002f96:	e7ed      	b.n	8002f74 <main+0xac>
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	200002cc 	.word	0x200002cc
 8002fa0:	40012000 	.word	0x40012000
 8002fa4:	20000310 	.word	0x20000310
 8002fa8:	447a0000 	.word	0x447a0000

08002fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb0:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <SystemInit+0x20>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	4a05      	ldr	r2, [pc, #20]	@ (8002fcc <SystemInit+0x20>)
 8002fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	2302      	movs	r3, #2
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002fea:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <SystemCoreClockUpdate+0xec>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d011      	beq.n	800301e <SystemCoreClockUpdate+0x4e>
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d844      	bhi.n	800308a <SystemCoreClockUpdate+0xba>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <SystemCoreClockUpdate+0x3e>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d004      	beq.n	8003016 <SystemCoreClockUpdate+0x46>
 800300c:	e03d      	b.n	800308a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800300e:	4b2c      	ldr	r3, [pc, #176]	@ (80030c0 <SystemCoreClockUpdate+0xf0>)
 8003010:	4a2c      	ldr	r2, [pc, #176]	@ (80030c4 <SystemCoreClockUpdate+0xf4>)
 8003012:	601a      	str	r2, [r3, #0]
      break;
 8003014:	e03d      	b.n	8003092 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003016:	4b2a      	ldr	r3, [pc, #168]	@ (80030c0 <SystemCoreClockUpdate+0xf0>)
 8003018:	4a2b      	ldr	r2, [pc, #172]	@ (80030c8 <SystemCoreClockUpdate+0xf8>)
 800301a:	601a      	str	r2, [r3, #0]
      break;
 800301c:	e039      	b.n	8003092 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800301e:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <SystemCoreClockUpdate+0xec>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0d9b      	lsrs	r3, r3, #22
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <SystemCoreClockUpdate+0xec>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003032:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800303a:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <SystemCoreClockUpdate+0xf8>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	4a1e      	ldr	r2, [pc, #120]	@ (80030bc <SystemCoreClockUpdate+0xec>)
 8003044:	6852      	ldr	r2, [r2, #4]
 8003046:	0992      	lsrs	r2, r2, #6
 8003048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e00b      	b.n	800306c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003054:	4a1b      	ldr	r2, [pc, #108]	@ (80030c4 <SystemCoreClockUpdate+0xf4>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <SystemCoreClockUpdate+0xec>)
 800305e:	6852      	ldr	r2, [r2, #4]
 8003060:	0992      	lsrs	r2, r2, #6
 8003062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800306c:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <SystemCoreClockUpdate+0xec>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	3301      	adds	r3, #1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	4a0e      	ldr	r2, [pc, #56]	@ (80030c0 <SystemCoreClockUpdate+0xf0>)
 8003086:	6013      	str	r3, [r2, #0]
      break;
 8003088:	e003      	b.n	8003092 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <SystemCoreClockUpdate+0xf0>)
 800308c:	4a0d      	ldr	r2, [pc, #52]	@ (80030c4 <SystemCoreClockUpdate+0xf4>)
 800308e:	601a      	str	r2, [r3, #0]
      break;
 8003090:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003092:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <SystemCoreClockUpdate+0xec>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4a0b      	ldr	r2, [pc, #44]	@ (80030cc <SystemCoreClockUpdate+0xfc>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80030a2:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <SystemCoreClockUpdate+0xf0>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ac:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <SystemCoreClockUpdate+0xf0>)
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40023800 	.word	0x40023800
 80030c0:	20000000 	.word	0x20000000
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	017d7840 	.word	0x017d7840
 80030cc:	08003588 	.word	0x08003588

080030d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030d0:	480d      	ldr	r0, [pc, #52]	@ (8003108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030d4:	f7ff ff6a 	bl	8002fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d8:	480c      	ldr	r0, [pc, #48]	@ (800310c <LoopForever+0x6>)
  ldr r1, =_edata
 80030da:	490d      	ldr	r1, [pc, #52]	@ (8003110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003114 <LoopForever+0xe>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e0:	e002      	b.n	80030e8 <LoopCopyDataInit>

080030e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e6:	3304      	adds	r3, #4

080030e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ec:	d3f9      	bcc.n	80030e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030f0:	4c0a      	ldr	r4, [pc, #40]	@ (800311c <LoopForever+0x16>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f4:	e001      	b.n	80030fa <LoopFillZerobss>

080030f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f8:	3204      	adds	r2, #4

080030fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030fc:	d3fb      	bcc.n	80030f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030fe:	f000 f811 	bl	8003124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003102:	f7ff fee1 	bl	8002ec8 <main>

08003106 <LoopForever>:

LoopForever:
  b LoopForever
 8003106:	e7fe      	b.n	8003106 <LoopForever>
  ldr   r0, =_estack
 8003108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800310c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003110:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003114:	080035a0 	.word	0x080035a0
  ldr r2, =_sbss
 8003118:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800311c:	20000318 	.word	0x20000318

08003120 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC_IRQHandler>
	...

08003124 <__libc_init_array>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	4d0d      	ldr	r5, [pc, #52]	@ (800315c <__libc_init_array+0x38>)
 8003128:	4c0d      	ldr	r4, [pc, #52]	@ (8003160 <__libc_init_array+0x3c>)
 800312a:	1b64      	subs	r4, r4, r5
 800312c:	10a4      	asrs	r4, r4, #2
 800312e:	2600      	movs	r6, #0
 8003130:	42a6      	cmp	r6, r4
 8003132:	d109      	bne.n	8003148 <__libc_init_array+0x24>
 8003134:	4d0b      	ldr	r5, [pc, #44]	@ (8003164 <__libc_init_array+0x40>)
 8003136:	4c0c      	ldr	r4, [pc, #48]	@ (8003168 <__libc_init_array+0x44>)
 8003138:	f000 f818 	bl	800316c <_init>
 800313c:	1b64      	subs	r4, r4, r5
 800313e:	10a4      	asrs	r4, r4, #2
 8003140:	2600      	movs	r6, #0
 8003142:	42a6      	cmp	r6, r4
 8003144:	d105      	bne.n	8003152 <__libc_init_array+0x2e>
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	f855 3b04 	ldr.w	r3, [r5], #4
 800314c:	4798      	blx	r3
 800314e:	3601      	adds	r6, #1
 8003150:	e7ee      	b.n	8003130 <__libc_init_array+0xc>
 8003152:	f855 3b04 	ldr.w	r3, [r5], #4
 8003156:	4798      	blx	r3
 8003158:	3601      	adds	r6, #1
 800315a:	e7f2      	b.n	8003142 <__libc_init_array+0x1e>
 800315c:	08003598 	.word	0x08003598
 8003160:	08003598 	.word	0x08003598
 8003164:	08003598 	.word	0x08003598
 8003168:	0800359c 	.word	0x0800359c

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr
