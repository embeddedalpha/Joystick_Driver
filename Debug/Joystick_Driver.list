
Joystick_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c28  08001c28  00002c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c38  08001c38  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001c38  08001c38  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c38  08001c38  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c38  08001c38  00002c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c3c  08001c3c  00002c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001c40  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          0000028c  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004e8f  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008ba  00000000  00000000  00007ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00008780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000162  00000000  00000000  00008958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000008f9  00000000  00000000  00008aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ff9  00000000  00000000  000093b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f675  00000000  00000000  0000c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009ba21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000650  00000000  00000000  0009ba64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0009c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c10 	.word	0x08001c10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001c10 	.word	0x08001c10

080001c8 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 80001cc:	4b56      	ldr	r3, [pc, #344]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f003 0301 	and.w	r3, r3, #1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d01b      	beq.n	8000210 <DMA1_Stream0_IRQHandler+0x48>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80001d8:	4b54      	ldr	r3, [pc, #336]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 80001da:	2201      	movs	r2, #1
 80001dc:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80001de:	4b54      	ldr	r3, [pc, #336]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001e4:	4b53      	ldr	r3, [pc, #332]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001ea:	4b53      	ldr	r3, [pc, #332]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001f0:	4b52      	ldr	r3, [pc, #328]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 80001f6:	4b52      	ldr	r3, [pc, #328]	@ (8000340 <DMA1_Stream0_IRQHandler+0x178>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 80001fc:	4b51      	ldr	r3, [pc, #324]	@ (8000344 <DMA1_Stream0_IRQHandler+0x17c>)
 80001fe:	2201      	movs	r2, #1
 8000200:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000202:	4b49      	ldr	r3, [pc, #292]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a48      	ldr	r2, [pc, #288]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6093      	str	r3, [r2, #8]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 800020e:	e086      	b.n	800031e <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8000210:	4b45      	ldr	r3, [pc, #276]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	2b00      	cmp	r3, #0
 800021a:	d01b      	beq.n	8000254 <DMA1_Stream0_IRQHandler+0x8c>
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 800021c:	4b43      	ldr	r3, [pc, #268]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 800021e:	2201      	movs	r2, #1
 8000220:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000222:	4b43      	ldr	r3, [pc, #268]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 8000224:	2201      	movs	r2, #1
 8000226:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000228:	4b42      	ldr	r3, [pc, #264]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 800022a:	2201      	movs	r2, #1
 800022c:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800022e:	4b42      	ldr	r3, [pc, #264]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 8000230:	2201      	movs	r2, #1
 8000232:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000234:	4b41      	ldr	r3, [pc, #260]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 8000236:	2201      	movs	r2, #1
 8000238:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800023a:	4b41      	ldr	r3, [pc, #260]	@ (8000340 <DMA1_Stream0_IRQHandler+0x178>)
 800023c:	2201      	movs	r2, #1
 800023e:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000240:	4b40      	ldr	r3, [pc, #256]	@ (8000344 <DMA1_Stream0_IRQHandler+0x17c>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000246:	4b38      	ldr	r3, [pc, #224]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	4a37      	ldr	r2, [pc, #220]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 800024c:	f043 0304 	orr.w	r3, r3, #4
 8000250:	6093      	str	r3, [r2, #8]
}
 8000252:	e064      	b.n	800031e <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000254:	4b34      	ldr	r3, [pc, #208]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f003 0308 	and.w	r3, r3, #8
 800025c:	2b00      	cmp	r3, #0
 800025e:	d01b      	beq.n	8000298 <DMA1_Stream0_IRQHandler+0xd0>
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8000260:	4b32      	ldr	r3, [pc, #200]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 8000262:	2201      	movs	r2, #1
 8000264:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000266:	4b32      	ldr	r3, [pc, #200]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 8000268:	2201      	movs	r2, #1
 800026a:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 800026c:	4b31      	ldr	r3, [pc, #196]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 800026e:	2201      	movs	r2, #1
 8000270:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000272:	4b31      	ldr	r3, [pc, #196]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 8000274:	2201      	movs	r2, #1
 8000276:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000278:	4b30      	ldr	r3, [pc, #192]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 800027a:	2201      	movs	r2, #1
 800027c:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 800027e:	4b30      	ldr	r3, [pc, #192]	@ (8000340 <DMA1_Stream0_IRQHandler+0x178>)
 8000280:	2201      	movs	r2, #1
 8000282:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000284:	4b2f      	ldr	r3, [pc, #188]	@ (8000344 <DMA1_Stream0_IRQHandler+0x17c>)
 8000286:	2201      	movs	r2, #1
 8000288:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800028a:	4b27      	ldr	r3, [pc, #156]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a26      	ldr	r2, [pc, #152]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000290:	f043 0308 	orr.w	r3, r3, #8
 8000294:	6093      	str	r3, [r2, #8]
}
 8000296:	e042      	b.n	800031e <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000298:	4b23      	ldr	r3, [pc, #140]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f003 0310 	and.w	r3, r3, #16
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d01b      	beq.n	80002dc <DMA1_Stream0_IRQHandler+0x114>
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002a4:	4b21      	ldr	r3, [pc, #132]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002aa:	4b21      	ldr	r3, [pc, #132]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002b0:	4b20      	ldr	r3, [pc, #128]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002b6:	4b20      	ldr	r3, [pc, #128]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 80002be:	2201      	movs	r2, #1
 80002c0:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80002c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000340 <DMA1_Stream0_IRQHandler+0x178>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80002c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <DMA1_Stream0_IRQHandler+0x17c>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80002ce:	4b16      	ldr	r3, [pc, #88]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a15      	ldr	r2, [pc, #84]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 80002d4:	f043 0310 	orr.w	r3, r3, #16
 80002d8:	6093      	str	r3, [r2, #8]
}
 80002da:	e020      	b.n	800031e <DMA1_Stream0_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TCIF0)
 80002dc:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d01a      	beq.n	800031e <DMA1_Stream0_IRQHandler+0x156>
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80002e8:	4b10      	ldr	r3, [pc, #64]	@ (800032c <DMA1_Stream0_IRQHandler+0x164>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80002ee:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <DMA1_Stream0_IRQHandler+0x168>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <DMA1_Stream0_IRQHandler+0x16c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <DMA1_Stream0_IRQHandler+0x170>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <DMA1_Stream0_IRQHandler+0x174>)
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <DMA1_Stream0_IRQHandler+0x178>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 800030c:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <DMA1_Stream0_IRQHandler+0x17c>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000312:	4b05      	ldr	r3, [pc, #20]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <DMA1_Stream0_IRQHandler+0x160>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6093      	str	r3, [r2, #8]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40026000 	.word	0x40026000
 800032c:	200001c8 	.word	0x200001c8
 8000330:	200001a8 	.word	0x200001a8
 8000334:	200000e8 	.word	0x200000e8
 8000338:	200000c0 	.word	0x200000c0
 800033c:	20000038 	.word	0x20000038
 8000340:	20000068 	.word	0x20000068
 8000344:	20000210 	.word	0x20000210

08000348 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 800034c:	4b47      	ldr	r3, [pc, #284]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000354:	2b00      	cmp	r3, #0
 8000356:	d015      	beq.n	8000384 <DMA1_Stream1_IRQHandler+0x3c>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000358:	4b45      	ldr	r3, [pc, #276]	@ (8000470 <DMA1_Stream1_IRQHandler+0x128>)
 800035a:	2201      	movs	r2, #1
 800035c:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 800035e:	4b45      	ldr	r3, [pc, #276]	@ (8000474 <DMA1_Stream1_IRQHandler+0x12c>)
 8000360:	2201      	movs	r2, #1
 8000362:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000364:	4b44      	ldr	r3, [pc, #272]	@ (8000478 <DMA1_Stream1_IRQHandler+0x130>)
 8000366:	2201      	movs	r2, #1
 8000368:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 800036a:	4b44      	ldr	r3, [pc, #272]	@ (800047c <DMA1_Stream1_IRQHandler+0x134>)
 800036c:	2201      	movs	r2, #1
 800036e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8000370:	4b43      	ldr	r3, [pc, #268]	@ (8000480 <DMA1_Stream1_IRQHandler+0x138>)
 8000372:	2201      	movs	r2, #1
 8000374:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000376:	4b3d      	ldr	r3, [pc, #244]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	4a3c      	ldr	r2, [pc, #240]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 800037c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000380:	6093      	str	r3, [r2, #8]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 8000382:	e06e      	b.n	8000462 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8000384:	4b39      	ldr	r3, [pc, #228]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800038c:	2b00      	cmp	r3, #0
 800038e:	d015      	beq.n	80003bc <DMA1_Stream1_IRQHandler+0x74>
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000390:	4b37      	ldr	r3, [pc, #220]	@ (8000470 <DMA1_Stream1_IRQHandler+0x128>)
 8000392:	2201      	movs	r2, #1
 8000394:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000396:	4b37      	ldr	r3, [pc, #220]	@ (8000474 <DMA1_Stream1_IRQHandler+0x12c>)
 8000398:	2201      	movs	r2, #1
 800039a:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800039c:	4b36      	ldr	r3, [pc, #216]	@ (8000478 <DMA1_Stream1_IRQHandler+0x130>)
 800039e:	2201      	movs	r2, #1
 80003a0:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80003a2:	4b36      	ldr	r3, [pc, #216]	@ (800047c <DMA1_Stream1_IRQHandler+0x134>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80003a8:	4b35      	ldr	r3, [pc, #212]	@ (8000480 <DMA1_Stream1_IRQHandler+0x138>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80003ae:	4b2f      	ldr	r3, [pc, #188]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	4a2e      	ldr	r2, [pc, #184]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 80003b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b8:	6093      	str	r3, [r2, #8]
}
 80003ba:	e052      	b.n	8000462 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_TEIF1)
 80003bc:	4b2b      	ldr	r3, [pc, #172]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d015      	beq.n	80003f4 <DMA1_Stream1_IRQHandler+0xac>
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80003c8:	4b29      	ldr	r3, [pc, #164]	@ (8000470 <DMA1_Stream1_IRQHandler+0x128>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 80003ce:	4b29      	ldr	r3, [pc, #164]	@ (8000474 <DMA1_Stream1_IRQHandler+0x12c>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003d4:	4b28      	ldr	r3, [pc, #160]	@ (8000478 <DMA1_Stream1_IRQHandler+0x130>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 80003da:	4b28      	ldr	r3, [pc, #160]	@ (800047c <DMA1_Stream1_IRQHandler+0x134>)
 80003dc:	2201      	movs	r2, #1
 80003de:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 80003e0:	4b27      	ldr	r3, [pc, #156]	@ (8000480 <DMA1_Stream1_IRQHandler+0x138>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80003e6:	4b21      	ldr	r3, [pc, #132]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 80003e8:	689b      	ldr	r3, [r3, #8]
 80003ea:	4a20      	ldr	r2, [pc, #128]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 80003ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003f0:	6093      	str	r3, [r2, #8]
}
 80003f2:	e036      	b.n	8000462 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_HTIF1)
 80003f4:	4b1d      	ldr	r3, [pc, #116]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d015      	beq.n	800042c <DMA1_Stream1_IRQHandler+0xe4>
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000400:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <DMA1_Stream1_IRQHandler+0x128>)
 8000402:	2201      	movs	r2, #1
 8000404:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000406:	4b1b      	ldr	r3, [pc, #108]	@ (8000474 <DMA1_Stream1_IRQHandler+0x12c>)
 8000408:	2201      	movs	r2, #1
 800040a:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800040c:	4b1a      	ldr	r3, [pc, #104]	@ (8000478 <DMA1_Stream1_IRQHandler+0x130>)
 800040e:	2201      	movs	r2, #1
 8000410:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000412:	4b1a      	ldr	r3, [pc, #104]	@ (800047c <DMA1_Stream1_IRQHandler+0x134>)
 8000414:	2201      	movs	r2, #1
 8000416:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000418:	4b19      	ldr	r3, [pc, #100]	@ (8000480 <DMA1_Stream1_IRQHandler+0x138>)
 800041a:	2201      	movs	r2, #1
 800041c:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800041e:	4b13      	ldr	r3, [pc, #76]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4a12      	ldr	r2, [pc, #72]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 8000424:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000428:	6093      	str	r3, [r2, #8]
}
 800042a:	e01a      	b.n	8000462 <DMA1_Stream1_IRQHandler+0x11a>
	else if(DMA1 -> LISR & DMA_LISR_TCIF1)
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000434:	2b00      	cmp	r3, #0
 8000436:	d014      	beq.n	8000462 <DMA1_Stream1_IRQHandler+0x11a>
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000438:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <DMA1_Stream1_IRQHandler+0x128>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800043e:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <DMA1_Stream1_IRQHandler+0x12c>)
 8000440:	2201      	movs	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000444:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <DMA1_Stream1_IRQHandler+0x130>)
 8000446:	2201      	movs	r2, #1
 8000448:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800044a:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <DMA1_Stream1_IRQHandler+0x134>)
 800044c:	2201      	movs	r2, #1
 800044e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8000450:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <DMA1_Stream1_IRQHandler+0x138>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000456:	4b05      	ldr	r3, [pc, #20]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	4a04      	ldr	r2, [pc, #16]	@ (800046c <DMA1_Stream1_IRQHandler+0x124>)
 800045c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000460:	6093      	str	r3, [r2, #8]
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40026000 	.word	0x40026000
 8000470:	20000178 	.word	0x20000178
 8000474:	200001d8 	.word	0x200001d8
 8000478:	200000e0 	.word	0x200000e0
 800047c:	200000a8 	.word	0x200000a8
 8000480:	20000218 	.word	0x20000218

08000484 <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8000488:	4b31      	ldr	r3, [pc, #196]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000490:	2b00      	cmp	r3, #0
 8000492:	d00c      	beq.n	80004ae <DMA1_Stream2_IRQHandler+0x2a>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000494:	4b2f      	ldr	r3, [pc, #188]	@ (8000554 <DMA1_Stream2_IRQHandler+0xd0>)
 8000496:	2201      	movs	r2, #1
 8000498:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 800049a:	4b2f      	ldr	r3, [pc, #188]	@ (8000558 <DMA1_Stream2_IRQHandler+0xd4>)
 800049c:	2201      	movs	r2, #1
 800049e:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004aa:	6093      	str	r3, [r2, #8]
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 80004ac:	e04a      	b.n	8000544 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d00c      	beq.n	80004d4 <DMA1_Stream2_IRQHandler+0x50>
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80004ba:	4b26      	ldr	r3, [pc, #152]	@ (8000554 <DMA1_Stream2_IRQHandler+0xd0>)
 80004bc:	2201      	movs	r2, #1
 80004be:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 80004c0:	4b25      	ldr	r3, [pc, #148]	@ (8000558 <DMA1_Stream2_IRQHandler+0xd4>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	4a21      	ldr	r2, [pc, #132]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004d0:	6093      	str	r3, [r2, #8]
}
 80004d2:	e037      	b.n	8000544 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_TEIF2)
 80004d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00c      	beq.n	80004fa <DMA1_Stream2_IRQHandler+0x76>
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80004e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <DMA1_Stream2_IRQHandler+0xd0>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 80004e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <DMA1_Stream2_IRQHandler+0xd4>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a17      	ldr	r2, [pc, #92]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004f6:	6093      	str	r3, [r2, #8]
}
 80004f8:	e024      	b.n	8000544 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_HTIF2)
 80004fa:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000502:	2b00      	cmp	r3, #0
 8000504:	d00c      	beq.n	8000520 <DMA1_Stream2_IRQHandler+0x9c>
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <DMA1_Stream2_IRQHandler+0xd0>)
 8000508:	2201      	movs	r2, #1
 800050a:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <DMA1_Stream2_IRQHandler+0xd4>)
 800050e:	2201      	movs	r2, #1
 8000510:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800051c:	6093      	str	r3, [r2, #8]
}
 800051e:	e011      	b.n	8000544 <DMA1_Stream2_IRQHandler+0xc0>
	else if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <DMA1_Stream2_IRQHandler+0xc0>
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <DMA1_Stream2_IRQHandler+0xd0>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <DMA1_Stream2_IRQHandler+0xd4>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <DMA1_Stream2_IRQHandler+0xcc>)
 800053e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000542:	6093      	str	r3, [r2, #8]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40026000 	.word	0x40026000
 8000554:	200000b0 	.word	0x200000b0
 8000558:	20000220 	.word	0x20000220

0800055c <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8000560:	4b56      	ldr	r3, [pc, #344]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000568:	2b00      	cmp	r3, #0
 800056a:	d01b      	beq.n	80005a4 <DMA1_Stream3_IRQHandler+0x48>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800056c:	4b54      	ldr	r3, [pc, #336]	@ (80006c0 <DMA1_Stream3_IRQHandler+0x164>)
 800056e:	2201      	movs	r2, #1
 8000570:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000572:	4b54      	ldr	r3, [pc, #336]	@ (80006c4 <DMA1_Stream3_IRQHandler+0x168>)
 8000574:	2201      	movs	r2, #1
 8000576:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000578:	4b53      	ldr	r3, [pc, #332]	@ (80006c8 <DMA1_Stream3_IRQHandler+0x16c>)
 800057a:	2201      	movs	r2, #1
 800057c:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <DMA1_Stream3_IRQHandler+0x170>)
 8000580:	2201      	movs	r2, #1
 8000582:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <DMA1_Stream3_IRQHandler+0x174>)
 8000586:	2201      	movs	r2, #1
 8000588:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800058a:	4b52      	ldr	r3, [pc, #328]	@ (80006d4 <DMA1_Stream3_IRQHandler+0x178>)
 800058c:	2201      	movs	r2, #1
 800058e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8000590:	4b51      	ldr	r3, [pc, #324]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x17c>)
 8000592:	2201      	movs	r2, #1
 8000594:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000596:	4b49      	ldr	r3, [pc, #292]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	4a48      	ldr	r2, [pc, #288]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005a0:	6093      	str	r3, [r2, #8]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 80005a2:	e086      	b.n	80006b2 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 80005a4:	4b45      	ldr	r3, [pc, #276]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d01b      	beq.n	80005e8 <DMA1_Stream3_IRQHandler+0x8c>
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005b0:	4b43      	ldr	r3, [pc, #268]	@ (80006c0 <DMA1_Stream3_IRQHandler+0x164>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005b6:	4b43      	ldr	r3, [pc, #268]	@ (80006c4 <DMA1_Stream3_IRQHandler+0x168>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005bc:	4b42      	ldr	r3, [pc, #264]	@ (80006c8 <DMA1_Stream3_IRQHandler+0x16c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005c2:	4b42      	ldr	r3, [pc, #264]	@ (80006cc <DMA1_Stream3_IRQHandler+0x170>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005c8:	4b41      	ldr	r3, [pc, #260]	@ (80006d0 <DMA1_Stream3_IRQHandler+0x174>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80005ce:	4b41      	ldr	r3, [pc, #260]	@ (80006d4 <DMA1_Stream3_IRQHandler+0x178>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80005d4:	4b40      	ldr	r3, [pc, #256]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x17c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80005da:	4b38      	ldr	r3, [pc, #224]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	4a37      	ldr	r2, [pc, #220]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 80005e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005e4:	6093      	str	r3, [r2, #8]
}
 80005e6:	e064      	b.n	80006b2 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TEIF3)
 80005e8:	4b34      	ldr	r3, [pc, #208]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d01b      	beq.n	800062c <DMA1_Stream3_IRQHandler+0xd0>
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80005f4:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <DMA1_Stream3_IRQHandler+0x164>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80005fa:	4b32      	ldr	r3, [pc, #200]	@ (80006c4 <DMA1_Stream3_IRQHandler+0x168>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000600:	4b31      	ldr	r3, [pc, #196]	@ (80006c8 <DMA1_Stream3_IRQHandler+0x16c>)
 8000602:	2201      	movs	r2, #1
 8000604:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000606:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <DMA1_Stream3_IRQHandler+0x170>)
 8000608:	2201      	movs	r2, #1
 800060a:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 800060c:	4b30      	ldr	r3, [pc, #192]	@ (80006d0 <DMA1_Stream3_IRQHandler+0x174>)
 800060e:	2201      	movs	r2, #1
 8000610:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000612:	4b30      	ldr	r3, [pc, #192]	@ (80006d4 <DMA1_Stream3_IRQHandler+0x178>)
 8000614:	2201      	movs	r2, #1
 8000616:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8000618:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x17c>)
 800061a:	2201      	movs	r2, #1
 800061c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800061e:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	4a26      	ldr	r2, [pc, #152]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 8000624:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000628:	6093      	str	r3, [r2, #8]
}
 800062a:	e042      	b.n	80006b2 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_HTIF3)
 800062c:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d01b      	beq.n	8000670 <DMA1_Stream3_IRQHandler+0x114>
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <DMA1_Stream3_IRQHandler+0x164>)
 800063a:	2201      	movs	r2, #1
 800063c:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <DMA1_Stream3_IRQHandler+0x168>)
 8000640:	2201      	movs	r2, #1
 8000642:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000644:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <DMA1_Stream3_IRQHandler+0x16c>)
 8000646:	2201      	movs	r2, #1
 8000648:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <DMA1_Stream3_IRQHandler+0x170>)
 800064c:	2201      	movs	r2, #1
 800064e:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <DMA1_Stream3_IRQHandler+0x174>)
 8000652:	2201      	movs	r2, #1
 8000654:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <DMA1_Stream3_IRQHandler+0x178>)
 8000658:	2201      	movs	r2, #1
 800065a:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x17c>)
 800065e:	2201      	movs	r2, #1
 8000660:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4a15      	ldr	r2, [pc, #84]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 8000668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800066c:	6093      	str	r3, [r2, #8]
}
 800066e:	e020      	b.n	80006b2 <DMA1_Stream3_IRQHandler+0x156>
	else if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01a      	beq.n	80006b2 <DMA1_Stream3_IRQHandler+0x156>
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800067c:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <DMA1_Stream3_IRQHandler+0x164>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <DMA1_Stream3_IRQHandler+0x168>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <DMA1_Stream3_IRQHandler+0x16c>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <DMA1_Stream3_IRQHandler+0x170>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <DMA1_Stream3_IRQHandler+0x174>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <DMA1_Stream3_IRQHandler+0x178>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <DMA1_Stream3_IRQHandler+0x17c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <DMA1_Stream3_IRQHandler+0x160>)
 80006ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006b0:	6093      	str	r3, [r2, #8]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40026000 	.word	0x40026000
 80006c0:	200001d0 	.word	0x200001d0
 80006c4:	200001b0 	.word	0x200001b0
 80006c8:	200000e0 	.word	0x200000e0
 80006cc:	200000b0 	.word	0x200000b0
 80006d0:	20000020 	.word	0x20000020
 80006d4:	20000060 	.word	0x20000060
 80006d8:	20000228 	.word	0x20000228

080006dc <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 80006e0:	4b56      	ldr	r3, [pc, #344]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01b      	beq.n	8000724 <DMA1_Stream4_IRQHandler+0x48>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80006ec:	4b54      	ldr	r3, [pc, #336]	@ (8000840 <DMA1_Stream4_IRQHandler+0x164>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 80006f2:	4b54      	ldr	r3, [pc, #336]	@ (8000844 <DMA1_Stream4_IRQHandler+0x168>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 80006f8:	4b53      	ldr	r3, [pc, #332]	@ (8000848 <DMA1_Stream4_IRQHandler+0x16c>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80006fe:	4b53      	ldr	r3, [pc, #332]	@ (800084c <DMA1_Stream4_IRQHandler+0x170>)
 8000700:	2201      	movs	r2, #1
 8000702:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000704:	4b52      	ldr	r3, [pc, #328]	@ (8000850 <DMA1_Stream4_IRQHandler+0x174>)
 8000706:	2201      	movs	r2, #1
 8000708:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 800070a:	4b52      	ldr	r3, [pc, #328]	@ (8000854 <DMA1_Stream4_IRQHandler+0x178>)
 800070c:	2201      	movs	r2, #1
 800070e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 8000710:	4b51      	ldr	r3, [pc, #324]	@ (8000858 <DMA1_Stream4_IRQHandler+0x17c>)
 8000712:	2201      	movs	r2, #1
 8000714:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8000716:	4b49      	ldr	r3, [pc, #292]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	4a48      	ldr	r2, [pc, #288]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	60d3      	str	r3, [r2, #12]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 8000722:	e086      	b.n	8000832 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 8000724:	4b45      	ldr	r3, [pc, #276]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	2b00      	cmp	r3, #0
 800072e:	d01b      	beq.n	8000768 <DMA1_Stream4_IRQHandler+0x8c>
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000730:	4b43      	ldr	r3, [pc, #268]	@ (8000840 <DMA1_Stream4_IRQHandler+0x164>)
 8000732:	2201      	movs	r2, #1
 8000734:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000736:	4b43      	ldr	r3, [pc, #268]	@ (8000844 <DMA1_Stream4_IRQHandler+0x168>)
 8000738:	2201      	movs	r2, #1
 800073a:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800073c:	4b42      	ldr	r3, [pc, #264]	@ (8000848 <DMA1_Stream4_IRQHandler+0x16c>)
 800073e:	2201      	movs	r2, #1
 8000740:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000742:	4b42      	ldr	r3, [pc, #264]	@ (800084c <DMA1_Stream4_IRQHandler+0x170>)
 8000744:	2201      	movs	r2, #1
 8000746:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000748:	4b41      	ldr	r3, [pc, #260]	@ (8000850 <DMA1_Stream4_IRQHandler+0x174>)
 800074a:	2201      	movs	r2, #1
 800074c:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800074e:	4b41      	ldr	r3, [pc, #260]	@ (8000854 <DMA1_Stream4_IRQHandler+0x178>)
 8000750:	2201      	movs	r2, #1
 8000752:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8000754:	4b40      	ldr	r3, [pc, #256]	@ (8000858 <DMA1_Stream4_IRQHandler+0x17c>)
 8000756:	2201      	movs	r2, #1
 8000758:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800075a:	4b38      	ldr	r3, [pc, #224]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4a37      	ldr	r2, [pc, #220]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	60d3      	str	r3, [r2, #12]
}
 8000766:	e064      	b.n	8000832 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TEIF4)
 8000768:	4b34      	ldr	r3, [pc, #208]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01b      	beq.n	80007ac <DMA1_Stream4_IRQHandler+0xd0>
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000774:	4b32      	ldr	r3, [pc, #200]	@ (8000840 <DMA1_Stream4_IRQHandler+0x164>)
 8000776:	2201      	movs	r2, #1
 8000778:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800077a:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <DMA1_Stream4_IRQHandler+0x168>)
 800077c:	2201      	movs	r2, #1
 800077e:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000780:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <DMA1_Stream4_IRQHandler+0x16c>)
 8000782:	2201      	movs	r2, #1
 8000784:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000786:	4b31      	ldr	r3, [pc, #196]	@ (800084c <DMA1_Stream4_IRQHandler+0x170>)
 8000788:	2201      	movs	r2, #1
 800078a:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800078c:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <DMA1_Stream4_IRQHandler+0x174>)
 800078e:	2201      	movs	r2, #1
 8000790:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000792:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <DMA1_Stream4_IRQHandler+0x178>)
 8000794:	2201      	movs	r2, #1
 8000796:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 8000798:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <DMA1_Stream4_IRQHandler+0x17c>)
 800079a:	2201      	movs	r2, #1
 800079c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800079e:	4b27      	ldr	r3, [pc, #156]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	4a26      	ldr	r2, [pc, #152]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	60d3      	str	r3, [r2, #12]
}
 80007aa:	e042      	b.n	8000832 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_HTIF4)
 80007ac:	4b23      	ldr	r3, [pc, #140]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d01b      	beq.n	80007f0 <DMA1_Stream4_IRQHandler+0x114>
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <DMA1_Stream4_IRQHandler+0x164>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <DMA1_Stream4_IRQHandler+0x168>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007c4:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <DMA1_Stream4_IRQHandler+0x16c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <DMA1_Stream4_IRQHandler+0x170>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <DMA1_Stream4_IRQHandler+0x174>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <DMA1_Stream4_IRQHandler+0x178>)
 80007d8:	2201      	movs	r2, #1
 80007da:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <DMA1_Stream4_IRQHandler+0x17c>)
 80007de:	2201      	movs	r2, #1
 80007e0:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	4a15      	ldr	r2, [pc, #84]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	60d3      	str	r3, [r2, #12]
}
 80007ee:	e020      	b.n	8000832 <DMA1_Stream4_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TCIF4)
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f003 0320 	and.w	r3, r3, #32
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d01a      	beq.n	8000832 <DMA1_Stream4_IRQHandler+0x156>
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <DMA1_Stream4_IRQHandler+0x164>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <DMA1_Stream4_IRQHandler+0x168>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <DMA1_Stream4_IRQHandler+0x16c>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <DMA1_Stream4_IRQHandler+0x170>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <DMA1_Stream4_IRQHandler+0x174>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <DMA1_Stream4_IRQHandler+0x178>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <DMA1_Stream4_IRQHandler+0x17c>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <DMA1_Stream4_IRQHandler+0x160>)
 800082c:	f043 0320 	orr.w	r3, r3, #32
 8000830:	60d3      	str	r3, [r2, #12]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40026000 	.word	0x40026000
 8000840:	200001c0 	.word	0x200001c0
 8000844:	20000188 	.word	0x20000188
 8000848:	200000b8 	.word	0x200000b8
 800084c:	20000050 	.word	0x20000050
 8000850:	20000028 	.word	0x20000028
 8000854:	20000078 	.word	0x20000078
 8000858:	20000230 	.word	0x20000230

0800085c <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8000860:	4b56      	ldr	r3, [pc, #344]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000868:	2b00      	cmp	r3, #0
 800086a:	d01b      	beq.n	80008a4 <DMA1_Stream5_IRQHandler+0x48>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800086c:	4b54      	ldr	r3, [pc, #336]	@ (80009c0 <DMA1_Stream5_IRQHandler+0x164>)
 800086e:	2201      	movs	r2, #1
 8000870:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000872:	4b54      	ldr	r3, [pc, #336]	@ (80009c4 <DMA1_Stream5_IRQHandler+0x168>)
 8000874:	2201      	movs	r2, #1
 8000876:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 8000878:	4b53      	ldr	r3, [pc, #332]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x16c>)
 800087a:	2201      	movs	r2, #1
 800087c:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 800087e:	4b53      	ldr	r3, [pc, #332]	@ (80009cc <DMA1_Stream5_IRQHandler+0x170>)
 8000880:	2201      	movs	r2, #1
 8000882:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000884:	4b52      	ldr	r3, [pc, #328]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x174>)
 8000886:	2201      	movs	r2, #1
 8000888:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800088a:	4b52      	ldr	r3, [pc, #328]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x178>)
 800088c:	2201      	movs	r2, #1
 800088e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 8000890:	4b51      	ldr	r3, [pc, #324]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x17c>)
 8000892:	2201      	movs	r2, #1
 8000894:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8000896:	4b49      	ldr	r3, [pc, #292]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	4a48      	ldr	r2, [pc, #288]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a0:	60d3      	str	r3, [r2, #12]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 80008a2:	e086      	b.n	80009b2 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 80008a4:	4b45      	ldr	r3, [pc, #276]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d01b      	beq.n	80008e8 <DMA1_Stream5_IRQHandler+0x8c>
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008b0:	4b43      	ldr	r3, [pc, #268]	@ (80009c0 <DMA1_Stream5_IRQHandler+0x164>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008b6:	4b43      	ldr	r3, [pc, #268]	@ (80009c4 <DMA1_Stream5_IRQHandler+0x168>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80008bc:	4b42      	ldr	r3, [pc, #264]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x16c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008c2:	4b42      	ldr	r3, [pc, #264]	@ (80009cc <DMA1_Stream5_IRQHandler+0x170>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008c8:	4b41      	ldr	r3, [pc, #260]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x174>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80008ce:	4b41      	ldr	r3, [pc, #260]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x178>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80008d4:	4b40      	ldr	r3, [pc, #256]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x17c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80008da:	4b38      	ldr	r3, [pc, #224]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a37      	ldr	r2, [pc, #220]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 80008e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e4:	60d3      	str	r3, [r2, #12]
}
 80008e6:	e064      	b.n	80009b2 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d01b      	beq.n	800092c <DMA1_Stream5_IRQHandler+0xd0>
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80008f4:	4b32      	ldr	r3, [pc, #200]	@ (80009c0 <DMA1_Stream5_IRQHandler+0x164>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80008fa:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <DMA1_Stream5_IRQHandler+0x168>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 8000900:	4b31      	ldr	r3, [pc, #196]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x16c>)
 8000902:	2201      	movs	r2, #1
 8000904:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 8000906:	4b31      	ldr	r3, [pc, #196]	@ (80009cc <DMA1_Stream5_IRQHandler+0x170>)
 8000908:	2201      	movs	r2, #1
 800090a:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 800090c:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x174>)
 800090e:	2201      	movs	r2, #1
 8000910:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000912:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x178>)
 8000914:	2201      	movs	r2, #1
 8000916:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 8000918:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x17c>)
 800091a:	2201      	movs	r2, #1
 800091c:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800091e:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	4a26      	ldr	r2, [pc, #152]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 8000924:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000928:	60d3      	str	r3, [r2, #12]
}
 800092a:	e042      	b.n	80009b2 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_HTIF5)
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000934:	2b00      	cmp	r3, #0
 8000936:	d01b      	beq.n	8000970 <DMA1_Stream5_IRQHandler+0x114>
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <DMA1_Stream5_IRQHandler+0x164>)
 800093a:	2201      	movs	r2, #1
 800093c:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <DMA1_Stream5_IRQHandler+0x168>)
 8000940:	2201      	movs	r2, #1
 8000942:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000944:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x16c>)
 8000946:	2201      	movs	r2, #1
 8000948:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <DMA1_Stream5_IRQHandler+0x170>)
 800094c:	2201      	movs	r2, #1
 800094e:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x174>)
 8000952:	2201      	movs	r2, #1
 8000954:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x178>)
 8000958:	2201      	movs	r2, #1
 800095a:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x17c>)
 800095e:	2201      	movs	r2, #1
 8000960:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 8000968:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800096c:	60d3      	str	r3, [r2, #12]
}
 800096e:	e020      	b.n	80009b2 <DMA1_Stream5_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000978:	2b00      	cmp	r3, #0
 800097a:	d01a      	beq.n	80009b2 <DMA1_Stream5_IRQHandler+0x156>
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800097c:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <DMA1_Stream5_IRQHandler+0x164>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <DMA1_Stream5_IRQHandler+0x168>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <DMA1_Stream5_IRQHandler+0x16c>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <DMA1_Stream5_IRQHandler+0x170>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <DMA1_Stream5_IRQHandler+0x174>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <DMA1_Stream5_IRQHandler+0x178>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x17c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80009a6:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <DMA1_Stream5_IRQHandler+0x160>)
 80009ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009b0:	60d3      	str	r3, [r2, #12]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	40026000 	.word	0x40026000
 80009c0:	20000080 	.word	0x20000080
 80009c4:	200001a0 	.word	0x200001a0
 80009c8:	20000168 	.word	0x20000168
 80009cc:	200001e0 	.word	0x200001e0
 80009d0:	20000190 	.word	0x20000190
 80009d4:	20000098 	.word	0x20000098
 80009d8:	20000238 	.word	0x20000238

080009dc <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 80009e0:	4b49      	ldr	r3, [pc, #292]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d018      	beq.n	8000a1e <DMA1_Stream6_IRQHandler+0x42>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80009ec:	4b47      	ldr	r3, [pc, #284]	@ (8000b0c <DMA1_Stream6_IRQHandler+0x130>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 80009f2:	4b47      	ldr	r3, [pc, #284]	@ (8000b10 <DMA1_Stream6_IRQHandler+0x134>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 80009f8:	4b46      	ldr	r3, [pc, #280]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x138>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 80009fe:	4b46      	ldr	r3, [pc, #280]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000a04:	4b45      	ldr	r3, [pc, #276]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x140>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 8000a0a:	4b45      	ldr	r3, [pc, #276]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x144>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000a10:	4b3d      	ldr	r3, [pc, #244]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	4a3c      	ldr	r2, [pc, #240]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a1a:	60d3      	str	r3, [r2, #12]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 8000a1c:	e06e      	b.n	8000afc <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d015      	beq.n	8000a56 <DMA1_Stream6_IRQHandler+0x7a>
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a2a:	4b39      	ldr	r3, [pc, #228]	@ (8000b10 <DMA1_Stream6_IRQHandler+0x134>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a30:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x138>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 8000a36:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000a3c:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x140>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8000a42:	4b37      	ldr	r3, [pc, #220]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x144>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000a48:	4b2f      	ldr	r3, [pc, #188]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	e052      	b.n	8000afc <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8000a56:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d015      	beq.n	8000a8e <DMA1_Stream6_IRQHandler+0xb2>
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <DMA1_Stream6_IRQHandler+0x134>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000a68:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x138>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x13c>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000a74:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x140>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 8000a7a:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x144>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	4a20      	ldr	r2, [pc, #128]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	e036      	b.n	8000afc <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d015      	beq.n	8000ac6 <DMA1_Stream6_IRQHandler+0xea>
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <DMA1_Stream6_IRQHandler+0x134>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x138>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x13c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x140>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x144>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	e01a      	b.n	8000afc <DMA1_Stream6_IRQHandler+0x120>
	else if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d014      	beq.n	8000afc <DMA1_Stream6_IRQHandler+0x120>
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <DMA1_Stream6_IRQHandler+0x134>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <DMA1_Stream6_IRQHandler+0x138>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <DMA1_Stream6_IRQHandler+0x13c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <DMA1_Stream6_IRQHandler+0x140>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <DMA1_Stream6_IRQHandler+0x144>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <DMA1_Stream6_IRQHandler+0x12c>)
 8000af6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40026000 	.word	0x40026000
 8000b0c:	20000198 	.word	0x20000198
 8000b10:	20000160 	.word	0x20000160
 8000b14:	200000e8 	.word	0x200000e8
 8000b18:	200000a0 	.word	0x200000a0
 8000b1c:	20000040 	.word	0x20000040
 8000b20:	20000240 	.word	0x20000240

08000b24 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 8000b28:	4b56      	ldr	r3, [pc, #344]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01b      	beq.n	8000b6c <DMA1_Stream7_IRQHandler+0x48>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b34:	4b54      	ldr	r3, [pc, #336]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x164>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b3a:	4b54      	ldr	r3, [pc, #336]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x168>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 8000b40:	4b53      	ldr	r3, [pc, #332]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8000b46:	4b53      	ldr	r3, [pc, #332]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x170>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8000b4c:	4b52      	ldr	r3, [pc, #328]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x174>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8000b52:	4b52      	ldr	r3, [pc, #328]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x178>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8000b58:	4b51      	ldr	r3, [pc, #324]	@ (8000ca0 <DMA1_Stream7_IRQHandler+0x17c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000b5e:	4b49      	ldr	r3, [pc, #292]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	4a48      	ldr	r2, [pc, #288]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000b64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b68:	60d3      	str	r3, [r2, #12]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 8000b6a:	e086      	b.n	8000c7a <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8000b6c:	4b45      	ldr	r3, [pc, #276]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01b      	beq.n	8000bb0 <DMA1_Stream7_IRQHandler+0x8c>
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b78:	4b43      	ldr	r3, [pc, #268]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x164>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b7e:	4b43      	ldr	r3, [pc, #268]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x168>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b84:	4b42      	ldr	r3, [pc, #264]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b8a:	4b42      	ldr	r3, [pc, #264]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x170>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b90:	4b41      	ldr	r3, [pc, #260]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x174>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000b96:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x178>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000b9c:	4b40      	ldr	r3, [pc, #256]	@ (8000ca0 <DMA1_Stream7_IRQHandler+0x17c>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000ba2:	4b38      	ldr	r3, [pc, #224]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	4a37      	ldr	r2, [pc, #220]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000ba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bac:	60d3      	str	r3, [r2, #12]
}
 8000bae:	e064      	b.n	8000c7a <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8000bb0:	4b34      	ldr	r3, [pc, #208]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d01b      	beq.n	8000bf4 <DMA1_Stream7_IRQHandler+0xd0>
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000bbc:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x164>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000bc2:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x168>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8000bc8:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8000bce:	4b31      	ldr	r3, [pc, #196]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x170>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x174>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8000bda:	4b30      	ldr	r3, [pc, #192]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x178>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <DMA1_Stream7_IRQHandler+0x17c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	4a26      	ldr	r2, [pc, #152]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	60d3      	str	r3, [r2, #12]
}
 8000bf2:	e042      	b.n	8000c7a <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01b      	beq.n	8000c38 <DMA1_Stream7_IRQHandler+0x114>
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x164>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x168>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x170>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x174>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x178>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <DMA1_Stream7_IRQHandler+0x17c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000c30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c34:	60d3      	str	r3, [r2, #12]
}
 8000c36:	e020      	b.n	8000c7a <DMA1_Stream7_IRQHandler+0x156>
	else if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01a      	beq.n	8000c7a <DMA1_Stream7_IRQHandler+0x156>
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <DMA1_Stream7_IRQHandler+0x164>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <DMA1_Stream7_IRQHandler+0x168>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <DMA1_Stream7_IRQHandler+0x16c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <DMA1_Stream7_IRQHandler+0x170>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <DMA1_Stream7_IRQHandler+0x174>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <DMA1_Stream7_IRQHandler+0x178>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <DMA1_Stream7_IRQHandler+0x17c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <DMA1_Stream7_IRQHandler+0x160>)
 8000c74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c78:	60d3      	str	r3, [r2, #12]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	40026000 	.word	0x40026000
 8000c88:	20000030 	.word	0x20000030
 8000c8c:	20000048 	.word	0x20000048
 8000c90:	200000c8 	.word	0x200000c8
 8000c94:	200001b8 	.word	0x200001b8
 8000c98:	20000170 	.word	0x20000170
 8000c9c:	20000180 	.word	0x20000180
 8000ca0:	20000248 	.word	0x20000248

08000ca4 <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8000ca8:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d015      	beq.n	8000ce0 <DMA2_Stream0_IRQHandler+0x3c>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000cb4:	4b45      	ldr	r3, [pc, #276]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x128>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8000cba:	4b45      	ldr	r3, [pc, #276]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x12c>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000cc0:	4b44      	ldr	r3, [pc, #272]	@ (8000dd4 <DMA2_Stream0_IRQHandler+0x130>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000cc6:	4b44      	ldr	r3, [pc, #272]	@ (8000dd8 <DMA2_Stream0_IRQHandler+0x134>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8000ccc:	4b43      	ldr	r3, [pc, #268]	@ (8000ddc <DMA2_Stream0_IRQHandler+0x138>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6093      	str	r3, [r2, #8]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 8000cde:	e06e      	b.n	8000dbe <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8000ce0:	4b39      	ldr	r3, [pc, #228]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d015      	beq.n	8000d18 <DMA2_Stream0_IRQHandler+0x74>
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cec:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x128>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x12c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cf8:	4b36      	ldr	r3, [pc, #216]	@ (8000dd4 <DMA2_Stream0_IRQHandler+0x130>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000cfe:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <DMA2_Stream0_IRQHandler+0x134>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000d04:	4b35      	ldr	r3, [pc, #212]	@ (8000ddc <DMA2_Stream0_IRQHandler+0x138>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6093      	str	r3, [r2, #8]
}
 8000d16:	e052      	b.n	8000dbe <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_TEIF0)
 8000d18:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d015      	beq.n	8000d50 <DMA2_Stream0_IRQHandler+0xac>
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000d24:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x128>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <DMA2_Stream0_IRQHandler+0x130>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <DMA2_Stream0_IRQHandler+0x134>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 8000d3c:	4b27      	ldr	r3, [pc, #156]	@ (8000ddc <DMA2_Stream0_IRQHandler+0x138>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d42:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	4a20      	ldr	r2, [pc, #128]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6093      	str	r3, [r2, #8]
}
 8000d4e:	e036      	b.n	8000dbe <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8000d50:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d015      	beq.n	8000d88 <DMA2_Stream0_IRQHandler+0xe4>
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x128>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <DMA2_Stream0_IRQHandler+0x130>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <DMA2_Stream0_IRQHandler+0x134>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <DMA2_Stream0_IRQHandler+0x138>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	6093      	str	r3, [r2, #8]
}
 8000d86:	e01a      	b.n	8000dbe <DMA2_Stream0_IRQHandler+0x11a>
	else if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0320 	and.w	r3, r3, #32
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d014      	beq.n	8000dbe <DMA2_Stream0_IRQHandler+0x11a>
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x128>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x12c>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <DMA2_Stream0_IRQHandler+0x130>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <DMA2_Stream0_IRQHandler+0x134>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <DMA2_Stream0_IRQHandler+0x138>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x124>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	6093      	str	r3, [r2, #8]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40026400 	.word	0x40026400
 8000dcc:	20000058 	.word	0x20000058
 8000dd0:	200001f8 	.word	0x200001f8
 8000dd4:	20000118 	.word	0x20000118
 8000dd8:	20000120 	.word	0x20000120
 8000ddc:	20000250 	.word	0x20000250

08000de0 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8000de4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d01e      	beq.n	8000e2e <DMA2_Stream1_IRQHandler+0x4e>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8000df0:	4b5c      	ldr	r3, [pc, #368]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x184>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000df6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x188>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 8000dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x18c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8000e02:	4b5b      	ldr	r3, [pc, #364]	@ (8000f70 <DMA2_Stream1_IRQHandler+0x190>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8000e08:	4b5a      	ldr	r3, [pc, #360]	@ (8000f74 <DMA2_Stream1_IRQHandler+0x194>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f78 <DMA2_Stream1_IRQHandler+0x198>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000e14:	4b59      	ldr	r3, [pc, #356]	@ (8000f7c <DMA2_Stream1_IRQHandler+0x19c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8000e1a:	4b59      	ldr	r3, [pc, #356]	@ (8000f80 <DMA2_Stream1_IRQHandler+0x1a0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e20:	4b4f      	ldr	r3, [pc, #316]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4a4e      	ldr	r2, [pc, #312]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2a:	6093      	str	r3, [r2, #8]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 8000e2c:	e092      	b.n	8000f54 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d01e      	beq.n	8000e78 <DMA2_Stream1_IRQHandler+0x98>
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x184>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e40:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x188>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e46:	4b49      	ldr	r3, [pc, #292]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x18c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e4c:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <DMA2_Stream1_IRQHandler+0x190>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e52:	4b48      	ldr	r3, [pc, #288]	@ (8000f74 <DMA2_Stream1_IRQHandler+0x194>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e58:	4b47      	ldr	r3, [pc, #284]	@ (8000f78 <DMA2_Stream1_IRQHandler+0x198>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000e5e:	4b47      	ldr	r3, [pc, #284]	@ (8000f7c <DMA2_Stream1_IRQHandler+0x19c>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000e64:	4b46      	ldr	r3, [pc, #280]	@ (8000f80 <DMA2_Stream1_IRQHandler+0x1a0>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e74:	6093      	str	r3, [r2, #8]
}
 8000e76:	e06d      	b.n	8000f54 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_TEIF1)
 8000e78:	4b39      	ldr	r3, [pc, #228]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d01e      	beq.n	8000ec2 <DMA2_Stream1_IRQHandler+0xe2>
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8000e84:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x184>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000e8a:	4b37      	ldr	r3, [pc, #220]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x188>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 8000e90:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x18c>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <DMA2_Stream1_IRQHandler+0x190>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8000e9c:	4b35      	ldr	r3, [pc, #212]	@ (8000f74 <DMA2_Stream1_IRQHandler+0x194>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 8000ea2:	4b35      	ldr	r3, [pc, #212]	@ (8000f78 <DMA2_Stream1_IRQHandler+0x198>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000ea8:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <DMA2_Stream1_IRQHandler+0x19c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 8000eae:	4b34      	ldr	r3, [pc, #208]	@ (8000f80 <DMA2_Stream1_IRQHandler+0x1a0>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4a29      	ldr	r2, [pc, #164]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ebe:	6093      	str	r3, [r2, #8]
}
 8000ec0:	e048      	b.n	8000f54 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_HTIF1)
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d01e      	beq.n	8000f0c <DMA2_Stream1_IRQHandler+0x12c>
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x184>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x188>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000eda:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x18c>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <DMA2_Stream1_IRQHandler+0x190>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <DMA2_Stream1_IRQHandler+0x194>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000eec:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <DMA2_Stream1_IRQHandler+0x198>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <DMA2_Stream1_IRQHandler+0x19c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <DMA2_Stream1_IRQHandler+0x1a0>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000f04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f08:	6093      	str	r3, [r2, #8]
}
 8000f0a:	e023      	b.n	8000f54 <DMA2_Stream1_IRQHandler+0x174>
	else if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d01d      	beq.n	8000f54 <DMA2_Stream1_IRQHandler+0x174>
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <DMA2_Stream1_IRQHandler+0x184>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <DMA2_Stream1_IRQHandler+0x188>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <DMA2_Stream1_IRQHandler+0x18c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <DMA2_Stream1_IRQHandler+0x190>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <DMA2_Stream1_IRQHandler+0x194>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <DMA2_Stream1_IRQHandler+0x198>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <DMA2_Stream1_IRQHandler+0x19c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <DMA2_Stream1_IRQHandler+0x1a0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <DMA2_Stream1_IRQHandler+0x180>)
 8000f4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f52:	6093      	str	r3, [r2, #8]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40026400 	.word	0x40026400
 8000f64:	20000208 	.word	0x20000208
 8000f68:	200000f8 	.word	0x200000f8
 8000f6c:	20000128 	.word	0x20000128
 8000f70:	20000150 	.word	0x20000150
 8000f74:	20000158 	.word	0x20000158
 8000f78:	200001f0 	.word	0x200001f0
 8000f7c:	200000d0 	.word	0x200000d0
 8000f80:	20000258 	.word	0x20000258

08000f84 <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8000f88:	4b40      	ldr	r3, [pc, #256]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d012      	beq.n	8000fba <DMA2_Stream2_IRQHandler+0x36>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8000f94:	4b3e      	ldr	r3, [pc, #248]	@ (8001090 <DMA2_Stream2_IRQHandler+0x10c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001094 <DMA2_Stream2_IRQHandler+0x110>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8001098 <DMA2_Stream2_IRQHandler+0x114>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <DMA2_Stream2_IRQHandler+0x118>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000fac:	4b37      	ldr	r3, [pc, #220]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a36      	ldr	r2, [pc, #216]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb6:	6093      	str	r3, [r2, #8]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 8000fb8:	e062      	b.n	8001080 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8000fba:	4b34      	ldr	r3, [pc, #208]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d012      	beq.n	8000fec <DMA2_Stream2_IRQHandler+0x68>
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fc6:	4b32      	ldr	r3, [pc, #200]	@ (8001090 <DMA2_Stream2_IRQHandler+0x10c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fcc:	4b31      	ldr	r3, [pc, #196]	@ (8001094 <DMA2_Stream2_IRQHandler+0x110>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8000fd2:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <DMA2_Stream2_IRQHandler+0x114>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8000fd8:	4b30      	ldr	r3, [pc, #192]	@ (800109c <DMA2_Stream2_IRQHandler+0x118>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe8:	6093      	str	r3, [r2, #8]
}
 8000fea:	e049      	b.n	8001080 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d012      	beq.n	800101e <DMA2_Stream2_IRQHandler+0x9a>
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <DMA2_Stream2_IRQHandler+0x10c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8000ffe:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <DMA2_Stream2_IRQHandler+0x110>)
 8001000:	2201      	movs	r2, #1
 8001002:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8001004:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <DMA2_Stream2_IRQHandler+0x114>)
 8001006:	2201      	movs	r2, #1
 8001008:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 800100a:	4b24      	ldr	r3, [pc, #144]	@ (800109c <DMA2_Stream2_IRQHandler+0x118>)
 800100c:	2201      	movs	r2, #1
 800100e:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8001016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800101a:	6093      	str	r3, [r2, #8]
}
 800101c:	e030      	b.n	8001080 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_HTIF2)
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d012      	beq.n	8001050 <DMA2_Stream2_IRQHandler+0xcc>
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <DMA2_Stream2_IRQHandler+0x10c>)
 800102c:	2201      	movs	r2, #1
 800102e:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <DMA2_Stream2_IRQHandler+0x110>)
 8001032:	2201      	movs	r2, #1
 8001034:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <DMA2_Stream2_IRQHandler+0x114>)
 8001038:	2201      	movs	r2, #1
 800103a:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <DMA2_Stream2_IRQHandler+0x118>)
 800103e:	2201      	movs	r2, #1
 8001040:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4a11      	ldr	r2, [pc, #68]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8001048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800104c:	6093      	str	r3, [r2, #8]
}
 800104e:	e017      	b.n	8001080 <DMA2_Stream2_IRQHandler+0xfc>
	else if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8001050:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d011      	beq.n	8001080 <DMA2_Stream2_IRQHandler+0xfc>
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <DMA2_Stream2_IRQHandler+0x10c>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <DMA2_Stream2_IRQHandler+0x110>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <DMA2_Stream2_IRQHandler+0x114>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <DMA2_Stream2_IRQHandler+0x118>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <DMA2_Stream2_IRQHandler+0x108>)
 800107a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107e:	6093      	str	r3, [r2, #8]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40026400 	.word	0x40026400
 8001090:	20000130 	.word	0x20000130
 8001094:	20000088 	.word	0x20000088
 8001098:	20000200 	.word	0x20000200
 800109c:	20000260 	.word	0x20000260

080010a0 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 80010a4:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00f      	beq.n	80010d0 <DMA2_Stream3_IRQHandler+0x30>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 80010b0:	4b36      	ldr	r3, [pc, #216]	@ (800118c <DMA2_Stream3_IRQHandler+0xec>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <DMA2_Stream3_IRQHandler+0xf0>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <DMA2_Stream3_IRQHandler+0xf4>)
 80010be:	2201      	movs	r2, #1
 80010c0:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	4a30      	ldr	r2, [pc, #192]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010cc:	6093      	str	r3, [r2, #8]
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 80010ce:	e056      	b.n	800117e <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00f      	beq.n	80010fc <DMA2_Stream3_IRQHandler+0x5c>
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <DMA2_Stream3_IRQHandler+0xec>)
 80010de:	2201      	movs	r2, #1
 80010e0:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <DMA2_Stream3_IRQHandler+0xf0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <DMA2_Stream3_IRQHandler+0xf4>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a25      	ldr	r2, [pc, #148]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 80010f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010f8:	6093      	str	r3, [r2, #8]
}
 80010fa:	e040      	b.n	800117e <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_TEIF3)
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00f      	beq.n	8001128 <DMA2_Stream3_IRQHandler+0x88>
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8001108:	4b20      	ldr	r3, [pc, #128]	@ (800118c <DMA2_Stream3_IRQHandler+0xec>)
 800110a:	2201      	movs	r2, #1
 800110c:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <DMA2_Stream3_IRQHandler+0xf0>)
 8001110:	2201      	movs	r2, #1
 8001112:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <DMA2_Stream3_IRQHandler+0xf4>)
 8001116:	2201      	movs	r2, #1
 8001118:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4a1a      	ldr	r2, [pc, #104]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 8001120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001124:	6093      	str	r3, [r2, #8]
}
 8001126:	e02a      	b.n	800117e <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00f      	beq.n	8001154 <DMA2_Stream3_IRQHandler+0xb4>
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <DMA2_Stream3_IRQHandler+0xec>)
 8001136:	2201      	movs	r2, #1
 8001138:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <DMA2_Stream3_IRQHandler+0xf0>)
 800113c:	2201      	movs	r2, #1
 800113e:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <DMA2_Stream3_IRQHandler+0xf4>)
 8001142:	2201      	movs	r2, #1
 8001144:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 800114c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001150:	6093      	str	r3, [r2, #8]
}
 8001152:	e014      	b.n	800117e <DMA2_Stream3_IRQHandler+0xde>
	else if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00e      	beq.n	800117e <DMA2_Stream3_IRQHandler+0xde>
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <DMA2_Stream3_IRQHandler+0xec>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <DMA2_Stream3_IRQHandler+0xf0>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <DMA2_Stream3_IRQHandler+0xf4>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <DMA2_Stream3_IRQHandler+0xe8>)
 8001178:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800117c:	6093      	str	r3, [r2, #8]
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40026400 	.word	0x40026400
 800118c:	200001e8 	.word	0x200001e8
 8001190:	20000070 	.word	0x20000070
 8001194:	20000268 	.word	0x20000268

08001198 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00f      	beq.n	80011c8 <DMA2_Stream4_IRQHandler+0x30>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80011a8:	4b36      	ldr	r3, [pc, #216]	@ (8001284 <DMA2_Stream4_IRQHandler+0xec>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80011ae:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <DMA2_Stream4_IRQHandler+0xf0>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 80011b4:	4b35      	ldr	r3, [pc, #212]	@ (800128c <DMA2_Stream4_IRQHandler+0xf4>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80011ba:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	60d3      	str	r3, [r2, #12]
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 80011c6:	e056      	b.n	8001276 <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00f      	beq.n	80011f4 <DMA2_Stream4_IRQHandler+0x5c>
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <DMA2_Stream4_IRQHandler+0xec>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80011da:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <DMA2_Stream4_IRQHandler+0xf0>)
 80011dc:	2201      	movs	r2, #1
 80011de:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80011e0:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <DMA2_Stream4_IRQHandler+0xf4>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	4a25      	ldr	r2, [pc, #148]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	60d3      	str	r3, [r2, #12]
}
 80011f2:	e040      	b.n	8001276 <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TEIF4)
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00f      	beq.n	8001220 <DMA2_Stream4_IRQHandler+0x88>
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <DMA2_Stream4_IRQHandler+0xec>)
 8001202:	2201      	movs	r2, #1
 8001204:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <DMA2_Stream4_IRQHandler+0xf0>)
 8001208:	2201      	movs	r2, #1
 800120a:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <DMA2_Stream4_IRQHandler+0xf4>)
 800120e:	2201      	movs	r2, #1
 8001210:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	60d3      	str	r3, [r2, #12]
}
 800121e:	e02a      	b.n	8001276 <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00f      	beq.n	800124c <DMA2_Stream4_IRQHandler+0xb4>
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <DMA2_Stream4_IRQHandler+0xec>)
 800122e:	2201      	movs	r2, #1
 8001230:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <DMA2_Stream4_IRQHandler+0xf0>)
 8001234:	2201      	movs	r2, #1
 8001236:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <DMA2_Stream4_IRQHandler+0xf4>)
 800123a:	2201      	movs	r2, #1
 800123c:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	4a0f      	ldr	r2, [pc, #60]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	60d3      	str	r3, [r2, #12]
}
 800124a:	e014      	b.n	8001276 <DMA2_Stream4_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TCIF4)
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00e      	beq.n	8001276 <DMA2_Stream4_IRQHandler+0xde>
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <DMA2_Stream4_IRQHandler+0xec>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <DMA2_Stream4_IRQHandler+0xf0>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <DMA2_Stream4_IRQHandler+0xf4>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <DMA2_Stream4_IRQHandler+0xe8>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	60d3      	str	r3, [r2, #12]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40026400 	.word	0x40026400
 8001284:	20000110 	.word	0x20000110
 8001288:	20000138 	.word	0x20000138
 800128c:	20000270 	.word	0x20000270

08001290 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8001294:	4b31      	ldr	r3, [pc, #196]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00c      	beq.n	80012ba <DMA2_Stream5_IRQHandler+0x2a>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <DMA2_Stream5_IRQHandler+0xd0>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 80012a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001364 <DMA2_Stream5_IRQHandler+0xd4>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a2a      	ldr	r2, [pc, #168]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b6:	60d3      	str	r3, [r2, #12]
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 80012b8:	e04a      	b.n	8001350 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 80012ba:	4b28      	ldr	r3, [pc, #160]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00c      	beq.n	80012e0 <DMA2_Stream5_IRQHandler+0x50>
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80012c6:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <DMA2_Stream5_IRQHandler+0xd0>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <DMA2_Stream5_IRQHandler+0xd4>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80012d2:	4b22      	ldr	r3, [pc, #136]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	4a21      	ldr	r2, [pc, #132]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012dc:	60d3      	str	r3, [r2, #12]
}
 80012de:	e037      	b.n	8001350 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_TEIF5)
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00c      	beq.n	8001306 <DMA2_Stream5_IRQHandler+0x76>
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <DMA2_Stream5_IRQHandler+0xd0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <DMA2_Stream5_IRQHandler+0xd4>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4a17      	ldr	r2, [pc, #92]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	e024      	b.n	8001350 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00c      	beq.n	800132c <DMA2_Stream5_IRQHandler+0x9c>
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001312:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <DMA2_Stream5_IRQHandler+0xd0>)
 8001314:	2201      	movs	r2, #1
 8001316:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <DMA2_Stream5_IRQHandler+0xd4>)
 800131a:	2201      	movs	r2, #1
 800131c:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 8001324:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001328:	60d3      	str	r3, [r2, #12]
}
 800132a:	e011      	b.n	8001350 <DMA2_Stream5_IRQHandler+0xc0>
	else if(DMA2 -> HISR & DMA_HISR_TCIF5)
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <DMA2_Stream5_IRQHandler+0xc0>
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <DMA2_Stream5_IRQHandler+0xd0>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <DMA2_Stream5_IRQHandler+0xd4>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <DMA2_Stream5_IRQHandler+0xcc>)
 800134a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40026400 	.word	0x40026400
 8001360:	200000f0 	.word	0x200000f0
 8001364:	20000278 	.word	0x20000278

08001368 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 800136c:	4b47      	ldr	r3, [pc, #284]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d015      	beq.n	80013a4 <DMA2_Stream6_IRQHandler+0x3c>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8001378:	4b45      	ldr	r3, [pc, #276]	@ (8001490 <DMA2_Stream6_IRQHandler+0x128>)
 800137a:	2201      	movs	r2, #1
 800137c:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 800137e:	4b45      	ldr	r3, [pc, #276]	@ (8001494 <DMA2_Stream6_IRQHandler+0x12c>)
 8001380:	2201      	movs	r2, #1
 8001382:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001384:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <DMA2_Stream6_IRQHandler+0x130>)
 8001386:	2201      	movs	r2, #1
 8001388:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 800138a:	4b44      	ldr	r3, [pc, #272]	@ (800149c <DMA2_Stream6_IRQHandler+0x134>)
 800138c:	2201      	movs	r2, #1
 800138e:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8001390:	4b43      	ldr	r3, [pc, #268]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x138>)
 8001392:	2201      	movs	r2, #1
 8001394:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001396:	4b3d      	ldr	r3, [pc, #244]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	4a3c      	ldr	r2, [pc, #240]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	60d3      	str	r3, [r2, #12]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 80013a2:	e06e      	b.n	8001482 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 80013a4:	4b39      	ldr	r3, [pc, #228]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d015      	beq.n	80013dc <DMA2_Stream6_IRQHandler+0x74>
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 80013b0:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <DMA2_Stream6_IRQHandler+0x128>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013b6:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <DMA2_Stream6_IRQHandler+0x12c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013bc:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <DMA2_Stream6_IRQHandler+0x130>)
 80013be:	2201      	movs	r2, #1
 80013c0:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80013c2:	4b36      	ldr	r3, [pc, #216]	@ (800149c <DMA2_Stream6_IRQHandler+0x134>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 80013c8:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x138>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a2e      	ldr	r2, [pc, #184]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d8:	60d3      	str	r3, [r2, #12]
}
 80013da:	e052      	b.n	8001482 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_TEIF6)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d015      	beq.n	8001414 <DMA2_Stream6_IRQHandler+0xac>
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <DMA2_Stream6_IRQHandler+0x128>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <DMA2_Stream6_IRQHandler+0x12c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <DMA2_Stream6_IRQHandler+0x130>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <DMA2_Stream6_IRQHandler+0x134>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x138>)
 8001402:	2201      	movs	r2, #1
 8001404:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	4a20      	ldr	r2, [pc, #128]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 800140c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001410:	60d3      	str	r3, [r2, #12]
}
 8001412:	e036      	b.n	8001482 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <DMA2_Stream6_IRQHandler+0xe4>
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <DMA2_Stream6_IRQHandler+0x128>)
 8001422:	2201      	movs	r2, #1
 8001424:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <DMA2_Stream6_IRQHandler+0x12c>)
 8001428:	2201      	movs	r2, #1
 800142a:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <DMA2_Stream6_IRQHandler+0x130>)
 800142e:	2201      	movs	r2, #1
 8001430:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <DMA2_Stream6_IRQHandler+0x134>)
 8001434:	2201      	movs	r2, #1
 8001436:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x138>)
 800143a:	2201      	movs	r2, #1
 800143c:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 8001444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001448:	60d3      	str	r3, [r2, #12]
}
 800144a:	e01a      	b.n	8001482 <DMA2_Stream6_IRQHandler+0x11a>
	else if(DMA2 -> HISR & DMA_HISR_TCIF6)
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d014      	beq.n	8001482 <DMA2_Stream6_IRQHandler+0x11a>
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <DMA2_Stream6_IRQHandler+0x128>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <DMA2_Stream6_IRQHandler+0x12c>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <DMA2_Stream6_IRQHandler+0x130>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <DMA2_Stream6_IRQHandler+0x134>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <DMA2_Stream6_IRQHandler+0x138>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a04      	ldr	r2, [pc, #16]	@ (800148c <DMA2_Stream6_IRQHandler+0x124>)
 800147c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001480:	60d3      	str	r3, [r2, #12]
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40026400 	.word	0x40026400
 8001490:	20000100 	.word	0x20000100
 8001494:	20000108 	.word	0x20000108
 8001498:	20000140 	.word	0x20000140
 800149c:	200000d8 	.word	0x200000d8
 80014a0:	20000280 	.word	0x20000280

080014a4 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 80014a8:	4b38      	ldr	r3, [pc, #224]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00f      	beq.n	80014d4 <DMA2_Stream7_IRQHandler+0x30>
	{
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80014b4:	4b36      	ldr	r3, [pc, #216]	@ (8001590 <DMA2_Stream7_IRQHandler+0xec>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 80014ba:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <DMA2_Stream7_IRQHandler+0xf0>)
 80014bc:	2201      	movs	r2, #1
 80014be:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 80014c0:	4b35      	ldr	r3, [pc, #212]	@ (8001598 <DMA2_Stream7_IRQHandler+0xf4>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4a30      	ldr	r2, [pc, #192]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d0:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 80014d2:	e056      	b.n	8001582 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00f      	beq.n	8001500 <DMA2_Stream7_IRQHandler+0x5c>
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <DMA2_Stream7_IRQHandler+0xec>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80014e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <DMA2_Stream7_IRQHandler+0xf0>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <DMA2_Stream7_IRQHandler+0xf4>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80014f2:	4b26      	ldr	r3, [pc, #152]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	4a25      	ldr	r2, [pc, #148]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 80014f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014fc:	60d3      	str	r3, [r2, #12]
}
 80014fe:	e040      	b.n	8001582 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8001500:	4b22      	ldr	r3, [pc, #136]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00f      	beq.n	800152c <DMA2_Stream7_IRQHandler+0x88>
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 800150c:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <DMA2_Stream7_IRQHandler+0xec>)
 800150e:	2201      	movs	r2, #1
 8001510:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <DMA2_Stream7_IRQHandler+0xf0>)
 8001514:	2201      	movs	r2, #1
 8001516:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <DMA2_Stream7_IRQHandler+0xf4>)
 800151a:	2201      	movs	r2, #1
 800151c:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 8001524:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001528:	60d3      	str	r3, [r2, #12]
}
 800152a:	e02a      	b.n	8001582 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_HTIF7)
 800152c:	4b17      	ldr	r3, [pc, #92]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00f      	beq.n	8001558 <DMA2_Stream7_IRQHandler+0xb4>
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <DMA2_Stream7_IRQHandler+0xec>)
 800153a:	2201      	movs	r2, #1
 800153c:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <DMA2_Stream7_IRQHandler+0xf0>)
 8001540:	2201      	movs	r2, #1
 8001542:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <DMA2_Stream7_IRQHandler+0xf4>)
 8001546:	2201      	movs	r2, #1
 8001548:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4a0f      	ldr	r2, [pc, #60]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 8001550:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001554:	60d3      	str	r3, [r2, #12]
}
 8001556:	e014      	b.n	8001582 <DMA2_Stream7_IRQHandler+0xde>
	else if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00e      	beq.n	8001582 <DMA2_Stream7_IRQHandler+0xde>
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <DMA2_Stream7_IRQHandler+0xec>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <DMA2_Stream7_IRQHandler+0xf0>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <DMA2_Stream7_IRQHandler+0xf4>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	4a04      	ldr	r2, [pc, #16]	@ (800158c <DMA2_Stream7_IRQHandler+0xe8>)
 800157c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001580:	60d3      	str	r3, [r2, #12]
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40026400 	.word	0x40026400
 8001590:	20000148 	.word	0x20000148
 8001594:	20000090 	.word	0x20000090
 8001598:	20000288 	.word	0x20000288

0800159c <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a25      	ldr	r2, [pc, #148]	@ (800163c <GPIO_Clock_Enable+0xa0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d106      	bne.n	80015ba <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	4a23      	ldr	r2, [pc, #140]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b8:	e039      	b.n	800162e <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <GPIO_Clock_Enable+0xa8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d106      	bne.n	80015d0 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	e02e      	b.n	800162e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <GPIO_Clock_Enable+0xac>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d106      	bne.n	80015e6 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80015d8:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e4:	e023      	b.n	800162e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <GPIO_Clock_Enable+0xb0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d106      	bne.n	80015fc <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a13      	ldr	r2, [pc, #76]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	e018      	b.n	800162e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <GPIO_Clock_Enable+0xb4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d106      	bne.n	8001612 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001610:	e00d      	b.n	800162e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <GPIO_Clock_Enable+0xb8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d106      	bne.n	8001628 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <GPIO_Clock_Enable+0xa4>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	e002      	b.n	800162e <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	e000      	b.n	8001630 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40020000 	.word	0x40020000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40021000 	.word	0x40021000
 8001654:	40021c00 	.word	0x40021c00

08001658 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	4608      	mov	r0, r1
 8001662:	4611      	mov	r1, r2
 8001664:	461a      	mov	r2, r3
 8001666:	4603      	mov	r3, r0
 8001668:	70fb      	strb	r3, [r7, #3]
 800166a:	460b      	mov	r3, r1
 800166c:	70bb      	strb	r3, [r7, #2]
 800166e:	4613      	mov	r3, r2
 8001670:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff92 	bl	800159c <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	78b9      	ldrb	r1, [r7, #2]
 800167e:	78fa      	ldrb	r2, [r7, #3]
 8001680:	0052      	lsls	r2, r2, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 800168c:	2202      	movs	r2, #2
 800168e:	787b      	ldrb	r3, [r7, #1]
 8001690:	4293      	cmp	r3, r2
 8001692:	d008      	beq.n	80016a6 <GPIO_Pin_Init+0x4e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	7879      	ldrb	r1, [r7, #1]
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 80016a6:	2204      	movs	r2, #4
 80016a8:	7c3b      	ldrb	r3, [r7, #16]
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d009      	beq.n	80016c2 <GPIO_Pin_Init+0x6a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	7c39      	ldrb	r1, [r7, #16]
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	0052      	lsls	r2, r2, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 80016c2:	2204      	movs	r2, #4
 80016c4:	7d3b      	ldrb	r3, [r7, #20]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d009      	beq.n	80016de <GPIO_Pin_Init+0x86>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	7d39      	ldrb	r1, [r7, #20]
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	0052      	lsls	r2, r2, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	2b07      	cmp	r3, #7
 80016e2:	d80a      	bhi.n	80016fa <GPIO_Pin_Init+0xa2>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	7e39      	ldrb	r1, [r7, #24]
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80016f8:	e00a      	b.n	8001710 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	7e39      	ldrb	r1, [r7, #24]
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	3a08      	subs	r2, #8
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	fa01 f202 	lsl.w	r2, r1, r2
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ffc2 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	2101      	movs	r1, #1
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	43d2      	mvns	r2, r2
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	615a      	str	r2, [r3, #20]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	2101      	movs	r1, #1
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	615a      	str	r2, [r3, #20]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
//	uint8_t pll_m = 4;
//	uint8_t pll_n = 168; //192
//	uint8_t pll_p = 0;
//	uint8_t pll_q = 7;

	uint8_t pll_m = 8;
 800180a:	2308      	movs	r3, #8
 800180c:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 800180e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001812:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8001818:	2307      	movs	r3, #7
 800181a:	70bb      	strb	r3, [r7, #2]

	RCC->PLLCFGR = 0x00000000;
 800181c:	4b3c      	ldr	r3, [pc, #240]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3a      	ldr	r2, [pc, #232]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800182e:	bf00      	nop
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f9      	beq.n	8001830 <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800183c:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	4a33      	ldr	r2, [pc, #204]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001848:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <MCU_Clock_Setup+0x110>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a31      	ldr	r2, [pc, #196]	@ (8001914 <MCU_Clock_Setup+0x110>)
 800184e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001852:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001854:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <MCU_Clock_Setup+0x114>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <MCU_Clock_Setup+0x114>)
 800185a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800185e:	f043 0305 	orr.w	r3, r3, #5
 8001862:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	78ba      	ldrb	r2, [r7, #2]
 800186a:	0611      	lsls	r1, r2, #24
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	0412      	lsls	r2, r2, #16
 8001870:	4311      	orrs	r1, r2
 8001872:	88ba      	ldrh	r2, [r7, #4]
 8001874:	0192      	lsls	r2, r2, #6
 8001876:	4311      	orrs	r1, r2
 8001878:	79fa      	ldrb	r2, [r7, #7]
 800187a:	430a      	orrs	r2, r1
 800187c:	4611      	mov	r1, r2
 800187e:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001880:	430b      	orrs	r3, r1
 8001882:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 800188a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800188e:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001892:	4a1f      	ldr	r2, [pc, #124]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 800189e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80018a2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ae:	6093      	str	r3, [r2, #8]




	RCC -> CR |= RCC_CR_PLLON;
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]



	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80018bc:	bf00      	nop
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f9      	beq.n	80018be <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80018d6:	bf00      	nop
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d1f9      	bne.n	80018d8 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 80018e4:	f000 f8c6 	bl	8001a74 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MCU_Clock_Setup+0x118>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001920 <MCU_Clock_Setup+0x11c>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff38 	bl	800176c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	4a03      	ldr	r2, [pc, #12]	@ (8001910 <MCU_Clock_Setup+0x10c>)
 8001902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001906:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000
 8001918:	40023c00 	.word	0x40023c00
 800191c:	20000000 	.word	0x20000000
 8001920:	18618619 	.word	0x18618619

08001924 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <Delay_Config+0x2c>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <Delay_Config+0x2c>)
 8001930:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001934:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <Delay_Config+0x2c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <Delay_Config+0x2c>)
 800193e:	2205      	movs	r2, #5
 8001940:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800195e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001962:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80019a8 <Delay_ms+0x54>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196e:	ee17 3a90 	vmov	r3, s15
 8001972:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <Delay_ms+0x58>)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <Delay_ms+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <Delay_ms+0x58>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <Delay_ms+0x58>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 800198c:	bf00      	nop
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <Delay_ms+0x58>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f9      	beq.n	800198e <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	48241000 	.word	0x48241000
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 80019ba:	e00b      	b.n	80019d4 <Delay_milli+0x24>
	{
		Delay_ms(1);
 80019bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80019c0:	f7ff ffc8 	bl	8001954 <Delay_ms>
	for (; ms>0; ms--)
 80019c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80019d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	dcec      	bgt.n	80019bc <Delay_milli+0xc>
	}
	return ms;
 80019e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ea:	ee17 3a90 	vmov	r3, s15
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <main>:




int main(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 80019fe:	f7ff ff01 	bl	8001804 <MCU_Clock_Setup>
	Delay_Config();
 8001a02:	f7ff ff8f 	bl	8001924 <Delay_Config>

	GPIO_Pin_Init(GPIOD, 12,
			GPIO_Configuration.Mode.General_Purpose_Output,
 8001a06:	2001      	movs	r0, #1
			GPIO_Configuration.Output_Type.Push_Pull,
 8001a08:	2400      	movs	r4, #0
			GPIO_Configuration.Speed.Very_High_Speed,
 8001a0a:	2303      	movs	r3, #3
			GPIO_Configuration.Pull.No_Pull_Up_Down,
 8001a0c:	2200      	movs	r2, #0
			GPIO_Configuration.Alternate_Functions.None);
 8001a0e:	2100      	movs	r1, #0
	GPIO_Pin_Init(GPIOD, 12,
 8001a10:	9102      	str	r1, [sp, #8]
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4623      	mov	r3, r4
 8001a18:	4602      	mov	r2, r0
 8001a1a:	210c      	movs	r1, #12
 8001a1c:	480a      	ldr	r0, [pc, #40]	@ (8001a48 <main+0x50>)
 8001a1e:	f7ff fe1b 	bl	8001658 <GPIO_Pin_Init>

	for(;;)
	{


		GPIO_Pin_High(GPIOD, 12);
 8001a22:	210c      	movs	r1, #12
 8001a24:	4808      	ldr	r0, [pc, #32]	@ (8001a48 <main+0x50>)
 8001a26:	f7ff fed8 	bl	80017da <GPIO_Pin_High>
		Delay_milli(1000);
 8001a2a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001a4c <main+0x54>
 8001a2e:	f7ff ffbf 	bl	80019b0 <Delay_milli>
		GPIO_Pin_Low(GPIOD, 12);
 8001a32:	210c      	movs	r1, #12
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <main+0x50>)
 8001a36:	f7ff febb 	bl	80017b0 <GPIO_Pin_Low>
		Delay_milli(1000);
 8001a3a:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001a4c <main+0x54>
 8001a3e:	f7ff ffb7 	bl	80019b0 <Delay_milli>
		GPIO_Pin_High(GPIOD, 12);
 8001a42:	bf00      	nop
 8001a44:	e7ed      	b.n	8001a22 <main+0x2a>
 8001a46:	bf00      	nop
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	447a0000 	.word	0x447a0000

08001a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	2302      	movs	r3, #2
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001a8e:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <SystemCoreClockUpdate+0xec>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d011      	beq.n	8001ac2 <SystemCoreClockUpdate+0x4e>
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d844      	bhi.n	8001b2e <SystemCoreClockUpdate+0xba>
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <SystemCoreClockUpdate+0x3e>
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d004      	beq.n	8001aba <SystemCoreClockUpdate+0x46>
 8001ab0:	e03d      	b.n	8001b2e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <SystemCoreClockUpdate+0xf0>)
 8001ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b68 <SystemCoreClockUpdate+0xf4>)
 8001ab6:	601a      	str	r2, [r3, #0]
      break;
 8001ab8:	e03d      	b.n	8001b36 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <SystemCoreClockUpdate+0xf0>)
 8001abc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b6c <SystemCoreClockUpdate+0xf8>)
 8001abe:	601a      	str	r2, [r3, #0]
      break;
 8001ac0:	e039      	b.n	8001b36 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001ac2:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <SystemCoreClockUpdate+0xec>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	0d9b      	lsrs	r3, r3, #22
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <SystemCoreClockUpdate+0xec>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001ade:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <SystemCoreClockUpdate+0xf8>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b60 <SystemCoreClockUpdate+0xec>)
 8001ae8:	6852      	ldr	r2, [r2, #4]
 8001aea:	0992      	lsrs	r2, r2, #6
 8001aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e00b      	b.n	8001b10 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001af8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b68 <SystemCoreClockUpdate+0xf4>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <SystemCoreClockUpdate+0xec>)
 8001b02:	6852      	ldr	r2, [r2, #4]
 8001b04:	0992      	lsrs	r2, r2, #6
 8001b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <SystemCoreClockUpdate+0xec>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	4a0e      	ldr	r2, [pc, #56]	@ (8001b64 <SystemCoreClockUpdate+0xf0>)
 8001b2a:	6013      	str	r3, [r2, #0]
      break;
 8001b2c:	e003      	b.n	8001b36 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <SystemCoreClockUpdate+0xf0>)
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <SystemCoreClockUpdate+0xf4>)
 8001b32:	601a      	str	r2, [r3, #0]
      break;
 8001b34:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <SystemCoreClockUpdate+0xec>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <SystemCoreClockUpdate+0xfc>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <SystemCoreClockUpdate+0xf0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <SystemCoreClockUpdate+0xf0>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40023800 	.word	0x40023800
 8001b64:	20000000 	.word	0x20000000
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	017d7840 	.word	0x017d7840
 8001b70:	08001c28 	.word	0x08001c28

08001b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f7ff ff6a 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopForever+0xe>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopForever+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ba2:	f000 f811 	bl	8001bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba6:	f7ff ff27 	bl	80019f8 <main>

08001baa <LoopForever>:

LoopForever:
  b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   r0, =_estack
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001bb8:	08001c40 	.word	0x08001c40
  ldr r2, =_sbss
 8001bbc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001bc0:	20000290 	.word	0x20000290

08001bc4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>
	...

08001bc8 <__libc_init_array>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	4d0d      	ldr	r5, [pc, #52]	@ (8001c00 <__libc_init_array+0x38>)
 8001bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8001c04 <__libc_init_array+0x3c>)
 8001bce:	1b64      	subs	r4, r4, r5
 8001bd0:	10a4      	asrs	r4, r4, #2
 8001bd2:	2600      	movs	r6, #0
 8001bd4:	42a6      	cmp	r6, r4
 8001bd6:	d109      	bne.n	8001bec <__libc_init_array+0x24>
 8001bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8001c08 <__libc_init_array+0x40>)
 8001bda:	4c0c      	ldr	r4, [pc, #48]	@ (8001c0c <__libc_init_array+0x44>)
 8001bdc:	f000 f818 	bl	8001c10 <_init>
 8001be0:	1b64      	subs	r4, r4, r5
 8001be2:	10a4      	asrs	r4, r4, #2
 8001be4:	2600      	movs	r6, #0
 8001be6:	42a6      	cmp	r6, r4
 8001be8:	d105      	bne.n	8001bf6 <__libc_init_array+0x2e>
 8001bea:	bd70      	pop	{r4, r5, r6, pc}
 8001bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf0:	4798      	blx	r3
 8001bf2:	3601      	adds	r6, #1
 8001bf4:	e7ee      	b.n	8001bd4 <__libc_init_array+0xc>
 8001bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bfa:	4798      	blx	r3
 8001bfc:	3601      	adds	r6, #1
 8001bfe:	e7f2      	b.n	8001be6 <__libc_init_array+0x1e>
 8001c00:	08001c38 	.word	0x08001c38
 8001c04:	08001c38 	.word	0x08001c38
 8001c08:	08001c38 	.word	0x08001c38
 8001c0c:	08001c3c 	.word	0x08001c3c

08001c10 <_init>:
 8001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c12:	bf00      	nop
 8001c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c16:	bc08      	pop	{r3}
 8001c18:	469e      	mov	lr, r3
 8001c1a:	4770      	bx	lr

08001c1c <_fini>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	bf00      	nop
 8001c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c22:	bc08      	pop	{r3}
 8001c24:	469e      	mov	lr, r3
 8001c26:	4770      	bx	lr
