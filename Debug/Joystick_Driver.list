
Joystick_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  00008054  2**0
                  CONTENTS
  4 .ARM          00000008  08006380  08006380  00007380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006388  08006388  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006388  08006388  00007388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800638c  0800638c  0000738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08006390  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008054  2**0
                  CONTENTS
 10 .bss          00000734  20000054  20000054  00008054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000788  20000788  00008054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d36d  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014e6  00000000  00000000  000153f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000350  00000000  00000000  000168d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000026c  00000000  00000000  00016c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac3a  00000000  00000000  00016e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000079c9  00000000  00000000  00031ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090588  00000000  00000000  00039497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c9a1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000012d4  00000000  00000000  000c9a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000cad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b18 	.word	0x08005b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08005b18 	.word	0x08005b18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
 8000b86:	f7ff ffa9 	bl	8000adc <__aeabi_dcmplt>
 8000b8a:	b928      	cbnz	r0, 8000b98 <__aeabi_d2lz+0x1c>
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	4629      	mov	r1, r5
 8000b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b94:	f000 b80a 	b.w	8000bac <__aeabi_d2ulz>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b9e:	f000 f805 	bl	8000bac <__aeabi_d2ulz>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
 8000baa:	bf00      	nop

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fd1f 	bl	80005f8 <__aeabi_dmul>
 8000bba:	f000 f815 	bl	8000be8 <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fca0 	bl	8000504 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fd16 	bl	80005f8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb58 	bl	8000288 <__aeabi_dsub>
 8000bd8:	f000 f806 	bl	8000be8 <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8000c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c36:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000c7c <Delay_ms+0x54>
 8000c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c42:	ee17 3a90 	vmov	r3, s15
 8000c46:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <Delay_ms+0x58>)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <Delay_ms+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <Delay_ms+0x58>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <Delay_ms+0x58>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000c60:	bf00      	nop
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <Delay_ms+0x58>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f9      	beq.n	8000c62 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	48241000 	.word	0x48241000
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8000c8e:	e00b      	b.n	8000ca8 <Delay_milli+0x24>
	{
		Delay_ms(1);
 8000c90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000c94:	f7ff ffc8 	bl	8000c28 <Delay_ms>
	for (; ms>0; ms--)
 8000c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ca4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb4:	dcec      	bgt.n	8000c90 <Delay_milli+0xc>
	}
	return ms;
 8000cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cbe:	ee17 3a90 	vmov	r3, s15
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <ADC_Timer_External_Trigger_Init>:
 * trigger events, including various channels and timers.
 *
 * @param[in] config Pointer to the ADC configuration structure.
 */
static void ADC_Timer_External_Trigger_Init(ADC_Config *config)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d122      	bne.n	8000d24 <ADC_Timer_External_Trigger_Init+0x58>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000cde:	4b94      	ldr	r3, [pc, #592]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a93      	ldr	r2, [pc, #588]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> CCR1 = 100/2 -1;
 8000cea:	4b92      	ldr	r3, [pc, #584]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000cec:	2231      	movs	r2, #49	@ 0x31
 8000cee:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->PSC = 16800;
 8000cf0:	4b90      	ldr	r3, [pc, #576]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000cf2:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 100-1;
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000cfa:	2263      	movs	r2, #99	@ 0x63
 8000cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1 -> CR2 |= TIM_CR2_MMS_1 | TIM_CR2_MMS_0;
 8000cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4a8c      	ldr	r2, [pc, #560]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d04:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000d08:	6053      	str	r3, [r2, #4]
		TIM1 -> CCER |= TIM_CCER_CC1E;
 8000d0a:	4b8a      	ldr	r3, [pc, #552]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	4a89      	ldr	r2, [pc, #548]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6213      	str	r3, [r2, #32]
		TIM1->CR1 |= TIM_CR1_CEN ;
 8000d16:	4b87      	ldr	r3, [pc, #540]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a86      	ldr	r2, [pc, #536]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6013      	str	r3, [r2, #0]
		TIM3->PSC = 10000-1;
		TIM3->ARR = 8400-1;
		TIM3->CR1 |= TIM_CR1_CEN;
	}
	/***************************************************************************************************************/
}
 8000d22:	e1de      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7a1b      	ldrb	r3, [r3, #8]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d120      	bne.n	8000d70 <ADC_Timer_External_Trigger_Init+0xa4>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000d2e:	4b80      	ldr	r3, [pc, #512]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a7f      	ldr	r2, [pc, #508]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC2G;
 8000d3a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a7d      	ldr	r2, [pc, #500]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC2IE;
 8000d46:	4b7b      	ldr	r3, [pc, #492]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 8000d52:	4b78      	ldr	r3, [pc, #480]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d54:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d58:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000d5a:	4b76      	ldr	r3, [pc, #472]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d5c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d60:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000d62:	4b74      	ldr	r3, [pc, #464]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a73      	ldr	r2, [pc, #460]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6013      	str	r3, [r2, #0]
}
 8000d6e:	e1b8      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_1_CC3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7a1b      	ldrb	r3, [r3, #8]
 8000d74:	2202      	movs	r2, #2
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d120      	bne.n	8000dbc <ADC_Timer_External_Trigger_Init+0xf0>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a6c      	ldr	r2, [pc, #432]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC3G;
 8000d86:	4b6b      	ldr	r3, [pc, #428]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a6a      	ldr	r2, [pc, #424]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC3IE;
 8000d92:	4b68      	ldr	r3, [pc, #416]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	4a67      	ldr	r2, [pc, #412]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 8000d9e:	4b65      	ldr	r3, [pc, #404]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000da0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000da6:	4b63      	ldr	r3, [pc, #396]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000da8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000dac:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000dae:	4b61      	ldr	r3, [pc, #388]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a60      	ldr	r2, [pc, #384]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	e192      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_1_CC4)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7a1b      	ldrb	r3, [r3, #8]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d120      	bne.n	8000e08 <ADC_Timer_External_Trigger_Init+0x13c>
		RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a59      	ldr	r2, [pc, #356]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM1 -> EGR |= TIM_EGR_CC4G;
 8000dd2:	4b58      	ldr	r3, [pc, #352]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a57      	ldr	r2, [pc, #348]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6153      	str	r3, [r2, #20]
		TIM1->DIER |=  TIM_DIER_CC4IE;
 8000dde:	4b55      	ldr	r3, [pc, #340]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	4a54      	ldr	r2, [pc, #336]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	60d3      	str	r3, [r2, #12]
		TIM1->PSC = 10000-1;
 8000dea:	4b52      	ldr	r3, [pc, #328]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dec:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM1->ARR = 8400-1;
 8000df2:	4b50      	ldr	r3, [pc, #320]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000df4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000df8:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM1->CR1 |= TIM_CR1_CEN;
 8000dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a4d      	ldr	r2, [pc, #308]	@ (8000f34 <ADC_Timer_External_Trigger_Init+0x268>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]
}
 8000e06:	e16c      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_2_CC1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7a1b      	ldrb	r3, [r3, #8]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d128      	bne.n	8000e64 <ADC_Timer_External_Trigger_Init+0x198>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e12:	4b47      	ldr	r3, [pc, #284]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a46      	ldr	r2, [pc, #280]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC1G;
 8000e1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC1IE;
 8000e2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 8000e3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e42:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e46:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e4c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e50:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]
}
 8000e62:	e13e      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7a1b      	ldrb	r3, [r3, #8]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d132      	bne.n	8000ed4 <ADC_Timer_External_Trigger_Init+0x208>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e6e:	4b30      	ldr	r3, [pc, #192]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	4a2f      	ldr	r2, [pc, #188]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC2G | TIM_EGR_UG;
 8000e7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e84:	f043 0305 	orr.w	r3, r3, #5
 8000e88:	6153      	str	r3, [r2, #20]
		TIM2 -> CCR1 = 100/2 -1;
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e8e:	2231      	movs	r2, #49	@ 0x31
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->PSC = 168;
 8000e92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e96:	22a8      	movs	r2, #168	@ 0xa8
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 100-1;
 8000e9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e9e:	2263      	movs	r2, #99	@ 0x63
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8000ea2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6053      	str	r3, [r2, #4]
		TIM2 -> CCER |= TIM_CCER_CC2E;
 8000eb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6213      	str	r3, [r2, #32]
		TIM2->CR1 |= TIM_CR1_CEN ;
 8000ec2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	e106      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a1b      	ldrb	r3, [r3, #8]
 8000ed8:	2204      	movs	r2, #4
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d12c      	bne.n	8000f38 <ADC_Timer_External_Trigger_Init+0x26c>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <ADC_Timer_External_Trigger_Init+0x264>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 8000eea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 8000efa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 8000f0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f0e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f12:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000f14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f18:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000f1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6013      	str	r3, [r2, #0]
}
 8000f2e:	e0d8      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40010000 	.word	0x40010000
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC4)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7a1b      	ldrb	r3, [r3, #8]
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d128      	bne.n	8000f94 <ADC_Timer_External_Trigger_Init+0x2c8>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000f42:	4b6b      	ldr	r3, [pc, #428]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	4a6a      	ldr	r2, [pc, #424]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2 -> EGR |= TIM_EGR_CC3G;
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6153      	str	r3, [r2, #20]
		TIM2->DIER |=  TIM_DIER_CC3IE;
 8000f5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	60d3      	str	r3, [r2, #12]
		TIM2->PSC = 10000-1;
 8000f6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f72:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 8400-1;
 8000f78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f7c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f80:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000f82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	e0a6      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_2_TRGO)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a1b      	ldrb	r3, [r3, #8]
 8000f98:	2206      	movs	r2, #6
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d130      	bne.n	8001000 <ADC_Timer_External_Trigger_Init+0x334>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000f9e:	4b54      	ldr	r3, [pc, #336]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a53      	ldr	r2, [pc, #332]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->DIER |=  TIM_DIER_UIE;
 8000faa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	60d3      	str	r3, [r2, #12]
		TIM2 -> CR2 |=  TIM_CR2_MMS_1;
 8000fba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	6053      	str	r3, [r2, #4]
		TIM2->PSC = 1000-1;
 8000fca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fd2:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR = 16800-1;
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd8:	f244 129f 	movw	r2, #16799	@ 0x419f
 8000fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM2->CR1 |= TIM_CR1_CEN;
 8000fde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6013      	str	r3, [r2, #0]
		TIM2 -> EGR |= TIM_EGR_UG;
 8000fee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6153      	str	r3, [r2, #20]
}
 8000ffe:	e070      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Regular_External_Trigger_Event.Timer_3_CC1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7a1b      	ldrb	r3, [r3, #8]
 8001004:	2207      	movs	r2, #7
 8001006:	4293      	cmp	r3, r2
 8001008:	d120      	bne.n	800104c <ADC_Timer_External_Trigger_Init+0x380>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800100a:	4b39      	ldr	r3, [pc, #228]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a38      	ldr	r2, [pc, #224]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC1G;
 8001016:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a36      	ldr	r2, [pc, #216]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC1IE;
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	4a33      	ldr	r2, [pc, #204]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 800102e:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001030:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001038:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800103c:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 800103e:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2c      	ldr	r2, [pc, #176]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	e04a      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7a1b      	ldrb	r3, [r3, #8]
 8001050:	2200      	movs	r2, #0
 8001052:	4293      	cmp	r3, r2
 8001054:	d120      	bne.n	8001098 <ADC_Timer_External_Trigger_Init+0x3cc>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC2G;
 8001062:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a23      	ldr	r2, [pc, #140]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC2IE;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	4a20      	ldr	r2, [pc, #128]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 800107c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001084:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001088:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	e024      	b.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
	else if(config->External_Trigger.Trigger_Event == ADC_Configuration.Injected_External_Trigger_Event.Timer_3_CC4)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7a1b      	ldrb	r3, [r3, #8]
 800109c:	2200      	movs	r2, #0
 800109e:	4293      	cmp	r3, r2
 80010a0:	d11f      	bne.n	80010e2 <ADC_Timer_External_Trigger_Init+0x416>
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <ADC_Timer_External_Trigger_Init+0x424>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM3 -> EGR |= TIM_EGR_CC3G;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a10      	ldr	r2, [pc, #64]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6153      	str	r3, [r2, #20]
		TIM3->DIER |=  TIM_DIER_CC3IE;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	60d3      	str	r3, [r2, #12]
		TIM3->PSC = 10000-1;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM3->ARR = 8400-1;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010d0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM3->CR1 |= TIM_CR1_CEN;
 80010d6:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <ADC_Timer_External_Trigger_Init+0x428>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6013      	str	r3, [r2, #0]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40000400 	.word	0x40000400

080010f8 <ADC_Sampling_Config>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns the number of enabled channels after configuration.
 */
static int8_t ADC_Sampling_Config(ADC_Config *config)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    uint8_t conversion_Counter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

    // Configure sampling time for Channel 0 if enabled
    if(config->Channel_0.Enable == ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7a9b      	ldrb	r3, [r3, #10]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00c      	beq.n	8001126 <ADC_Sampling_Config+0x2e>
    {
        config->Port->SMPR2 |= config->Channel_0.Sample_Time << ADC_SMPR2_SMP0_Pos;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7b1b      	ldrb	r3, [r3, #12]
 8001116:	4619      	mov	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	3301      	adds	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 1 if enabled
    if(config->Channel_1.Enable == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b5b      	ldrb	r3, [r3, #13]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00c      	beq.n	8001148 <ADC_Sampling_Config+0x50>
    {
        config->Port->SMPR2 |= config->Channel_1.Sample_Time << ADC_SMPR2_SMP1_Pos;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6919      	ldr	r1, [r3, #16]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7bdb      	ldrb	r3, [r3, #15]
 8001138:	00da      	lsls	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3301      	adds	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 2 if enabled
    if(config->Channel_2.Enable == ENABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7c1b      	ldrb	r3, [r3, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <ADC_Sampling_Config+0x72>
    {
        config->Port->SMPR2 |= config->Channel_2.Sample_Time << ADC_SMPR2_SMP2_Pos;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6919      	ldr	r1, [r3, #16]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7c9b      	ldrb	r3, [r3, #18]
 800115a:	019a      	lsls	r2, r3, #6
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	3301      	adds	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 3 if enabled
    if(config->Channel_3.Enable == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7cdb      	ldrb	r3, [r3, #19]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00c      	beq.n	800118c <ADC_Sampling_Config+0x94>
    {
        config->Port->SMPR2 |= config->Channel_3.Sample_Time << ADC_SMPR2_SMP3_Pos;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6919      	ldr	r1, [r3, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7d5b      	ldrb	r3, [r3, #21]
 800117c:	025a      	lsls	r2, r3, #9
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	3301      	adds	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 4 if enabled
    if(config->Channel_4.Enable == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7d9b      	ldrb	r3, [r3, #22]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00c      	beq.n	80011ae <ADC_Sampling_Config+0xb6>
    {
        config->Port->SMPR2 |= config->Channel_4.Sample_Time << ADC_SMPR2_SMP4_Pos;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6919      	ldr	r1, [r3, #16]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7e1b      	ldrb	r3, [r3, #24]
 800119e:	031a      	lsls	r2, r3, #12
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	3301      	adds	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 5 if enabled
    if(config->Channel_5.Enable == ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7e5b      	ldrb	r3, [r3, #25]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00c      	beq.n	80011d0 <ADC_Sampling_Config+0xd8>
    {
        config->Port->SMPR2 |= config->Channel_5.Sample_Time << ADC_SMPR2_SMP5_Pos;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6919      	ldr	r1, [r3, #16]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7edb      	ldrb	r3, [r3, #27]
 80011c0:	03da      	lsls	r2, r3, #15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	3301      	adds	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 6 if enabled
    if(config->Channel_6.Enable == ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7f1b      	ldrb	r3, [r3, #28]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00c      	beq.n	80011f2 <ADC_Sampling_Config+0xfa>
    {
        config->Port->SMPR2 |= config->Channel_6.Sample_Time << ADC_SMPR2_SMP6_Pos;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6919      	ldr	r1, [r3, #16]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7f9b      	ldrb	r3, [r3, #30]
 80011e2:	049a      	lsls	r2, r3, #18
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	3301      	adds	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 7 if enabled
    if(config->Channel_7.Enable == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7fdb      	ldrb	r3, [r3, #31]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00d      	beq.n	8001216 <ADC_Sampling_Config+0x11e>
    {
        config->Port->SMPR2 |= config->Channel_7.Sample_Time << ADC_SMPR2_SMP7_Pos;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6919      	ldr	r1, [r3, #16]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001206:	055a      	lsls	r2, r3, #21
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3301      	adds	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 8 if enabled
    if(config->Channel_8.Enable == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00d      	beq.n	800123c <ADC_Sampling_Config+0x144>
    {
        config->Port->SMPR2 |= config->Channel_8.Sample_Time << ADC_SMPR2_SMP8_Pos;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6919      	ldr	r1, [r3, #16]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800122c:	061a      	lsls	r2, r3, #24
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	611a      	str	r2, [r3, #16]
        conversion_Counter += 1;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	3301      	adds	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 9 if enabled
    if(config->Channel_9.Enable == ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00d      	beq.n	8001262 <ADC_Sampling_Config+0x16a>
    {
        config->Port->SMPR1 |= config->Channel_9.Sample_Time << ADC_SMPR2_SMP9_Pos;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001252:	06da      	lsls	r2, r3, #27
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3301      	adds	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 10 if enabled
    if(config->Channel_10.Enable == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00d      	beq.n	8001288 <ADC_Sampling_Config+0x190>
    {
        config->Port->SMPR1 |= config->Channel_10.Sample_Time << ADC_SMPR1_SMP10_Pos;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001278:	4619      	mov	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	3301      	adds	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
    }

    // Configure sampling time for Channel 11 if enabled
    if(config->Channel_11.Enable == ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00d      	beq.n	80012ae <ADC_Sampling_Config+0x1b6>
    {
        config->Port->SMPR1 |= config->Channel_11.Sample_Time << ADC_SMPR1_SMP11_Pos;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68d9      	ldr	r1, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800129e:	00da      	lsls	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	3301      	adds	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 12 if enabled
    if(config->Channel_12.Enable == ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00d      	beq.n	80012d4 <ADC_Sampling_Config+0x1dc>
    {
        config->Port->SMPR1 |= config->Channel_12.Sample_Time << ADC_SMPR1_SMP12_Pos;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68d9      	ldr	r1, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012c4:	019a      	lsls	r2, r3, #6
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 13 if enabled
    if(config->Channel_13.Enable == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00d      	beq.n	80012fa <ADC_Sampling_Config+0x202>
    {
        config->Port->SMPR1 |= config->Channel_13.Sample_Time << ADC_SMPR1_SMP13_Pos;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68d9      	ldr	r1, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80012ea:	025a      	lsls	r2, r3, #9
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 14 if enabled
    if(config->Channel_14.Enable == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00d      	beq.n	8001320 <ADC_Sampling_Config+0x228>
    {
        config->Port->SMPR1 |= config->Channel_14.Sample_Time << ADC_SMPR1_SMP14_Pos;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68d9      	ldr	r1, [r3, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001310:	031a      	lsls	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	3301      	adds	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
    }

    /**************************************************************************************************************/

    // Configure sampling time for Channel 15 if enabled
    if(config->Channel_15.Enable == ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00d      	beq.n	8001346 <ADC_Sampling_Config+0x24e>
    {
        config->Port->SMPR1 |= config->Channel_15.Sample_Time << ADC_SMPR1_SMP15_Pos;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68d9      	ldr	r1, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001336:	03da      	lsls	r2, r3, #15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]
        conversion_Counter += 1;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
    }

    // Return the number of configured channels
    return conversion_Counter;
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <ADC_Pin_Init>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful initialization of all enabled channels.
 */
static int8_t ADC_Pin_Init(ADC_Config *config)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b087      	sub	sp, #28
 800135c:	af04      	add	r7, sp, #16
 800135e:	6078      	str	r0, [r7, #4]
    // Initialize GPIO pin for Channel 0 if enabled
    if (config->Channel_0.Enable == ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7a9b      	ldrb	r3, [r3, #10]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00d      	beq.n	8001384 <ADC_Pin_Init+0x2c>
    {
        GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog,
 8001368:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800136a:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 800136c:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800136e:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001370:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 0, GPIO_Configuration.Mode.Analog,
 8001372:	9102      	str	r1, [sp, #8]
 8001374:	9201      	str	r2, [sp, #4]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4623      	mov	r3, r4
 800137a:	4602      	mov	r2, r0
 800137c:	2100      	movs	r1, #0
 800137e:	488f      	ldr	r0, [pc, #572]	@ (80015bc <ADC_Pin_Init+0x264>)
 8001380:	f002 f944 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 1 if enabled
    if (config->Channel_1.Enable == ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7b5b      	ldrb	r3, [r3, #13]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00d      	beq.n	80013a8 <ADC_Pin_Init+0x50>
    {
        GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog,
 800138c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800138e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001390:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001392:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001394:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 1, GPIO_Configuration.Mode.Analog,
 8001396:	9102      	str	r1, [sp, #8]
 8001398:	9201      	str	r2, [sp, #4]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	4623      	mov	r3, r4
 800139e:	4602      	mov	r2, r0
 80013a0:	2101      	movs	r1, #1
 80013a2:	4886      	ldr	r0, [pc, #536]	@ (80015bc <ADC_Pin_Init+0x264>)
 80013a4:	f002 f932 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 2 if enabled
    if (config->Channel_2.Enable == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7c1b      	ldrb	r3, [r3, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00d      	beq.n	80013cc <ADC_Pin_Init+0x74>
    {
        GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog,
 80013b0:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80013b2:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80013b4:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80013b6:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80013b8:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 2, GPIO_Configuration.Mode.Analog,
 80013ba:	9102      	str	r1, [sp, #8]
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4623      	mov	r3, r4
 80013c2:	4602      	mov	r2, r0
 80013c4:	2102      	movs	r1, #2
 80013c6:	487d      	ldr	r0, [pc, #500]	@ (80015bc <ADC_Pin_Init+0x264>)
 80013c8:	f002 f920 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 3 if enabled
    if (config->Channel_3.Enable == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7cdb      	ldrb	r3, [r3, #19]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00d      	beq.n	80013f0 <ADC_Pin_Init+0x98>
    {
        GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog,
 80013d4:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80013d6:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80013d8:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80013da:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80013dc:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 3, GPIO_Configuration.Mode.Analog,
 80013de:	9102      	str	r1, [sp, #8]
 80013e0:	9201      	str	r2, [sp, #4]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4623      	mov	r3, r4
 80013e6:	4602      	mov	r2, r0
 80013e8:	2103      	movs	r1, #3
 80013ea:	4874      	ldr	r0, [pc, #464]	@ (80015bc <ADC_Pin_Init+0x264>)
 80013ec:	f002 f90e 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 4 if enabled
    if (config->Channel_4.Enable == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7d9b      	ldrb	r3, [r3, #22]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00d      	beq.n	8001414 <ADC_Pin_Init+0xbc>
    {
        GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog,
 80013f8:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80013fa:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80013fc:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80013fe:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001400:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 4, GPIO_Configuration.Mode.Analog,
 8001402:	9102      	str	r1, [sp, #8]
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	4602      	mov	r2, r0
 800140c:	2104      	movs	r1, #4
 800140e:	486b      	ldr	r0, [pc, #428]	@ (80015bc <ADC_Pin_Init+0x264>)
 8001410:	f002 f8fc 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 5 if enabled
    if (config->Channel_5.Enable == ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e5b      	ldrb	r3, [r3, #25]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <ADC_Pin_Init+0xe0>
    {
        GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog,
 800141c:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800141e:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001420:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001422:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001424:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Analog,
 8001426:	9102      	str	r1, [sp, #8]
 8001428:	9201      	str	r2, [sp, #4]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4623      	mov	r3, r4
 800142e:	4602      	mov	r2, r0
 8001430:	2105      	movs	r1, #5
 8001432:	4862      	ldr	r0, [pc, #392]	@ (80015bc <ADC_Pin_Init+0x264>)
 8001434:	f002 f8ea 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 6 if enabled
    if (config->Channel_6.Enable == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00d      	beq.n	800145c <ADC_Pin_Init+0x104>
    {
        GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog,
 8001440:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001442:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001444:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001446:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001448:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Analog,
 800144a:	9102      	str	r1, [sp, #8]
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4623      	mov	r3, r4
 8001452:	4602      	mov	r2, r0
 8001454:	2106      	movs	r1, #6
 8001456:	4859      	ldr	r0, [pc, #356]	@ (80015bc <ADC_Pin_Init+0x264>)
 8001458:	f002 f8d8 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 7 if enabled
    if (config->Channel_7.Enable == ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7fdb      	ldrb	r3, [r3, #31]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00d      	beq.n	8001480 <ADC_Pin_Init+0x128>
    {
        GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog,
 8001464:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001466:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001468:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800146a:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 800146c:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Analog,
 800146e:	9102      	str	r1, [sp, #8]
 8001470:	9201      	str	r2, [sp, #4]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	4623      	mov	r3, r4
 8001476:	4602      	mov	r2, r0
 8001478:	2107      	movs	r1, #7
 800147a:	4850      	ldr	r0, [pc, #320]	@ (80015bc <ADC_Pin_Init+0x264>)
 800147c:	f002 f8c6 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 8 if enabled
    if (config->Channel_8.Enable == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00d      	beq.n	80014a6 <ADC_Pin_Init+0x14e>
    {
        GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog,
 800148a:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800148c:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 800148e:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001490:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001492:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOB, 0, GPIO_Configuration.Mode.Analog,
 8001494:	9102      	str	r1, [sp, #8]
 8001496:	9201      	str	r2, [sp, #4]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4623      	mov	r3, r4
 800149c:	4602      	mov	r2, r0
 800149e:	2100      	movs	r1, #0
 80014a0:	4847      	ldr	r0, [pc, #284]	@ (80015c0 <ADC_Pin_Init+0x268>)
 80014a2:	f002 f8b3 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 9 if enabled
    if (config->Channel_9.Enable == ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00d      	beq.n	80014cc <ADC_Pin_Init+0x174>
    {
        GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog,
 80014b0:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80014b2:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80014b4:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80014b6:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80014b8:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOB, 1, GPIO_Configuration.Mode.Analog,
 80014ba:	9102      	str	r1, [sp, #8]
 80014bc:	9201      	str	r2, [sp, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	4623      	mov	r3, r4
 80014c2:	4602      	mov	r2, r0
 80014c4:	2101      	movs	r1, #1
 80014c6:	483e      	ldr	r0, [pc, #248]	@ (80015c0 <ADC_Pin_Init+0x268>)
 80014c8:	f002 f8a0 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 10 if enabled
    if (config->Channel_10.Enable == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00d      	beq.n	80014f2 <ADC_Pin_Init+0x19a>
    {
        GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog,
 80014d6:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80014d8:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 80014da:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 80014dc:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 80014de:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 0, GPIO_Configuration.Mode.Analog,
 80014e0:	9102      	str	r1, [sp, #8]
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4623      	mov	r3, r4
 80014e8:	4602      	mov	r2, r0
 80014ea:	2100      	movs	r1, #0
 80014ec:	4835      	ldr	r0, [pc, #212]	@ (80015c4 <ADC_Pin_Init+0x26c>)
 80014ee:	f002 f88d 	bl	800360c <GPIO_Pin_Init>
    }

    // Initialize GPIO pin for Channel 11 if enabled
    if (config->Channel_11.Enable == ENABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00d      	beq.n	8001518 <ADC_Pin_Init+0x1c0>
    {
        GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog,
 80014fc:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 80014fe:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001500:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001502:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001504:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 1, GPIO_Configuration.Mode.Analog,
 8001506:	9102      	str	r1, [sp, #8]
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	4623      	mov	r3, r4
 800150e:	4602      	mov	r2, r0
 8001510:	2101      	movs	r1, #1
 8001512:	482c      	ldr	r0, [pc, #176]	@ (80015c4 <ADC_Pin_Init+0x26c>)
 8001514:	f002 f87a 	bl	800360c <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 12 if enabled
    if (config->Channel_12.Enable == ENABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00d      	beq.n	800153e <ADC_Pin_Init+0x1e6>
    {
        GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog,
 8001522:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001524:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001526:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001528:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 800152a:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Analog,
 800152c:	9102      	str	r1, [sp, #8]
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4623      	mov	r3, r4
 8001534:	4602      	mov	r2, r0
 8001536:	2102      	movs	r1, #2
 8001538:	4822      	ldr	r0, [pc, #136]	@ (80015c4 <ADC_Pin_Init+0x26c>)
 800153a:	f002 f867 	bl	800360c <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 13 if enabled
    if (config->Channel_13.Enable == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00d      	beq.n	8001564 <ADC_Pin_Init+0x20c>
    {
        GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog,
 8001548:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 800154a:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 800154c:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800154e:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001550:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Analog,
 8001552:	9102      	str	r1, [sp, #8]
 8001554:	9201      	str	r2, [sp, #4]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4623      	mov	r3, r4
 800155a:	4602      	mov	r2, r0
 800155c:	2103      	movs	r1, #3
 800155e:	4819      	ldr	r0, [pc, #100]	@ (80015c4 <ADC_Pin_Init+0x26c>)
 8001560:	f002 f854 	bl	800360c <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 14 if enabled
    if (config->Channel_14.Enable == ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00d      	beq.n	800158a <ADC_Pin_Init+0x232>
    {
        GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog,
 800156e:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001570:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001572:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 8001574:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 8001576:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 4, GPIO_Configuration.Mode.Analog,
 8001578:	9102      	str	r1, [sp, #8]
 800157a:	9201      	str	r2, [sp, #4]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4623      	mov	r3, r4
 8001580:	4602      	mov	r2, r0
 8001582:	2104      	movs	r1, #4
 8001584:	480f      	ldr	r0, [pc, #60]	@ (80015c4 <ADC_Pin_Init+0x26c>)
 8001586:	f002 f841 	bl	800360c <GPIO_Pin_Init>
    }

    /**************************************************************************************************************/

    // Initialize GPIO pin for Channel 15 if enabled
    if (config->Channel_15.Enable == ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00d      	beq.n	80015b0 <ADC_Pin_Init+0x258>
    {
        GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog,
 8001594:	2003      	movs	r0, #3
                      GPIO_Configuration.Output_Type.None,
 8001596:	2402      	movs	r4, #2
                      GPIO_Configuration.Speed.None,
 8001598:	2304      	movs	r3, #4
                      GPIO_Configuration.Pull.None,
 800159a:	2204      	movs	r2, #4
                      GPIO_Configuration.Alternate_Functions.Analog);
 800159c:	2100      	movs	r1, #0
        GPIO_Pin_Init(GPIOC, 5, GPIO_Configuration.Mode.Analog,
 800159e:	9102      	str	r1, [sp, #8]
 80015a0:	9201      	str	r2, [sp, #4]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4623      	mov	r3, r4
 80015a6:	4602      	mov	r2, r0
 80015a8:	2105      	movs	r1, #5
 80015aa:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <ADC_Pin_Init+0x26c>)
 80015ac:	f002 f82e 	bl	800360c <GPIO_Pin_Init>
    }

    // Return success
    return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800

080015c8 <ADC_Sequence_Config>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful configuration of the sequence.
 */
static int8_t ADC_Sequence_Config(ADC_Config *config)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    // Configure sequence for Channel 0
    if(config->Channel_0.Enable == ENABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7a9b      	ldrb	r3, [r3, #10]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <ADC_Sequence_Config+0x24>
    {
        config->Port->SQR3 |= config->Channel_0.Sequence_Number << ADC_SQR3_SQ1_Pos;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7adb      	ldrb	r3, [r3, #11]
 80015e2:	4619      	mov	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 1
    if(config->Channel_1.Enable == ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7b5b      	ldrb	r3, [r3, #13]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <ADC_Sequence_Config+0x40>
    {
        config->Port->SQR3 |= config->Channel_1.Sequence_Number << ADC_SQR3_SQ2_Pos;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7b9b      	ldrb	r3, [r3, #14]
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 2
    if(config->Channel_2.Enable == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7c1b      	ldrb	r3, [r3, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d009      	beq.n	8001624 <ADC_Sequence_Config+0x5c>
    {
        config->Port->SQR3 |= config->Channel_2.Sequence_Number << ADC_SQR3_SQ3_Pos;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7c5b      	ldrb	r3, [r3, #17]
 800161a:	029a      	lsls	r2, r3, #10
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 3
    if(config->Channel_3.Enable == ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7cdb      	ldrb	r3, [r3, #19]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <ADC_Sequence_Config+0x78>
    {
        config->Port->SQR3 |= config->Channel_3.Sequence_Number << ADC_SQR3_SQ4_Pos;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7d1b      	ldrb	r3, [r3, #20]
 8001636:	03da      	lsls	r2, r3, #15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 4
    if(config->Channel_4.Enable == ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7d9b      	ldrb	r3, [r3, #22]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <ADC_Sequence_Config+0x94>
    {
        config->Port->SQR3 |= config->Channel_4.Sequence_Number << ADC_SQR3_SQ5_Pos;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7ddb      	ldrb	r3, [r3, #23]
 8001652:	051a      	lsls	r2, r3, #20
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 5
    if(config->Channel_5.Enable == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e5b      	ldrb	r3, [r3, #25]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d009      	beq.n	8001678 <ADC_Sequence_Config+0xb0>
    {
        config->Port->SQR3 |= config->Channel_5.Sequence_Number << ADC_SQR3_SQ6_Pos;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7e9b      	ldrb	r3, [r3, #26]
 800166e:	065a      	lsls	r2, r3, #25
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Configure sequence for Channel 6
    if(config->Channel_6.Enable == ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7f1b      	ldrb	r3, [r3, #28]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <ADC_Sequence_Config+0xcc>
    {
        config->Port->SQR2 |= config->Channel_6.Sequence_Number << ADC_SQR2_SQ7_Pos;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7f5b      	ldrb	r3, [r3, #29]
 800168a:	4619      	mov	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 7
    if(config->Channel_7.Enable == ENABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7fdb      	ldrb	r3, [r3, #31]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00a      	beq.n	80016b2 <ADC_Sequence_Config+0xea>
    {
        config->Port->SQR2 |= config->Channel_7.Sequence_Number << ADC_SQR2_SQ8_Pos;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 8
    if(config->Channel_8.Enable == ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <ADC_Sequence_Config+0x10a>
    {
        config->Port->SQR2 |= config->Channel_8.Sequence_Number << ADC_SQR2_SQ9_Pos;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80016c8:	029a      	lsls	r2, r3, #10
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 9
    if(config->Channel_9.Enable == ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00a      	beq.n	80016f2 <ADC_Sequence_Config+0x12a>
    {
        config->Port->SQR2 |= config->Channel_9.Sequence_Number << ADC_SQR2_SQ10_Pos;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80016e8:	03da      	lsls	r2, r3, #15
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 10
    if(config->Channel_10.Enable == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00a      	beq.n	8001712 <ADC_Sequence_Config+0x14a>
    {
        config->Port->SQR2 |= config->Channel_10.Sequence_Number << ADC_SQR2_SQ11_Pos;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001708:	051a      	lsls	r2, r3, #20
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    // Configure sequence for Channel 11
    if(config->Channel_11.Enable == ENABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <ADC_Sequence_Config+0x16a>
    {
        config->Port->SQR2 |= config->Channel_11.Sequence_Number << ADC_SQR2_SQ12_Pos;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001728:	065a      	lsls	r2, r3, #25
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 12
    if(config->Channel_12.Enable == ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00a      	beq.n	8001752 <ADC_Sequence_Config+0x18a>
    {
        config->Port->SQR1 |= config->Channel_12.Sequence_Number << ADC_SQR1_SQ13_Pos;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001748:	4619      	mov	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 13
    if(config->Channel_13.Enable == ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00a      	beq.n	8001772 <ADC_Sequence_Config+0x1aa>
    {
        config->Port->SQR1 |= config->Channel_13.Sequence_Number << ADC_SQR1_SQ14_Pos;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 14
    if(config->Channel_14.Enable == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <ADC_Sequence_Config+0x1ca>
    {
        config->Port->SQR1 |= config->Channel_14.Sequence_Number << ADC_SQR1_SQ15_Pos;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001788:	029a      	lsls	r2, r3, #10
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /**************************************************************************************************************/

    // Configure sequence for Channel 15
    if(config->Channel_15.Enable == ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00a      	beq.n	80017b2 <ADC_Sequence_Config+0x1ea>
    {
        config->Port->SQR1 |= config->Channel_15.Sequence_Number << ADC_SQR1_SQ16_Pos;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017a8:	03da      	lsls	r2, r3, #15
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    // Return success
    return 1;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <ADC_Init>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t ADC_Init(ADC_Config *config)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    // Enable the clock for the selected ADC port
    if (config->Port == ADC_Configuration.Port._ADC1_)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a8a      	ldr	r2, [pc, #552]	@ (80019f8 <ADC_Init+0x238>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d106      	bne.n	80017e0 <ADC_Init+0x20>
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80017d2:	4b8a      	ldr	r3, [pc, #552]	@ (80019fc <ADC_Init+0x23c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a89      	ldr	r2, [pc, #548]	@ (80019fc <ADC_Init+0x23c>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	e01a      	b.n	8001816 <ADC_Init+0x56>
    else if (config->Port == ADC_Configuration.Port._ADC2_)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a86      	ldr	r2, [pc, #536]	@ (8001a00 <ADC_Init+0x240>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d106      	bne.n	80017f8 <ADC_Init+0x38>
        RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 80017ea:	4b84      	ldr	r3, [pc, #528]	@ (80019fc <ADC_Init+0x23c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a83      	ldr	r2, [pc, #524]	@ (80019fc <ADC_Init+0x23c>)
 80017f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	e00e      	b.n	8001816 <ADC_Init+0x56>
    else if (config->Port == ADC_Configuration.Port._ADC3_)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a81      	ldr	r2, [pc, #516]	@ (8001a04 <ADC_Init+0x244>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d106      	bne.n	8001810 <ADC_Init+0x50>
        RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 8001802:	4b7e      	ldr	r3, [pc, #504]	@ (80019fc <ADC_Init+0x23c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a7d      	ldr	r2, [pc, #500]	@ (80019fc <ADC_Init+0x23c>)
 8001808:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	e002      	b.n	8001816 <ADC_Init+0x56>
    else
        return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	e13d      	b.n	8001a92 <ADC_Init+0x2d2>

    // Configure the ADC scan mode
    config->Port->CR1 |= ADC_CR1_SCAN;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001824:	605a      	str	r2, [r3, #4]

    // Set the ADC resolution
    if (config->Resolution == ADC_Configuration.Resolution.Bit_12)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800182c:	2200      	movs	r2, #0
 800182e:	4293      	cmp	r3, r2
 8001830:	d108      	bne.n	8001844 <ADC_Init+0x84>
        config->Port->CR1 &= ~ADC_CR1_RES;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	e02f      	b.n	80018a4 <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_10)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800184a:	2200      	movs	r2, #0
 800184c:	4293      	cmp	r3, r2
 800184e:	d108      	bne.n	8001862 <ADC_Init+0xa2>
        config->Port->CR1 |=  1 << ADC_CR1_RES_Pos;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	e020      	b.n	80018a4 <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_8)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001868:	2200      	movs	r2, #0
 800186a:	4293      	cmp	r3, r2
 800186c:	d108      	bne.n	8001880 <ADC_Init+0xc0>
        config->Port->CR1 |=  2 << ADC_CR1_RES_Pos;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e011      	b.n	80018a4 <ADC_Init+0xe4>
    else if (config->Resolution == ADC_Configuration.Resolution.Bit_6)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001886:	2200      	movs	r2, #0
 8001888:	4293      	cmp	r3, r2
 800188a:	d108      	bne.n	800189e <ADC_Init+0xde>
        config->Port->CR1 |=  3 << ADC_CR1_RES_Pos;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	e002      	b.n	80018a4 <ADC_Init+0xe4>
    else
        return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e0f6      	b.n	8001a92 <ADC_Init+0x2d2>

    // Configure the conversion mode
    if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Single) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	795b      	ldrb	r3, [r3, #5]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d108      	bne.n	80018c0 <ADC_Init+0x100>
        config->Port->CR2 &= ~ADC_CR2_CONT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0202 	bic.w	r2, r2, #2
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e010      	b.n	80018e2 <ADC_Init+0x122>
    } else if (config->Conversion_Mode == ADC_Configuration.Conversion_Mode.Continuous) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	795b      	ldrb	r3, [r3, #5]
 80018c4:	2202      	movs	r2, #2
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d108      	bne.n	80018dc <ADC_Init+0x11c>
        config->Port->CR2 |= ADC_CR2_CONT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0202 	orr.w	r2, r2, #2
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	e002      	b.n	80018e2 <ADC_Init+0x122>
    } else {
        return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e0d7      	b.n	8001a92 <ADC_Init+0x2d2>
    }

    // Enable end-of-conversion selection
    config->Port->CR2 |= ADC_CR2_EOCS;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018f0:	609a      	str	r2, [r3, #8]

    // Set the data alignment
    if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Right_Justified) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	791b      	ldrb	r3, [r3, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d108      	bne.n	800190e <ADC_Init+0x14e>
        config->Port->CR2 &= ~ADC_CR2_ALIGN;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	e010      	b.n	8001930 <ADC_Init+0x170>
    } else if (config->Data_Alignment == ADC_Configuration.Data_Alignment.Left_Justified) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	4293      	cmp	r3, r2
 8001916:	d108      	bne.n	800192a <ADC_Init+0x16a>
        config->Port->CR2 |= ADC_CR2_ALIGN;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	e002      	b.n	8001930 <ADC_Init+0x170>
    } else {
        return -1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e0b0      	b.n	8001a92 <ADC_Init+0x2d2>
    }

    // Configure sampling settings and initialize ADC pins
    pin_temp = ADC_Sampling_Config(config);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fbe1 	bl	80010f8 <ADC_Sampling_Config>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <ADC_Init+0x248>)
 800193c:	701a      	strb	r2, [r3, #0]
    config->Port->SQR1 |= (pin_temp - 1) << ADC_SQR1_L_Pos;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001944:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <ADC_Init+0x248>)
 8001946:	f993 3000 	ldrsb.w	r3, [r3]
 800194a:	3b01      	subs	r3, #1
 800194c:	051b      	lsls	r3, r3, #20
 800194e:	4619      	mov	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC_Pin_Init(config);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fcfd 	bl	8001358 <ADC_Pin_Init>

    // Configure external trigger for regular or injected channels
    if (config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	799b      	ldrb	r3, [r3, #6]
 8001962:	2200      	movs	r2, #0
 8001964:	4293      	cmp	r3, r2
 8001966:	d11f      	bne.n	80019a8 <ADC_Init+0x1e8>
        config->Port->CR2 &= ~ADC_CR2_EXTSEL;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001976:	609a      	str	r2, [r3, #8]

        if (config->External_Trigger.Enable == ENABLE) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	79db      	ldrb	r3, [r3, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d045      	beq.n	8001a0c <ADC_Init+0x24c>
            // config->Port->CR2 |= config->External_Trigger.Trigger_Event << ADC_CR2_EXTSEL_Pos;
            config->Port->CR2 |= ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 62c0 	orr.w	r2, r2, #100663296	@ 0x6000000
 800198e:	609a      	str	r2, [r3, #8]
            config->Port->CR2 |= ADC_CR2_EXTEN_0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800199e:	609a      	str	r2, [r3, #8]
            ADC_Timer_External_Trigger_Init(config);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f993 	bl	8000ccc <ADC_Timer_External_Trigger_Init>
 80019a6:	e031      	b.n	8001a0c <ADC_Init+0x24c>
        }
    } else if (config->Channel_Type == ADC_Configuration.Channel_Type.Injected) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	799b      	ldrb	r3, [r3, #6]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11f      	bne.n	80019f2 <ADC_Init+0x232>
        config->Port->CR2 &= ~ADC_CR2_JEXTSEL;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80019c0:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= config->External_Trigger.Enable << ADC_CR2_JEXTEN_Pos;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6899      	ldr	r1, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	79db      	ldrb	r3, [r3, #7]
 80019cc:	051a      	lsls	r2, r3, #20
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= config->External_Trigger.Trigger_Event << ADC_CR2_JEXTSEL_Pos;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7a1b      	ldrb	r3, [r3, #8]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
        ADC_Timer_External_Trigger_Init(config);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff f96e 	bl	8000ccc <ADC_Timer_External_Trigger_Init>
 80019f0:	e00c      	b.n	8001a0c <ADC_Init+0x24c>
    } else {
        return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e04c      	b.n	8001a92 <ADC_Init+0x2d2>
 80019f8:	40012000 	.word	0x40012000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40012100 	.word	0x40012100
 8001a04:	40012200 	.word	0x40012200
 8001a08:	200000a8 	.word	0x200000a8
    }

    // Enable DMA and set DDS for continuous requests
    config->Port->CR2 |= ADC_CR2_DMA;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a1a:	609a      	str	r2, [r3, #8]
    config->Port->CR2 |= ADC_CR2_DDS;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2a:	609a      	str	r2, [r3, #8]

    // Configure ADC sequence
    ADC_Sequence_Config(config);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fdcb 	bl	80015c8 <ADC_Sequence_Config>

    // Enable the ADC
    ADC_Enable(config);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f836 	bl	8001aa4 <ADC_Enable>

    // Initialize the DMA with the provided settings
    xADC.Request = DMA_Configuration.Request._ADC1;
 8001a38:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <ADC_Init+0x2e0>)
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8001a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    xADC.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a4e:	611a      	str	r2, [r3, #16]
    xADC.circular_mode = DMA_Configuration.Circular_Mode.Enable;
 8001a50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a56:	619a      	str	r2, [r3, #24]
    xADC.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a5c:	60da      	str	r2, [r3, #12]
    xADC.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 8001a5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28
    xADC.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8001a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    xADC.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8001a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a76:	841a      	strh	r2, [r3, #32]
    xADC.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete | DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete;
 8001a78:	2210      	movs	r2, #16
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a80:	61d3      	str	r3, [r2, #28]
    xADC.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8001a82:	2300      	movs	r3, #0
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a88:	845a      	strh	r2, [r3, #34]	@ 0x22
    DMA_Init(&xADC);
 8001a8a:	4804      	ldr	r0, [pc, #16]	@ (8001a9c <ADC_Init+0x2dc>)
 8001a8c:	f001 fad0 	bl	8003030 <DMA_Init>

    // Return success
    return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000070 	.word	0x20000070
 8001aa0:	08005b3c 	.word	0x08005b3c

08001aa4 <ADC_Enable>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful enabling of the ADC.
 */
int8_t ADC_Enable(ADC_Config *config)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    // Enable the ADC by setting the ADON bit
    config->Port->CR2 |= ADC_CR2_ADON;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	609a      	str	r2, [r3, #8]

    // Introduce a delay for ADC stabilization
    Delay_milli(1000);
 8001abc:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001ad0 <ADC_Enable+0x2c>
 8001ac0:	f7ff f8e0 	bl	8000c84 <Delay_milli>

    // Return success
    return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	447a0000 	.word	0x447a0000

08001ad4 <ADC_Start>:
 * @param[in] config Pointer to the ADC configuration structure.
 *
 * @return int8_t Returns 1 on successful start of the ADC conversion, or -1 if the channel type is invalid.
 */
int8_t ADC_Start(ADC_Config *config)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    // Clear the ADC status register
    config->Port->SR = 0;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

    // Start the conversion based on the channel type
    if (config->Channel_Type == ADC_Configuration.Channel_Type.Regular) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	799b      	ldrb	r3, [r3, #6]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d108      	bne.n	8001b00 <ADC_Start+0x2c>
        config->Port->CR2 |= ADC_CR2_SWSTART;  // Start regular conversion
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	e010      	b.n	8001b22 <ADC_Start+0x4e>
    }
    else if (config->Channel_Type == ADC_Configuration.Channel_Type.Injected) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	799b      	ldrb	r3, [r3, #6]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d108      	bne.n	8001b1c <ADC_Start+0x48>
        config->Port->CR2 |= ADC_CR2_JSWSTART; // Start injected conversion
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	e002      	b.n	8001b22 <ADC_Start+0x4e>
    }
    else {
        return -1; // Return error if channel type is invalid
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b20:	e000      	b.n	8001b24 <ADC_Start+0x50>
    }

    // Return success
    return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <ADC_Start_Capture>:
 * @param[out] buffer Pointer to the buffer where ADC data will be stored.
 *
 * @return int8_t Returns 1 on successful start of ADC capture.
 */
int8_t ADC_Start_Capture(ADC_Config *config, uint16_t *buffer)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
    // Check for overrun and reset ADC if necessary
    if ((config->Port->SR) & (ADC_SR_OVR))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00f      	beq.n	8001b68 <ADC_Start_Capture+0x38>
    {
        config->Port->CR2 &= ~ADC_CR2_ADON; // Turn off the ADC
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	609a      	str	r2, [r3, #8]
        config->Port->CR2 |= ADC_CR2_ADON;  // Turn on the ADC
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	609a      	str	r2, [r3, #8]
    }

    // Configure DMA settings for the ADC capture
    xADC.buffer_length = pin_temp;
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <ADC_Start_Capture+0x7c>)
 8001b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <ADC_Start_Capture+0x80>)
 8001b72:	869a      	strh	r2, [r3, #52]	@ 0x34
    xADC.peripheral_address = (uint32_t)&(config->Port->DR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	334c      	adds	r3, #76	@ 0x4c
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <ADC_Start_Capture+0x80>)
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    xADC.memory_address = (uint32_t)buffer;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb0 <ADC_Start_Capture+0x80>)
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30

    // Initialize DMA with the target settings
    DMA_Set_Target(&xADC);
 8001b86:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <ADC_Start_Capture+0x80>)
 8001b88:	f001 fbf0 	bl	800336c <DMA_Set_Target>
    DMA_Set_Trigger(&xADC);
 8001b8c:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <ADC_Start_Capture+0x80>)
 8001b8e:	f001 fc2b 	bl	80033e8 <DMA_Set_Trigger>

    // Clear the ADC status register
    config->Port->SR = 0;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

    // Start the ADC conversion
    ADC_Start(config);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff9a 	bl	8001ad4 <ADC_Start>

    // Return success
    return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000a8 	.word	0x200000a8
 8001bb0:	20000070 	.word	0x20000070

08001bb4 <Console_Init>:

USART_Config serial;


 void Console_Init(int32_t baudrate)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	 USART_Config_Reset(&serial);
 8001bbc:	480f      	ldr	r0, [pc, #60]	@ (8001bfc <Console_Init+0x48>)
 8001bbe:	f001 fded 	bl	800379c <USART_Config_Reset>
	 serial.Port = USART1;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <Console_Init+0x48>)
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c00 <Console_Init+0x4c>)
 8001bc6:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <Console_Init+0x48>)
 8001bcc:	6053      	str	r3, [r2, #4]
	 serial.mode = USART_Configuration.Mode.Asynchronous;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <Console_Init+0x48>)
 8001bd2:	721a      	strb	r2, [r3, #8]
	 serial.stop_bits = USART_Configuration.Stop_Bits.Bit_1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <Console_Init+0x48>)
 8001bda:	741a      	strb	r2, [r3, #16]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8001bdc:	2206      	movs	r2, #6
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <Console_Init+0x48>)
 8001be0:	725a      	strb	r2, [r3, #9]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8001be2:	2207      	movs	r2, #7
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <Console_Init+0x48>)
 8001be6:	729a      	strb	r2, [r3, #10]
	 serial.dma_enable = USART_Configuration.DMA_Enable.TX_Enable;
 8001be8:	2201      	movs	r2, #1
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <Console_Init+0x48>)
 8001bec:	745a      	strb	r2, [r3, #17]
	 USART_Init(&serial);
 8001bee:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <Console_Init+0x48>)
 8001bf0:	f002 faae 	bl	8004150 <USART_Init>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200000ac 	.word	0x200000ac
 8001c00:	40011000 	.word	0x40011000

08001c04 <printConsole>:

 void printConsole(char *msg, ...)
{
 8001c04:	b40f      	push	{r0, r1, r2, r3}
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b09c      	sub	sp, #112	@ 0x70
 8001c0a:	af00      	add	r7, sp, #0
	char buff[100];
//	DMA_Memory_To_Memory_Transfer(&x, 8, 8, &buff, 0, 1, 100);


	va_list args;
	va_start(args, msg);
 8001c0c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001c10:	607b      	str	r3, [r7, #4]
	vsprintf(buff, msg, args);
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fa7c 	bl	8005118 <vsiprintf>

	uint16_t len = strlen(buff);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fad3 	bl	80001d0 <strlen>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e


	USART_TX_Buffer(&serial, &buff, len);
 8001c30:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <printConsole+0x4c>)
 8001c3c:	f002 fd40 	bl	80046c0 <USART_TX_Buffer>
//	for(int i = 0; i<= strlen(buff)-1; i++)
//	{
//		serial.Port -> DR = buff[i];
//		while (!(serial.Port -> SR & USART_SR_TXE));
//	}
}
 8001c40:	bf00      	nop
 8001c42:	3770      	adds	r7, #112	@ 0x70
 8001c44:	46bd      	mov	sp, r7
 8001c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c4a:	b004      	add	sp, #16
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200000ac 	.word	0x200000ac

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	@ (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <DMA1_Stream0_IRQHandler>:
 * status flags for FIFO error, direct mode error, transfer error, half
 * transfer complete, and transfer complete, and clears the respective
 * interrupt flag after handling it.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8001c94:	4b54      	ldr	r3, [pc, #336]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01a      	beq.n	8001cd6 <DMA1_Stream0_IRQHandler+0x46>
	{
		TIM5_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001ca0:	4b52      	ldr	r3, [pc, #328]	@ (8001dec <DMA1_Stream0_IRQHandler+0x15c>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	711a      	strb	r2, [r3, #4]
		TIM4_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8001ca6:	4b52      	ldr	r3, [pc, #328]	@ (8001df0 <DMA1_Stream0_IRQHandler+0x160>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001cac:	4b51      	ldr	r3, [pc, #324]	@ (8001df4 <DMA1_Stream0_IRQHandler+0x164>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	711a      	strb	r2, [r3, #4]
		USART5_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001cb2:	4b51      	ldr	r3, [pc, #324]	@ (8001df8 <DMA1_Stream0_IRQHandler+0x168>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	711a      	strb	r2, [r3, #4]
		I2C1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001cb8:	4b50      	ldr	r3, [pc, #320]	@ (8001dfc <DMA1_Stream0_IRQHandler+0x16c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	711a      	strb	r2, [r3, #4]
		SPI3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001cbe:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <DMA1_Stream0_IRQHandler+0x170>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	711a      	strb	r2, [r3, #4]
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e04 <DMA1_Stream0_IRQHandler+0x174>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4a46      	ldr	r2, [pc, #280]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8001cd6:	4b44      	ldr	r3, [pc, #272]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01a      	beq.n	8001d18 <DMA1_Stream0_IRQHandler+0x88>
	{
		TIM5_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001ce2:	4b42      	ldr	r3, [pc, #264]	@ (8001dec <DMA1_Stream0_IRQHandler+0x15c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	70da      	strb	r2, [r3, #3]
		TIM4_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001ce8:	4b41      	ldr	r3, [pc, #260]	@ (8001df0 <DMA1_Stream0_IRQHandler+0x160>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cee:	4b41      	ldr	r3, [pc, #260]	@ (8001df4 <DMA1_Stream0_IRQHandler+0x164>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	70da      	strb	r2, [r3, #3]
		USART5_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cf4:	4b40      	ldr	r3, [pc, #256]	@ (8001df8 <DMA1_Stream0_IRQHandler+0x168>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	70da      	strb	r2, [r3, #3]
		I2C1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001cfa:	4b40      	ldr	r3, [pc, #256]	@ (8001dfc <DMA1_Stream0_IRQHandler+0x16c>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	70da      	strb	r2, [r3, #3]
		SPI3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001d00:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <DMA1_Stream0_IRQHandler+0x170>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	70da      	strb	r2, [r3, #3]
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8001d06:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <DMA1_Stream0_IRQHandler+0x174>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001d0c:	4b36      	ldr	r3, [pc, #216]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a35      	ldr	r2, [pc, #212]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8001d18:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <DMA1_Stream0_IRQHandler+0xca>
	{
		TIM5_CH3_DMA_Flag.Transfer_Error_Flag= true;
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <DMA1_Stream0_IRQHandler+0x15c>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	709a      	strb	r2, [r3, #2]
		TIM4_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8001d2a:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <DMA1_Stream0_IRQHandler+0x160>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001d30:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <DMA1_Stream0_IRQHandler+0x164>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	709a      	strb	r2, [r3, #2]
		USART5_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001d36:	4b30      	ldr	r3, [pc, #192]	@ (8001df8 <DMA1_Stream0_IRQHandler+0x168>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	709a      	strb	r2, [r3, #2]
		I2C1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dfc <DMA1_Stream0_IRQHandler+0x16c>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	709a      	strb	r2, [r3, #2]
		SPI3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001d42:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <DMA1_Stream0_IRQHandler+0x170>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	709a      	strb	r2, [r3, #2]
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <DMA1_Stream0_IRQHandler+0x174>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001d4e:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4a25      	ldr	r2, [pc, #148]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8001d5a:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01a      	beq.n	8001d9c <DMA1_Stream0_IRQHandler+0x10c>
	{
		TIM5_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <DMA1_Stream0_IRQHandler+0x15c>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	705a      	strb	r2, [r3, #1]
		TIM4_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d6c:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <DMA1_Stream0_IRQHandler+0x160>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <DMA1_Stream0_IRQHandler+0x164>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	705a      	strb	r2, [r3, #1]
		USART5_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <DMA1_Stream0_IRQHandler+0x168>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	705a      	strb	r2, [r3, #1]
		I2C1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <DMA1_Stream0_IRQHandler+0x16c>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	705a      	strb	r2, [r3, #1]
		SPI3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <DMA1_Stream0_IRQHandler+0x170>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	705a      	strb	r2, [r3, #1]
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <DMA1_Stream0_IRQHandler+0x174>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a14      	ldr	r2, [pc, #80]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01a      	beq.n	8001dde <DMA1_Stream0_IRQHandler+0x14e>
	{
		TIM5_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001da8:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <DMA1_Stream0_IRQHandler+0x15c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
		TIM4_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <DMA1_Stream0_IRQHandler+0x160>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <DMA1_Stream0_IRQHandler+0x164>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
		USART5_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <DMA1_Stream0_IRQHandler+0x168>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
		I2C1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <DMA1_Stream0_IRQHandler+0x16c>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
		SPI3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <DMA1_Stream0_IRQHandler+0x170>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <DMA1_Stream0_IRQHandler+0x174>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001dd2:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <DMA1_Stream0_IRQHandler+0x158>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	6093      	str	r3, [r2, #8]
	}
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40026000 	.word	0x40026000
 8001dec:	20000268 	.word	0x20000268
 8001df0:	20000248 	.word	0x20000248
 8001df4:	20000188 	.word	0x20000188
 8001df8:	20000160 	.word	0x20000160
 8001dfc:	200000d8 	.word	0x200000d8
 8001e00:	20000108 	.word	0x20000108
 8001e04:	200002b0 	.word	0x200002b0

08001e08 <DMA1_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 8001e0c:	4b45      	ldr	r3, [pc, #276]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <DMA1_Stream1_IRQHandler+0x3a>
	{
		TIM2_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8001e18:	4b43      	ldr	r3, [pc, #268]	@ (8001f28 <DMA1_Stream1_IRQHandler+0x120>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	711a      	strb	r2, [r3, #4]
		TIM6_UP_DMA_Flag.Fifo_Error_Flag = true;
 8001e1e:	4b43      	ldr	r3, [pc, #268]	@ (8001f2c <DMA1_Stream1_IRQHandler+0x124>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001e24:	4b42      	ldr	r3, [pc, #264]	@ (8001f30 <DMA1_Stream1_IRQHandler+0x128>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	711a      	strb	r2, [r3, #4]
		USART3_RX_DMA_Flag.Fifo_Error_Flag = true;
 8001e2a:	4b42      	ldr	r3, [pc, #264]	@ (8001f34 <DMA1_Stream1_IRQHandler+0x12c>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 8001e30:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <DMA1_Stream1_IRQHandler+0x130>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e40:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 8001e42:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d014      	beq.n	8001e78 <DMA1_Stream1_IRQHandler+0x70>
	{
		TIM2_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e4e:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <DMA1_Stream1_IRQHandler+0x120>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	70da      	strb	r2, [r3, #3]
		TIM6_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e54:	4b35      	ldr	r3, [pc, #212]	@ (8001f2c <DMA1_Stream1_IRQHandler+0x124>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e5a:	4b35      	ldr	r3, [pc, #212]	@ (8001f30 <DMA1_Stream1_IRQHandler+0x128>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	70da      	strb	r2, [r3, #3]
		USART3_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <DMA1_Stream1_IRQHandler+0x12c>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	70da      	strb	r2, [r3, #3]
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8001e66:	4b34      	ldr	r3, [pc, #208]	@ (8001f38 <DMA1_Stream1_IRQHandler+0x130>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a2c      	ldr	r2, [pc, #176]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF1)
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d014      	beq.n	8001eae <DMA1_Stream1_IRQHandler+0xa6>
	{
		TIM2_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8001e84:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <DMA1_Stream1_IRQHandler+0x120>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	709a      	strb	r2, [r3, #2]
		TIM6_UP_DMA_Flag.Transfer_Error_Flag = true;
 8001e8a:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <DMA1_Stream1_IRQHandler+0x124>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001e90:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <DMA1_Stream1_IRQHandler+0x128>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	709a      	strb	r2, [r3, #2]
		USART3_RX_DMA_Flag.Transfer_Error_Flag = true;
 8001e96:	4b27      	ldr	r3, [pc, #156]	@ (8001f34 <DMA1_Stream1_IRQHandler+0x12c>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	709a      	strb	r2, [r3, #2]
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <DMA1_Stream1_IRQHandler+0x130>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001ea8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eac:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF1)
 8001eae:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d014      	beq.n	8001ee4 <DMA1_Stream1_IRQHandler+0xdc>
	{
		TIM2_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <DMA1_Stream1_IRQHandler+0x120>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	705a      	strb	r2, [r3, #1]
		TIM6_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <DMA1_Stream1_IRQHandler+0x124>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <DMA1_Stream1_IRQHandler+0x128>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	705a      	strb	r2, [r3, #1]
		USART3_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <DMA1_Stream1_IRQHandler+0x12c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	705a      	strb	r2, [r3, #1]
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <DMA1_Stream1_IRQHandler+0x130>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ee2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF1)
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d014      	beq.n	8001f1a <DMA1_Stream1_IRQHandler+0x112>
	{
		TIM2_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <DMA1_Stream1_IRQHandler+0x120>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
		TIM6_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <DMA1_Stream1_IRQHandler+0x124>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <DMA1_Stream1_IRQHandler+0x128>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
		USART3_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <DMA1_Stream1_IRQHandler+0x12c>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <DMA1_Stream1_IRQHandler+0x130>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <DMA1_Stream1_IRQHandler+0x11c>)
 8001f14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f18:	6093      	str	r3, [r2, #8]
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40026000 	.word	0x40026000
 8001f28:	20000218 	.word	0x20000218
 8001f2c:	20000278 	.word	0x20000278
 8001f30:	20000180 	.word	0x20000180
 8001f34:	20000148 	.word	0x20000148
 8001f38:	200002b8 	.word	0x200002b8

08001f3c <DMA1_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8001f40:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00b      	beq.n	8001f64 <DMA1_Stream2_IRQHandler+0x28>
	{
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <DMA1_Stream2_IRQHandler+0xc8>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	711a      	strb	r2, [r3, #4]
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 8001f52:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <DMA1_Stream2_IRQHandler+0xcc>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001f58:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a28      	ldr	r2, [pc, #160]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f62:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8001f64:	4b26      	ldr	r3, [pc, #152]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <DMA1_Stream2_IRQHandler+0x4c>
	{
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <DMA1_Stream2_IRQHandler+0xc8>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	70da      	strb	r2, [r3, #3]
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8001f76:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <DMA1_Stream2_IRQHandler+0xcc>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001f7c:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f86:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF2)
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00b      	beq.n	8001fac <DMA1_Stream2_IRQHandler+0x70>
	{
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <DMA1_Stream2_IRQHandler+0xc8>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	709a      	strb	r2, [r3, #2]
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <DMA1_Stream2_IRQHandler+0xcc>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a16      	ldr	r2, [pc, #88]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001faa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF2)
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <DMA1_Stream2_IRQHandler+0x94>
	{
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <DMA1_Stream2_IRQHandler+0xc8>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	705a      	strb	r2, [r3, #1]
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <DMA1_Stream2_IRQHandler+0xcc>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fce:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF2)
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <DMA1_Stream2_IRQHandler+0xb8>
	{
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <DMA1_Stream2_IRQHandler+0xc8>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <DMA1_Stream2_IRQHandler+0xcc>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <DMA1_Stream2_IRQHandler+0xc4>)
 8001fee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ff2:	6093      	str	r3, [r2, #8]
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40026000 	.word	0x40026000
 8002004:	20000150 	.word	0x20000150
 8002008:	200002c0 	.word	0x200002c0

0800200c <DMA1_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream3_IRQHandler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8002010:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01a      	beq.n	8002052 <DMA1_Stream3_IRQHandler+0x46>
	{
		TIM5_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 800201c:	4b52      	ldr	r3, [pc, #328]	@ (8002168 <DMA1_Stream3_IRQHandler+0x15c>)
 800201e:	2201      	movs	r2, #1
 8002020:	711a      	strb	r2, [r3, #4]
		TIM4_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002022:	4b52      	ldr	r3, [pc, #328]	@ (800216c <DMA1_Stream3_IRQHandler+0x160>)
 8002024:	2201      	movs	r2, #1
 8002026:	711a      	strb	r2, [r3, #4]
		USART7_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002028:	4b51      	ldr	r3, [pc, #324]	@ (8002170 <DMA1_Stream3_IRQHandler+0x164>)
 800202a:	2201      	movs	r2, #1
 800202c:	711a      	strb	r2, [r3, #4]
		USART3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800202e:	4b51      	ldr	r3, [pc, #324]	@ (8002174 <DMA1_Stream3_IRQHandler+0x168>)
 8002030:	2201      	movs	r2, #1
 8002032:	711a      	strb	r2, [r3, #4]
		I2S2_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002034:	4b50      	ldr	r3, [pc, #320]	@ (8002178 <DMA1_Stream3_IRQHandler+0x16c>)
 8002036:	2201      	movs	r2, #1
 8002038:	711a      	strb	r2, [r3, #4]
		SPI2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800203a:	4b50      	ldr	r3, [pc, #320]	@ (800217c <DMA1_Stream3_IRQHandler+0x170>)
 800203c:	2201      	movs	r2, #1
 800203e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8002040:	4b4f      	ldr	r3, [pc, #316]	@ (8002180 <DMA1_Stream3_IRQHandler+0x174>)
 8002042:	2201      	movs	r2, #1
 8002044:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8002046:	4b47      	ldr	r3, [pc, #284]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	4a46      	ldr	r2, [pc, #280]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 800204c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002050:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 8002052:	4b44      	ldr	r3, [pc, #272]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01a      	beq.n	8002094 <DMA1_Stream3_IRQHandler+0x88>
	{
		TIM5_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800205e:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <DMA1_Stream3_IRQHandler+0x15c>)
 8002060:	2201      	movs	r2, #1
 8002062:	70da      	strb	r2, [r3, #3]
		TIM4_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002064:	4b41      	ldr	r3, [pc, #260]	@ (800216c <DMA1_Stream3_IRQHandler+0x160>)
 8002066:	2201      	movs	r2, #1
 8002068:	70da      	strb	r2, [r3, #3]
		USART7_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800206a:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <DMA1_Stream3_IRQHandler+0x164>)
 800206c:	2201      	movs	r2, #1
 800206e:	70da      	strb	r2, [r3, #3]
		USART3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002070:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <DMA1_Stream3_IRQHandler+0x168>)
 8002072:	2201      	movs	r2, #1
 8002074:	70da      	strb	r2, [r3, #3]
		I2S2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002076:	4b40      	ldr	r3, [pc, #256]	@ (8002178 <DMA1_Stream3_IRQHandler+0x16c>)
 8002078:	2201      	movs	r2, #1
 800207a:	70da      	strb	r2, [r3, #3]
		SPI2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800207c:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <DMA1_Stream3_IRQHandler+0x170>)
 800207e:	2201      	movs	r2, #1
 8002080:	70da      	strb	r2, [r3, #3]
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8002082:	4b3f      	ldr	r3, [pc, #252]	@ (8002180 <DMA1_Stream3_IRQHandler+0x174>)
 8002084:	2201      	movs	r2, #1
 8002086:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a35      	ldr	r2, [pc, #212]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002092:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8002094:	4b33      	ldr	r3, [pc, #204]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01a      	beq.n	80020d6 <DMA1_Stream3_IRQHandler+0xca>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80020a0:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <DMA1_Stream3_IRQHandler+0x15c>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	709a      	strb	r2, [r3, #2]
		TIM4_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80020a6:	4b31      	ldr	r3, [pc, #196]	@ (800216c <DMA1_Stream3_IRQHandler+0x160>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	709a      	strb	r2, [r3, #2]
		USART7_RX_DMA_Flag.Transfer_Error_Flag = true;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <DMA1_Stream3_IRQHandler+0x164>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	709a      	strb	r2, [r3, #2]
		USART3_TX_DMA_Flag.Transfer_Error_Flag = true;
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <DMA1_Stream3_IRQHandler+0x168>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	709a      	strb	r2, [r3, #2]
		I2S2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002178 <DMA1_Stream3_IRQHandler+0x16c>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	709a      	strb	r2, [r3, #2]
		SPI2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80020be:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <DMA1_Stream3_IRQHandler+0x170>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	709a      	strb	r2, [r3, #2]
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <DMA1_Stream3_IRQHandler+0x174>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4a25      	ldr	r2, [pc, #148]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 80020d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020d4:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_HTIF3)
 80020d6:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01a      	beq.n	8002118 <DMA1_Stream3_IRQHandler+0x10c>
	{
		TIM5_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <DMA1_Stream3_IRQHandler+0x15c>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	705a      	strb	r2, [r3, #1]
		TIM4_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <DMA1_Stream3_IRQHandler+0x160>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	705a      	strb	r2, [r3, #1]
		USART7_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <DMA1_Stream3_IRQHandler+0x164>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	705a      	strb	r2, [r3, #1]
		USART3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <DMA1_Stream3_IRQHandler+0x168>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	705a      	strb	r2, [r3, #1]
		I2S2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <DMA1_Stream3_IRQHandler+0x16c>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	705a      	strb	r2, [r3, #1]
		SPI2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002100:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <DMA1_Stream3_IRQHandler+0x170>)
 8002102:	2201      	movs	r2, #1
 8002104:	705a      	strb	r2, [r3, #1]
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8002106:	4b1e      	ldr	r3, [pc, #120]	@ (8002180 <DMA1_Stream3_IRQHandler+0x174>)
 8002108:	2201      	movs	r2, #1
 800210a:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800210c:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 8002112:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002116:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA1 -> LISR & DMA_LISR_TCIF3)
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01a      	beq.n	800215a <DMA1_Stream3_IRQHandler+0x14e>
	{
		TIM5_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8002124:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <DMA1_Stream3_IRQHandler+0x15c>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
		TIM4_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <DMA1_Stream3_IRQHandler+0x160>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
		USART7_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002130:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <DMA1_Stream3_IRQHandler+0x164>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
		USART3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002136:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <DMA1_Stream3_IRQHandler+0x168>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
		I2S2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <DMA1_Stream3_IRQHandler+0x16c>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
		SPI2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <DMA1_Stream3_IRQHandler+0x170>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <DMA1_Stream3_IRQHandler+0x174>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <DMA1_Stream3_IRQHandler+0x158>)
 8002154:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002158:	6093      	str	r3, [r2, #8]
	}
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40026000 	.word	0x40026000
 8002168:	20000270 	.word	0x20000270
 800216c:	20000250 	.word	0x20000250
 8002170:	20000180 	.word	0x20000180
 8002174:	20000150 	.word	0x20000150
 8002178:	200000c0 	.word	0x200000c0
 800217c:	20000100 	.word	0x20000100
 8002180:	200002c8 	.word	0x200002c8

08002184 <DMA1_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream4_IRQHandler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 8002188:	4b54      	ldr	r3, [pc, #336]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01a      	beq.n	80021ca <DMA1_Stream4_IRQHandler+0x46>
	{
		TIM5_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002194:	4b52      	ldr	r3, [pc, #328]	@ (80022e0 <DMA1_Stream4_IRQHandler+0x15c>)
 8002196:	2201      	movs	r2, #1
 8002198:	711a      	strb	r2, [r3, #4]
		TIM3_CH1_DMA_Flag.Fifo_Error_Flag = true;
 800219a:	4b52      	ldr	r3, [pc, #328]	@ (80022e4 <DMA1_Stream4_IRQHandler+0x160>)
 800219c:	2201      	movs	r2, #1
 800219e:	711a      	strb	r2, [r3, #4]
		USART4_TX_DMA_Flag.Fifo_Error_Flag = true;
 80021a0:	4b51      	ldr	r3, [pc, #324]	@ (80022e8 <DMA1_Stream4_IRQHandler+0x164>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	711a      	strb	r2, [r3, #4]
		I2C3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80021a6:	4b51      	ldr	r3, [pc, #324]	@ (80022ec <DMA1_Stream4_IRQHandler+0x168>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	711a      	strb	r2, [r3, #4]
		I2S2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80021ac:	4b50      	ldr	r3, [pc, #320]	@ (80022f0 <DMA1_Stream4_IRQHandler+0x16c>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	711a      	strb	r2, [r3, #4]
		SPI2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80021b2:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <DMA1_Stream4_IRQHandler+0x170>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	711a      	strb	r2, [r3, #4]
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 80021b8:	4b4f      	ldr	r3, [pc, #316]	@ (80022f8 <DMA1_Stream4_IRQHandler+0x174>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80021be:	4b47      	ldr	r3, [pc, #284]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	4a46      	ldr	r2, [pc, #280]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 80021ca:	4b44      	ldr	r3, [pc, #272]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01a      	beq.n	800220c <DMA1_Stream4_IRQHandler+0x88>
	{
		TIM5_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021d6:	4b42      	ldr	r3, [pc, #264]	@ (80022e0 <DMA1_Stream4_IRQHandler+0x15c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	70da      	strb	r2, [r3, #3]
		TIM3_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021dc:	4b41      	ldr	r3, [pc, #260]	@ (80022e4 <DMA1_Stream4_IRQHandler+0x160>)
 80021de:	2201      	movs	r2, #1
 80021e0:	70da      	strb	r2, [r3, #3]
		USART4_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021e2:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <DMA1_Stream4_IRQHandler+0x164>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	70da      	strb	r2, [r3, #3]
		I2C3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021e8:	4b40      	ldr	r3, [pc, #256]	@ (80022ec <DMA1_Stream4_IRQHandler+0x168>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	70da      	strb	r2, [r3, #3]
		I2S2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021ee:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <DMA1_Stream4_IRQHandler+0x16c>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	70da      	strb	r2, [r3, #3]
		SPI2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80021f4:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <DMA1_Stream4_IRQHandler+0x170>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	70da      	strb	r2, [r3, #3]
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 80021fa:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <DMA1_Stream4_IRQHandler+0x174>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002200:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a35      	ldr	r2, [pc, #212]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF4)
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01a      	beq.n	800224e <DMA1_Stream4_IRQHandler+0xca>
	{
		TIM5_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8002218:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <DMA1_Stream4_IRQHandler+0x15c>)
 800221a:	2201      	movs	r2, #1
 800221c:	709a      	strb	r2, [r3, #2]
		TIM3_CH1_DMA_Flag.Transfer_Error_Flag = true;
 800221e:	4b31      	ldr	r3, [pc, #196]	@ (80022e4 <DMA1_Stream4_IRQHandler+0x160>)
 8002220:	2201      	movs	r2, #1
 8002222:	709a      	strb	r2, [r3, #2]
		USART4_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002224:	4b30      	ldr	r3, [pc, #192]	@ (80022e8 <DMA1_Stream4_IRQHandler+0x164>)
 8002226:	2201      	movs	r2, #1
 8002228:	709a      	strb	r2, [r3, #2]
		I2C3_TX_DMA_Flag.Transfer_Error_Flag = true;
 800222a:	4b30      	ldr	r3, [pc, #192]	@ (80022ec <DMA1_Stream4_IRQHandler+0x168>)
 800222c:	2201      	movs	r2, #1
 800222e:	709a      	strb	r2, [r3, #2]
		I2S2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002230:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <DMA1_Stream4_IRQHandler+0x16c>)
 8002232:	2201      	movs	r2, #1
 8002234:	709a      	strb	r2, [r3, #2]
		SPI2_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002236:	4b2f      	ldr	r3, [pc, #188]	@ (80022f4 <DMA1_Stream4_IRQHandler+0x170>)
 8002238:	2201      	movs	r2, #1
 800223a:	709a      	strb	r2, [r3, #2]
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 800223c:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <DMA1_Stream4_IRQHandler+0x174>)
 800223e:	2201      	movs	r2, #1
 8002240:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002242:	4b26      	ldr	r3, [pc, #152]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a25      	ldr	r2, [pc, #148]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF4)
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01a      	beq.n	8002290 <DMA1_Stream4_IRQHandler+0x10c>
	{
		TIM5_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800225a:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <DMA1_Stream4_IRQHandler+0x15c>)
 800225c:	2201      	movs	r2, #1
 800225e:	705a      	strb	r2, [r3, #1]
		TIM3_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002260:	4b20      	ldr	r3, [pc, #128]	@ (80022e4 <DMA1_Stream4_IRQHandler+0x160>)
 8002262:	2201      	movs	r2, #1
 8002264:	705a      	strb	r2, [r3, #1]
		USART4_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <DMA1_Stream4_IRQHandler+0x164>)
 8002268:	2201      	movs	r2, #1
 800226a:	705a      	strb	r2, [r3, #1]
		I2C3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800226c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <DMA1_Stream4_IRQHandler+0x168>)
 800226e:	2201      	movs	r2, #1
 8002270:	705a      	strb	r2, [r3, #1]
		I2S2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002272:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <DMA1_Stream4_IRQHandler+0x16c>)
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
		SPI2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002278:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <DMA1_Stream4_IRQHandler+0x170>)
 800227a:	2201      	movs	r2, #1
 800227c:	705a      	strb	r2, [r3, #1]
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 800227e:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <DMA1_Stream4_IRQHandler+0x174>)
 8002280:	2201      	movs	r2, #1
 8002282:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002284:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 800228a:	f043 0310 	orr.w	r3, r3, #16
 800228e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01a      	beq.n	80022d2 <DMA1_Stream4_IRQHandler+0x14e>
	{
		TIM5_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800229c:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <DMA1_Stream4_IRQHandler+0x15c>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
		TIM3_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <DMA1_Stream4_IRQHandler+0x160>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
		USART4_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <DMA1_Stream4_IRQHandler+0x164>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
		I2C3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80022ae:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <DMA1_Stream4_IRQHandler+0x168>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
		I2S2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <DMA1_Stream4_IRQHandler+0x16c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
		SPI2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <DMA1_Stream4_IRQHandler+0x170>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <DMA1_Stream4_IRQHandler+0x174>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80022c6:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <DMA1_Stream4_IRQHandler+0x158>)
 80022cc:	f043 0320 	orr.w	r3, r3, #32
 80022d0:	60d3      	str	r3, [r2, #12]
	}
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40026000 	.word	0x40026000
 80022e0:	20000260 	.word	0x20000260
 80022e4:	20000228 	.word	0x20000228
 80022e8:	20000158 	.word	0x20000158
 80022ec:	200000f0 	.word	0x200000f0
 80022f0:	200000c8 	.word	0x200000c8
 80022f4:	20000118 	.word	0x20000118
 80022f8:	200002d0 	.word	0x200002d0

080022fc <DMA1_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 8002300:	4b54      	ldr	r3, [pc, #336]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01a      	beq.n	8002342 <DMA1_Stream5_IRQHandler+0x46>
	{
		SPI3_TX_DMA_Flag.Fifo_Error_Flag = true;
 800230c:	4b52      	ldr	r3, [pc, #328]	@ (8002458 <DMA1_Stream5_IRQHandler+0x15c>)
 800230e:	2201      	movs	r2, #1
 8002310:	711a      	strb	r2, [r3, #4]
		TIM3_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8002312:	4b52      	ldr	r3, [pc, #328]	@ (800245c <DMA1_Stream5_IRQHandler+0x160>)
 8002314:	2201      	movs	r2, #1
 8002316:	711a      	strb	r2, [r3, #4]
		TIM2_CH1_DMA_Flag.Fifo_Error_Flag =  true;
 8002318:	4b51      	ldr	r3, [pc, #324]	@ (8002460 <DMA1_Stream5_IRQHandler+0x164>)
 800231a:	2201      	movs	r2, #1
 800231c:	711a      	strb	r2, [r3, #4]
		DAC2_DMA_Flag.Fifo_Error_Flag = true;
 800231e:	4b51      	ldr	r3, [pc, #324]	@ (8002464 <DMA1_Stream5_IRQHandler+0x168>)
 8002320:	2201      	movs	r2, #1
 8002322:	711a      	strb	r2, [r3, #4]
		TIM3_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <DMA1_Stream5_IRQHandler+0x16c>)
 8002326:	2201      	movs	r2, #1
 8002328:	711a      	strb	r2, [r3, #4]
		USART2_RX_DMA_Flag.Fifo_Error_Flag = true;
 800232a:	4b50      	ldr	r3, [pc, #320]	@ (800246c <DMA1_Stream5_IRQHandler+0x170>)
 800232c:	2201      	movs	r2, #1
 800232e:	711a      	strb	r2, [r3, #4]
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 8002330:	4b4f      	ldr	r3, [pc, #316]	@ (8002470 <DMA1_Stream5_IRQHandler+0x174>)
 8002332:	2201      	movs	r2, #1
 8002334:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a46      	ldr	r2, [pc, #280]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 800233c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002340:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 8002342:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01a      	beq.n	8002384 <DMA1_Stream5_IRQHandler+0x88>
	{
		SPI3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800234e:	4b42      	ldr	r3, [pc, #264]	@ (8002458 <DMA1_Stream5_IRQHandler+0x15c>)
 8002350:	2201      	movs	r2, #1
 8002352:	70da      	strb	r2, [r3, #3]
		TIM3_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002354:	4b41      	ldr	r3, [pc, #260]	@ (800245c <DMA1_Stream5_IRQHandler+0x160>)
 8002356:	2201      	movs	r2, #1
 8002358:	70da      	strb	r2, [r3, #3]
		TIM2_CH1_DMA_Flag.Direct_Mode_Error_Flag =  true;
 800235a:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <DMA1_Stream5_IRQHandler+0x164>)
 800235c:	2201      	movs	r2, #1
 800235e:	70da      	strb	r2, [r3, #3]
		DAC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002360:	4b40      	ldr	r3, [pc, #256]	@ (8002464 <DMA1_Stream5_IRQHandler+0x168>)
 8002362:	2201      	movs	r2, #1
 8002364:	70da      	strb	r2, [r3, #3]
		TIM3_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002366:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <DMA1_Stream5_IRQHandler+0x16c>)
 8002368:	2201      	movs	r2, #1
 800236a:	70da      	strb	r2, [r3, #3]
		USART2_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800236c:	4b3f      	ldr	r3, [pc, #252]	@ (800246c <DMA1_Stream5_IRQHandler+0x170>)
 800236e:	2201      	movs	r2, #1
 8002370:	70da      	strb	r2, [r3, #3]
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8002372:	4b3f      	ldr	r3, [pc, #252]	@ (8002470 <DMA1_Stream5_IRQHandler+0x174>)
 8002374:	2201      	movs	r2, #1
 8002376:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8002378:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a35      	ldr	r2, [pc, #212]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002382:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF5)
 8002384:	4b33      	ldr	r3, [pc, #204]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01a      	beq.n	80023c6 <DMA1_Stream5_IRQHandler+0xca>
	{
		SPI3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002390:	4b31      	ldr	r3, [pc, #196]	@ (8002458 <DMA1_Stream5_IRQHandler+0x15c>)
 8002392:	2201      	movs	r2, #1
 8002394:	709a      	strb	r2, [r3, #2]
		TIM3_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8002396:	4b31      	ldr	r3, [pc, #196]	@ (800245c <DMA1_Stream5_IRQHandler+0x160>)
 8002398:	2201      	movs	r2, #1
 800239a:	709a      	strb	r2, [r3, #2]
		TIM2_CH1_DMA_Flag.Transfer_Error_Flag =  true;
 800239c:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <DMA1_Stream5_IRQHandler+0x164>)
 800239e:	2201      	movs	r2, #1
 80023a0:	709a      	strb	r2, [r3, #2]
		DAC2_DMA_Flag.Transfer_Error_Flag = true;
 80023a2:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <DMA1_Stream5_IRQHandler+0x168>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	709a      	strb	r2, [r3, #2]
		TIM3_CH2_DMA_Flag.Transfer_Error_Flag = true;
 80023a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <DMA1_Stream5_IRQHandler+0x16c>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	709a      	strb	r2, [r3, #2]
		USART2_RX_DMA_Flag.Transfer_Error_Flag = true;
 80023ae:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <DMA1_Stream5_IRQHandler+0x170>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	709a      	strb	r2, [r3, #2]
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 80023b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002470 <DMA1_Stream5_IRQHandler+0x174>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80023ba:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4a25      	ldr	r2, [pc, #148]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 80023c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023c4:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF5)
 80023c6:	4b23      	ldr	r3, [pc, #140]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01a      	beq.n	8002408 <DMA1_Stream5_IRQHandler+0x10c>
	{
		SPI3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023d2:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <DMA1_Stream5_IRQHandler+0x15c>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	705a      	strb	r2, [r3, #1]
		TIM3_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023d8:	4b20      	ldr	r3, [pc, #128]	@ (800245c <DMA1_Stream5_IRQHandler+0x160>)
 80023da:	2201      	movs	r2, #1
 80023dc:	705a      	strb	r2, [r3, #1]
		TIM2_CH1_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <DMA1_Stream5_IRQHandler+0x164>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	705a      	strb	r2, [r3, #1]
		DAC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <DMA1_Stream5_IRQHandler+0x168>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	705a      	strb	r2, [r3, #1]
		TIM3_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <DMA1_Stream5_IRQHandler+0x16c>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	705a      	strb	r2, [r3, #1]
		USART2_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <DMA1_Stream5_IRQHandler+0x170>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	705a      	strb	r2, [r3, #1]
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <DMA1_Stream5_IRQHandler+0x174>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 8002402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002406:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF5)
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01a      	beq.n	800244a <DMA1_Stream5_IRQHandler+0x14e>
	{
		SPI3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002414:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <DMA1_Stream5_IRQHandler+0x15c>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
		TIM3_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <DMA1_Stream5_IRQHandler+0x160>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		TIM2_CH1_DMA_Flag.Transfer_Complete_Flag =  true;
 8002420:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <DMA1_Stream5_IRQHandler+0x164>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
		DAC2_DMA_Flag.Transfer_Complete_Flag = true;
 8002426:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <DMA1_Stream5_IRQHandler+0x168>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
		TIM3_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 800242c:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <DMA1_Stream5_IRQHandler+0x16c>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
		USART2_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <DMA1_Stream5_IRQHandler+0x170>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8002438:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <DMA1_Stream5_IRQHandler+0x174>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800243e:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <DMA1_Stream5_IRQHandler+0x158>)
 8002444:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002448:	60d3      	str	r3, [r2, #12]
	}
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40026000 	.word	0x40026000
 8002458:	20000120 	.word	0x20000120
 800245c:	20000240 	.word	0x20000240
 8002460:	20000208 	.word	0x20000208
 8002464:	20000280 	.word	0x20000280
 8002468:	20000230 	.word	0x20000230
 800246c:	20000138 	.word	0x20000138
 8002470:	200002d8 	.word	0x200002d8

08002474 <DMA1_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8002478:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d017      	beq.n	80024b4 <DMA1_Stream6_IRQHandler+0x40>
	{
		TIM3_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002484:	4b45      	ldr	r3, [pc, #276]	@ (800259c <DMA1_Stream6_IRQHandler+0x128>)
 8002486:	2201      	movs	r2, #1
 8002488:	711a      	strb	r2, [r3, #4]
		TIM2_UP_DMA_Flag.Fifo_Error_Flag = true;
 800248a:	4b45      	ldr	r3, [pc, #276]	@ (80025a0 <DMA1_Stream6_IRQHandler+0x12c>)
 800248c:	2201      	movs	r2, #1
 800248e:	711a      	strb	r2, [r3, #4]
		USART8_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002490:	4b44      	ldr	r3, [pc, #272]	@ (80025a4 <DMA1_Stream6_IRQHandler+0x130>)
 8002492:	2201      	movs	r2, #1
 8002494:	711a      	strb	r2, [r3, #4]
		USART2_TX_DMA_Flag.Fifo_Error_Flag =  true;
 8002496:	4b44      	ldr	r3, [pc, #272]	@ (80025a8 <DMA1_Stream6_IRQHandler+0x134>)
 8002498:	2201      	movs	r2, #1
 800249a:	711a      	strb	r2, [r3, #4]
		I2C1_TX_DMA_Flag.Fifo_Error_Flag = true;
 800249c:	4b43      	ldr	r3, [pc, #268]	@ (80025ac <DMA1_Stream6_IRQHandler+0x138>)
 800249e:	2201      	movs	r2, #1
 80024a0:	711a      	strb	r2, [r3, #4]
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 80024a2:	4b43      	ldr	r3, [pc, #268]	@ (80025b0 <DMA1_Stream6_IRQHandler+0x13c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80024a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d014      	beq.n	80024ea <DMA1_Stream6_IRQHandler+0x76>
	{
		TIM2_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80024c0:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <DMA1_Stream6_IRQHandler+0x12c>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	70da      	strb	r2, [r3, #3]
		USART8_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80024c6:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <DMA1_Stream6_IRQHandler+0x130>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	70da      	strb	r2, [r3, #3]
		USART2_TX_DMA_Flag.Direct_Mode_Error_Flag =  true;
 80024cc:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <DMA1_Stream6_IRQHandler+0x134>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	70da      	strb	r2, [r3, #3]
		I2C1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80024d2:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <DMA1_Stream6_IRQHandler+0x138>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	70da      	strb	r2, [r3, #3]
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 80024d8:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <DMA1_Stream6_IRQHandler+0x13c>)
 80024da:	2201      	movs	r2, #1
 80024dc:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80024de:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF6)
 80024ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d014      	beq.n	8002520 <DMA1_Stream6_IRQHandler+0xac>
	{
		TIM2_UP_DMA_Flag.Transfer_Error_Flag = true;
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <DMA1_Stream6_IRQHandler+0x12c>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	709a      	strb	r2, [r3, #2]
		USART8_RX_DMA_Flag.Transfer_Error_Flag = true;
 80024fc:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <DMA1_Stream6_IRQHandler+0x130>)
 80024fe:	2201      	movs	r2, #1
 8002500:	709a      	strb	r2, [r3, #2]
		USART2_TX_DMA_Flag.Transfer_Error_Flag =  true;
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <DMA1_Stream6_IRQHandler+0x134>)
 8002504:	2201      	movs	r2, #1
 8002506:	709a      	strb	r2, [r3, #2]
		I2C1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002508:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <DMA1_Stream6_IRQHandler+0x138>)
 800250a:	2201      	movs	r2, #1
 800250c:	709a      	strb	r2, [r3, #2]
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 800250e:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <DMA1_Stream6_IRQHandler+0x13c>)
 8002510:	2201      	movs	r2, #1
 8002512:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8002514:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a1f      	ldr	r2, [pc, #124]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 800251a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800251e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF6)
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d014      	beq.n	8002556 <DMA1_Stream6_IRQHandler+0xe2>
	{
		TIM2_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800252c:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <DMA1_Stream6_IRQHandler+0x12c>)
 800252e:	2201      	movs	r2, #1
 8002530:	705a      	strb	r2, [r3, #1]
		USART8_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002532:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <DMA1_Stream6_IRQHandler+0x130>)
 8002534:	2201      	movs	r2, #1
 8002536:	705a      	strb	r2, [r3, #1]
		USART2_TX_DMA_Flag.Half_Transfer_Complete_Flag =  true;
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <DMA1_Stream6_IRQHandler+0x134>)
 800253a:	2201      	movs	r2, #1
 800253c:	705a      	strb	r2, [r3, #1]
		I2C1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800253e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <DMA1_Stream6_IRQHandler+0x138>)
 8002540:	2201      	movs	r2, #1
 8002542:	705a      	strb	r2, [r3, #1]
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8002544:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <DMA1_Stream6_IRQHandler+0x13c>)
 8002546:	2201      	movs	r2, #1
 8002548:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 8002550:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002554:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF6)
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d014      	beq.n	800258c <DMA1_Stream6_IRQHandler+0x118>
	{
		TIM2_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8002562:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <DMA1_Stream6_IRQHandler+0x12c>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
		USART8_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002568:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <DMA1_Stream6_IRQHandler+0x130>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
		USART2_TX_DMA_Flag.Transfer_Complete_Flag =  true;
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <DMA1_Stream6_IRQHandler+0x134>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
		I2C1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002574:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <DMA1_Stream6_IRQHandler+0x138>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <DMA1_Stream6_IRQHandler+0x13c>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <DMA1_Stream6_IRQHandler+0x124>)
 8002586:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800258a:	60d3      	str	r3, [r2, #12]
	}
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40026000 	.word	0x40026000
 800259c:	20000238 	.word	0x20000238
 80025a0:	20000200 	.word	0x20000200
 80025a4:	20000188 	.word	0x20000188
 80025a8:	20000140 	.word	0x20000140
 80025ac:	200000e0 	.word	0x200000e0
 80025b0:	200002e0 	.word	0x200002e0

080025b4 <DMA1_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA1_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA1_Stream7_IRQHandler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 80025b8:	4b54      	ldr	r3, [pc, #336]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01a      	beq.n	80025fa <DMA1_Stream7_IRQHandler+0x46>
	{
		I2S3_TX_DMA_Flag.Fifo_Error_Flag = true;
 80025c4:	4b52      	ldr	r3, [pc, #328]	@ (8002710 <DMA1_Stream7_IRQHandler+0x15c>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	711a      	strb	r2, [r3, #4]
		I2C2_TX_DMA_Flag.Fifo_Error_Flag = true;
 80025ca:	4b52      	ldr	r3, [pc, #328]	@ (8002714 <DMA1_Stream7_IRQHandler+0x160>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	711a      	strb	r2, [r3, #4]
		USART5_TX_DMA_Flag.Fifo_Error_Flag = true;
 80025d0:	4b51      	ldr	r3, [pc, #324]	@ (8002718 <DMA1_Stream7_IRQHandler+0x164>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	711a      	strb	r2, [r3, #4]
		TIM4_CH3_DMA_Flag.Fifo_Error_Flag = true;
 80025d6:	4b51      	ldr	r3, [pc, #324]	@ (800271c <DMA1_Stream7_IRQHandler+0x168>)
 80025d8:	2201      	movs	r2, #1
 80025da:	711a      	strb	r2, [r3, #4]
		TIM2_CH2_DMA_Flag.Fifo_Error_Flag = true;
 80025dc:	4b50      	ldr	r3, [pc, #320]	@ (8002720 <DMA1_Stream7_IRQHandler+0x16c>)
 80025de:	2201      	movs	r2, #1
 80025e0:	711a      	strb	r2, [r3, #4]
		TIM2_CH4_DMA_Flag.Fifo_Error_Flag = true;
 80025e2:	4b50      	ldr	r3, [pc, #320]	@ (8002724 <DMA1_Stream7_IRQHandler+0x170>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	711a      	strb	r2, [r3, #4]

		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 80025e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002728 <DMA1_Stream7_IRQHandler+0x174>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80025ee:	4b47      	ldr	r3, [pc, #284]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4a46      	ldr	r2, [pc, #280]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80025f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025f8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 80025fa:	4b44      	ldr	r3, [pc, #272]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01a      	beq.n	800263c <DMA1_Stream7_IRQHandler+0x88>
	{
		I2S3_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002606:	4b42      	ldr	r3, [pc, #264]	@ (8002710 <DMA1_Stream7_IRQHandler+0x15c>)
 8002608:	2201      	movs	r2, #1
 800260a:	70da      	strb	r2, [r3, #3]
		I2C2_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 800260c:	4b41      	ldr	r3, [pc, #260]	@ (8002714 <DMA1_Stream7_IRQHandler+0x160>)
 800260e:	2201      	movs	r2, #1
 8002610:	70da      	strb	r2, [r3, #3]
		USART5_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <DMA1_Stream7_IRQHandler+0x164>)
 8002614:	2201      	movs	r2, #1
 8002616:	70da      	strb	r2, [r3, #3]
		TIM4_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002618:	4b40      	ldr	r3, [pc, #256]	@ (800271c <DMA1_Stream7_IRQHandler+0x168>)
 800261a:	2201      	movs	r2, #1
 800261c:	70da      	strb	r2, [r3, #3]
		TIM2_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 800261e:	4b40      	ldr	r3, [pc, #256]	@ (8002720 <DMA1_Stream7_IRQHandler+0x16c>)
 8002620:	2201      	movs	r2, #1
 8002622:	70da      	strb	r2, [r3, #3]
		TIM2_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002624:	4b3f      	ldr	r3, [pc, #252]	@ (8002724 <DMA1_Stream7_IRQHandler+0x170>)
 8002626:	2201      	movs	r2, #1
 8002628:	70da      	strb	r2, [r3, #3]
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 800262a:	4b3f      	ldr	r3, [pc, #252]	@ (8002728 <DMA1_Stream7_IRQHandler+0x174>)
 800262c:	2201      	movs	r2, #1
 800262e:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a35      	ldr	r2, [pc, #212]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800263a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TEIF7)
 800263c:	4b33      	ldr	r3, [pc, #204]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01a      	beq.n	800267e <DMA1_Stream7_IRQHandler+0xca>
	{
		I2S3_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002648:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <DMA1_Stream7_IRQHandler+0x15c>)
 800264a:	2201      	movs	r2, #1
 800264c:	709a      	strb	r2, [r3, #2]
		I2C2_TX_DMA_Flag.Transfer_Error_Flag = true;
 800264e:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <DMA1_Stream7_IRQHandler+0x160>)
 8002650:	2201      	movs	r2, #1
 8002652:	709a      	strb	r2, [r3, #2]
		USART5_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002654:	4b30      	ldr	r3, [pc, #192]	@ (8002718 <DMA1_Stream7_IRQHandler+0x164>)
 8002656:	2201      	movs	r2, #1
 8002658:	709a      	strb	r2, [r3, #2]
		TIM4_CH3_DMA_Flag.Transfer_Error_Flag = true;
 800265a:	4b30      	ldr	r3, [pc, #192]	@ (800271c <DMA1_Stream7_IRQHandler+0x168>)
 800265c:	2201      	movs	r2, #1
 800265e:	709a      	strb	r2, [r3, #2]
		TIM2_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8002660:	4b2f      	ldr	r3, [pc, #188]	@ (8002720 <DMA1_Stream7_IRQHandler+0x16c>)
 8002662:	2201      	movs	r2, #1
 8002664:	709a      	strb	r2, [r3, #2]
		TIM2_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8002666:	4b2f      	ldr	r3, [pc, #188]	@ (8002724 <DMA1_Stream7_IRQHandler+0x170>)
 8002668:	2201      	movs	r2, #1
 800266a:	709a      	strb	r2, [r3, #2]
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 800266c:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <DMA1_Stream7_IRQHandler+0x174>)
 800266e:	2201      	movs	r2, #1
 8002670:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002672:	4b26      	ldr	r3, [pc, #152]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	4a25      	ldr	r2, [pc, #148]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 8002678:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800267c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_HTIF7)
 800267e:	4b23      	ldr	r3, [pc, #140]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01a      	beq.n	80026c0 <DMA1_Stream7_IRQHandler+0x10c>
	{
		I2S3_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <DMA1_Stream7_IRQHandler+0x15c>)
 800268c:	2201      	movs	r2, #1
 800268e:	705a      	strb	r2, [r3, #1]
		I2C2_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002690:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <DMA1_Stream7_IRQHandler+0x160>)
 8002692:	2201      	movs	r2, #1
 8002694:	705a      	strb	r2, [r3, #1]
		USART5_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <DMA1_Stream7_IRQHandler+0x164>)
 8002698:	2201      	movs	r2, #1
 800269a:	705a      	strb	r2, [r3, #1]
		TIM4_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <DMA1_Stream7_IRQHandler+0x168>)
 800269e:	2201      	movs	r2, #1
 80026a0:	705a      	strb	r2, [r3, #1]
		TIM2_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80026a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <DMA1_Stream7_IRQHandler+0x16c>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	705a      	strb	r2, [r3, #1]
		TIM2_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <DMA1_Stream7_IRQHandler+0x170>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	705a      	strb	r2, [r3, #1]
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 80026ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <DMA1_Stream7_IRQHandler+0x174>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a14      	ldr	r2, [pc, #80]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80026ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026be:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA1 -> HISR & DMA_HISR_TCIF7)
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01a      	beq.n	8002702 <DMA1_Stream7_IRQHandler+0x14e>
	{
		I2S3_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80026cc:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <DMA1_Stream7_IRQHandler+0x15c>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
		I2C2_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <DMA1_Stream7_IRQHandler+0x160>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
		USART5_TX_DMA_Flag.Transfer_Complete_Flag = true;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <DMA1_Stream7_IRQHandler+0x164>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
		TIM4_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 80026de:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <DMA1_Stream7_IRQHandler+0x168>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
		TIM2_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <DMA1_Stream7_IRQHandler+0x16c>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
		TIM2_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <DMA1_Stream7_IRQHandler+0x170>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 80026f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <DMA1_Stream7_IRQHandler+0x174>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4a04      	ldr	r2, [pc, #16]	@ (800270c <DMA1_Stream7_IRQHandler+0x158>)
 80026fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002700:	60d3      	str	r3, [r2, #12]
	}
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40026000 	.word	0x40026000
 8002710:	200000d0 	.word	0x200000d0
 8002714:	200000e8 	.word	0x200000e8
 8002718:	20000168 	.word	0x20000168
 800271c:	20000258 	.word	0x20000258
 8002720:	20000210 	.word	0x20000210
 8002724:	20000220 	.word	0x20000220
 8002728:	200002e8 	.word	0x200002e8

0800272c <DMA2_Stream0_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream0_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream0_IRQHandler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 8002730:	4b45      	ldr	r3, [pc, #276]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d014      	beq.n	8002766 <DMA2_Stream0_IRQHandler+0x3a>
	{
		SPI1_RX_DMA_Flag.Fifo_Error_Flag = true;
 800273c:	4b43      	ldr	r3, [pc, #268]	@ (800284c <DMA2_Stream0_IRQHandler+0x120>)
 800273e:	2201      	movs	r2, #1
 8002740:	711a      	strb	r2, [r3, #4]
		ADC1_DMA_Flag.Fifo_Error_Flag = true;
 8002742:	4b43      	ldr	r3, [pc, #268]	@ (8002850 <DMA2_Stream0_IRQHandler+0x124>)
 8002744:	2201      	movs	r2, #1
 8002746:	711a      	strb	r2, [r3, #4]
		TIM1_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8002748:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <DMA2_Stream0_IRQHandler+0x128>)
 800274a:	2201      	movs	r2, #1
 800274c:	711a      	strb	r2, [r3, #4]
		TIM1_COM_DMA_Flag.Fifo_Error_Flag = true;
 800274e:	4b42      	ldr	r3, [pc, #264]	@ (8002858 <DMA2_Stream0_IRQHandler+0x12c>)
 8002750:	2201      	movs	r2, #1
 8002752:	711a      	strb	r2, [r3, #4]
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 8002754:	4b41      	ldr	r3, [pc, #260]	@ (800285c <DMA2_Stream0_IRQHandler+0x130>)
 8002756:	2201      	movs	r2, #1
 8002758:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4a3a      	ldr	r2, [pc, #232]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 8002766:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d014      	beq.n	800279c <DMA2_Stream0_IRQHandler+0x70>
	{
		SPI1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002772:	4b36      	ldr	r3, [pc, #216]	@ (800284c <DMA2_Stream0_IRQHandler+0x120>)
 8002774:	2201      	movs	r2, #1
 8002776:	70da      	strb	r2, [r3, #3]
		ADC1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002778:	4b35      	ldr	r3, [pc, #212]	@ (8002850 <DMA2_Stream0_IRQHandler+0x124>)
 800277a:	2201      	movs	r2, #1
 800277c:	70da      	strb	r2, [r3, #3]
		TIM1_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 800277e:	4b35      	ldr	r3, [pc, #212]	@ (8002854 <DMA2_Stream0_IRQHandler+0x128>)
 8002780:	2201      	movs	r2, #1
 8002782:	70da      	strb	r2, [r3, #3]
		TIM1_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <DMA2_Stream0_IRQHandler+0x12c>)
 8002786:	2201      	movs	r2, #1
 8002788:	70da      	strb	r2, [r3, #3]
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 800278a:	4b34      	ldr	r3, [pc, #208]	@ (800285c <DMA2_Stream0_IRQHandler+0x130>)
 800278c:	2201      	movs	r2, #1
 800278e:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8002790:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a2c      	ldr	r2, [pc, #176]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF0)
 800279c:	4b2a      	ldr	r3, [pc, #168]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d014      	beq.n	80027d2 <DMA2_Stream0_IRQHandler+0xa6>
	{
		SPI1_RX_DMA_Flag.Transfer_Error_Flag = true;
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <DMA2_Stream0_IRQHandler+0x120>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	709a      	strb	r2, [r3, #2]
		ADC1_DMA_Flag.Transfer_Error_Flag = true;
 80027ae:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <DMA2_Stream0_IRQHandler+0x124>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	709a      	strb	r2, [r3, #2]
		TIM1_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 80027b4:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <DMA2_Stream0_IRQHandler+0x128>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	709a      	strb	r2, [r3, #2]
		TIM1_COM_DMA_Flag.Transfer_Error_Flag = true;
 80027ba:	4b27      	ldr	r3, [pc, #156]	@ (8002858 <DMA2_Stream0_IRQHandler+0x12c>)
 80027bc:	2201      	movs	r2, #1
 80027be:	709a      	strb	r2, [r3, #2]
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 80027c0:	4b26      	ldr	r3, [pc, #152]	@ (800285c <DMA2_Stream0_IRQHandler+0x130>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF0)
 80027d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d014      	beq.n	8002808 <DMA2_Stream0_IRQHandler+0xdc>
	{
		SPI1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <DMA2_Stream0_IRQHandler+0x120>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
		ADC1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <DMA2_Stream0_IRQHandler+0x124>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	705a      	strb	r2, [r3, #1]
		TIM1_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <DMA2_Stream0_IRQHandler+0x128>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	705a      	strb	r2, [r3, #1]
		TIM1_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 80027f0:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <DMA2_Stream0_IRQHandler+0x12c>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	705a      	strb	r2, [r3, #1]
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <DMA2_Stream0_IRQHandler+0x130>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d014      	beq.n	800283e <DMA2_Stream0_IRQHandler+0x112>
	{
		SPI1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <DMA2_Stream0_IRQHandler+0x120>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
		ADC1_DMA_Flag.Transfer_Complete_Flag = true;
 800281a:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <DMA2_Stream0_IRQHandler+0x124>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
		TIM1_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <DMA2_Stream0_IRQHandler+0x128>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
		TIM1_COM_DMA_Flag.Transfer_Complete_Flag = true;
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <DMA2_Stream0_IRQHandler+0x12c>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <DMA2_Stream0_IRQHandler+0x130>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8002832:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4a04      	ldr	r2, [pc, #16]	@ (8002848 <DMA2_Stream0_IRQHandler+0x11c>)
 8002838:	f043 0320 	orr.w	r3, r3, #32
 800283c:	6093      	str	r3, [r2, #8]
	}
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40026400 	.word	0x40026400
 800284c:	200000f8 	.word	0x200000f8
 8002850:	20000298 	.word	0x20000298
 8002854:	200001b8 	.word	0x200001b8
 8002858:	200001c0 	.word	0x200001c0
 800285c:	200002f0 	.word	0x200002f0

08002860 <DMA2_Stream1_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream1_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 8002864:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01d      	beq.n	80028ac <DMA2_Stream1_IRQHandler+0x4c>
	{
		ADC3_DMA_Flag.Fifo_Error_Flag = true;
 8002870:	4b5a      	ldr	r3, [pc, #360]	@ (80029dc <DMA2_Stream1_IRQHandler+0x17c>)
 8002872:	2201      	movs	r2, #1
 8002874:	711a      	strb	r2, [r3, #4]
		TIM1_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8002876:	4b5a      	ldr	r3, [pc, #360]	@ (80029e0 <DMA2_Stream1_IRQHandler+0x180>)
 8002878:	2201      	movs	r2, #1
 800287a:	711a      	strb	r2, [r3, #4]
		TIM8_UP_DMA_Flag.Fifo_Error_Flag = true;
 800287c:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <DMA2_Stream1_IRQHandler+0x184>)
 800287e:	2201      	movs	r2, #1
 8002880:	711a      	strb	r2, [r3, #4]
		TIM8_TRIG_DMA_Flag.Fifo_Error_Flag = true;
 8002882:	4b59      	ldr	r3, [pc, #356]	@ (80029e8 <DMA2_Stream1_IRQHandler+0x188>)
 8002884:	2201      	movs	r2, #1
 8002886:	711a      	strb	r2, [r3, #4]
		TIM8_COM_DMA_Flag.Fifo_Error_Flag = true;
 8002888:	4b58      	ldr	r3, [pc, #352]	@ (80029ec <DMA2_Stream1_IRQHandler+0x18c>)
 800288a:	2201      	movs	r2, #1
 800288c:	711a      	strb	r2, [r3, #4]
		DCMI_DMA_Flag.Fifo_Error_Flag = true;
 800288e:	4b58      	ldr	r3, [pc, #352]	@ (80029f0 <DMA2_Stream1_IRQHandler+0x190>)
 8002890:	2201      	movs	r2, #1
 8002892:	711a      	strb	r2, [r3, #4]
		USART6_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002894:	4b57      	ldr	r3, [pc, #348]	@ (80029f4 <DMA2_Stream1_IRQHandler+0x194>)
 8002896:	2201      	movs	r2, #1
 8002898:	711a      	strb	r2, [r3, #4]
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 800289a:	4b57      	ldr	r3, [pc, #348]	@ (80029f8 <DMA2_Stream1_IRQHandler+0x198>)
 800289c:	2201      	movs	r2, #1
 800289e:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80028a0:	4b4d      	ldr	r3, [pc, #308]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a4c      	ldr	r2, [pc, #304]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80028a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028aa:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 80028ac:	4b4a      	ldr	r3, [pc, #296]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01d      	beq.n	80028f4 <DMA2_Stream1_IRQHandler+0x94>
	{
		ADC3_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028b8:	4b48      	ldr	r3, [pc, #288]	@ (80029dc <DMA2_Stream1_IRQHandler+0x17c>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	70da      	strb	r2, [r3, #3]
		TIM1_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028be:	4b48      	ldr	r3, [pc, #288]	@ (80029e0 <DMA2_Stream1_IRQHandler+0x180>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	70da      	strb	r2, [r3, #3]
		TIM8_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028c4:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <DMA2_Stream1_IRQHandler+0x184>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	70da      	strb	r2, [r3, #3]
		TIM8_TRIG_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028ca:	4b47      	ldr	r3, [pc, #284]	@ (80029e8 <DMA2_Stream1_IRQHandler+0x188>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	70da      	strb	r2, [r3, #3]
		TIM8_COM_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028d0:	4b46      	ldr	r3, [pc, #280]	@ (80029ec <DMA2_Stream1_IRQHandler+0x18c>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	70da      	strb	r2, [r3, #3]
		DCMI_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028d6:	4b46      	ldr	r3, [pc, #280]	@ (80029f0 <DMA2_Stream1_IRQHandler+0x190>)
 80028d8:	2201      	movs	r2, #1
 80028da:	70da      	strb	r2, [r3, #3]
		USART6_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 80028dc:	4b45      	ldr	r3, [pc, #276]	@ (80029f4 <DMA2_Stream1_IRQHandler+0x194>)
 80028de:	2201      	movs	r2, #1
 80028e0:	70da      	strb	r2, [r3, #3]
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80028e2:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <DMA2_Stream1_IRQHandler+0x198>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80028e8:	4b3b      	ldr	r3, [pc, #236]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a3a      	ldr	r2, [pc, #232]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f2:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF1)
 80028f4:	4b38      	ldr	r3, [pc, #224]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01d      	beq.n	800293c <DMA2_Stream1_IRQHandler+0xdc>
	{
		ADC3_DMA_Flag.Transfer_Error_Flag = true;
 8002900:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <DMA2_Stream1_IRQHandler+0x17c>)
 8002902:	2201      	movs	r2, #1
 8002904:	709a      	strb	r2, [r3, #2]
		TIM1_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8002906:	4b36      	ldr	r3, [pc, #216]	@ (80029e0 <DMA2_Stream1_IRQHandler+0x180>)
 8002908:	2201      	movs	r2, #1
 800290a:	709a      	strb	r2, [r3, #2]
		TIM8_UP_DMA_Flag.Transfer_Error_Flag = true;
 800290c:	4b35      	ldr	r3, [pc, #212]	@ (80029e4 <DMA2_Stream1_IRQHandler+0x184>)
 800290e:	2201      	movs	r2, #1
 8002910:	709a      	strb	r2, [r3, #2]
		TIM8_TRIG_DMA_Flag.Transfer_Error_Flag = true;
 8002912:	4b35      	ldr	r3, [pc, #212]	@ (80029e8 <DMA2_Stream1_IRQHandler+0x188>)
 8002914:	2201      	movs	r2, #1
 8002916:	709a      	strb	r2, [r3, #2]
		TIM8_COM_DMA_Flag.Transfer_Error_Flag = true;
 8002918:	4b34      	ldr	r3, [pc, #208]	@ (80029ec <DMA2_Stream1_IRQHandler+0x18c>)
 800291a:	2201      	movs	r2, #1
 800291c:	709a      	strb	r2, [r3, #2]
		DCMI_DMA_Flag.Transfer_Error_Flag = true;
 800291e:	4b34      	ldr	r3, [pc, #208]	@ (80029f0 <DMA2_Stream1_IRQHandler+0x190>)
 8002920:	2201      	movs	r2, #1
 8002922:	709a      	strb	r2, [r3, #2]
		USART6_RX_DMA_Flag.Transfer_Error_Flag = true;
 8002924:	4b33      	ldr	r3, [pc, #204]	@ (80029f4 <DMA2_Stream1_IRQHandler+0x194>)
 8002926:	2201      	movs	r2, #1
 8002928:	709a      	strb	r2, [r3, #2]
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 800292a:	4b33      	ldr	r3, [pc, #204]	@ (80029f8 <DMA2_Stream1_IRQHandler+0x198>)
 800292c:	2201      	movs	r2, #1
 800292e:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8002930:	4b29      	ldr	r3, [pc, #164]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a28      	ldr	r2, [pc, #160]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 8002936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293a:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF1)
 800293c:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01d      	beq.n	8002984 <DMA2_Stream1_IRQHandler+0x124>
	{
		ADC3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002948:	4b24      	ldr	r3, [pc, #144]	@ (80029dc <DMA2_Stream1_IRQHandler+0x17c>)
 800294a:	2201      	movs	r2, #1
 800294c:	705a      	strb	r2, [r3, #1]
		TIM1_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800294e:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <DMA2_Stream1_IRQHandler+0x180>)
 8002950:	2201      	movs	r2, #1
 8002952:	705a      	strb	r2, [r3, #1]
		TIM8_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002954:	4b23      	ldr	r3, [pc, #140]	@ (80029e4 <DMA2_Stream1_IRQHandler+0x184>)
 8002956:	2201      	movs	r2, #1
 8002958:	705a      	strb	r2, [r3, #1]
		TIM8_TRIG_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800295a:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <DMA2_Stream1_IRQHandler+0x188>)
 800295c:	2201      	movs	r2, #1
 800295e:	705a      	strb	r2, [r3, #1]
		TIM8_COM_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002960:	4b22      	ldr	r3, [pc, #136]	@ (80029ec <DMA2_Stream1_IRQHandler+0x18c>)
 8002962:	2201      	movs	r2, #1
 8002964:	705a      	strb	r2, [r3, #1]
		DCMI_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <DMA2_Stream1_IRQHandler+0x190>)
 8002968:	2201      	movs	r2, #1
 800296a:	705a      	strb	r2, [r3, #1]
		USART6_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <DMA2_Stream1_IRQHandler+0x194>)
 800296e:	2201      	movs	r2, #1
 8002970:	705a      	strb	r2, [r3, #1]
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8002972:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <DMA2_Stream1_IRQHandler+0x198>)
 8002974:	2201      	movs	r2, #1
 8002976:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8002978:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002982:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF1)
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01d      	beq.n	80029cc <DMA2_Stream1_IRQHandler+0x16c>
	{
		ADC3_DMA_Flag.Transfer_Complete_Flag = true;
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <DMA2_Stream1_IRQHandler+0x17c>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
		TIM1_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <DMA2_Stream1_IRQHandler+0x180>)
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
		TIM8_UP_DMA_Flag.Transfer_Complete_Flag = true;
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <DMA2_Stream1_IRQHandler+0x184>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
		TIM8_TRIG_DMA_Flag.Transfer_Complete_Flag = true;
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <DMA2_Stream1_IRQHandler+0x188>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
		TIM8_COM_DMA_Flag.Transfer_Complete_Flag = true;
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <DMA2_Stream1_IRQHandler+0x18c>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
		DCMI_DMA_Flag.Transfer_Complete_Flag = true;
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <DMA2_Stream1_IRQHandler+0x190>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
		USART6_RX_DMA_Flag.Transfer_Complete_Flag = true;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <DMA2_Stream1_IRQHandler+0x194>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 80029ba:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <DMA2_Stream1_IRQHandler+0x198>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <DMA2_Stream1_IRQHandler+0x178>)
 80029c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029ca:	6093      	str	r3, [r2, #8]
	}
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40026400 	.word	0x40026400
 80029dc:	200002a8 	.word	0x200002a8
 80029e0:	20000198 	.word	0x20000198
 80029e4:	200001c8 	.word	0x200001c8
 80029e8:	200001f0 	.word	0x200001f0
 80029ec:	200001f8 	.word	0x200001f8
 80029f0:	20000290 	.word	0x20000290
 80029f4:	20000170 	.word	0x20000170
 80029f8:	200002f8 	.word	0x200002f8

080029fc <DMA2_Stream2_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream2_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream2_IRQHandler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8002a00:	4b3e      	ldr	r3, [pc, #248]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d011      	beq.n	8002a30 <DMA2_Stream2_IRQHandler+0x34>
	{
		TIM8_CH1_DMA_Flag.Fifo_Error_Flag = true;
 8002a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b00 <DMA2_Stream2_IRQHandler+0x104>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	711a      	strb	r2, [r3, #4]
		USART1_RX_DMA_Flag.Fifo_Error_Flag = true;
 8002a12:	4b3c      	ldr	r3, [pc, #240]	@ (8002b04 <DMA2_Stream2_IRQHandler+0x108>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	711a      	strb	r2, [r3, #4]
		ADC2_DMA_Flag.Fifo_Error_Flag = true;
 8002a18:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <DMA2_Stream2_IRQHandler+0x10c>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	711a      	strb	r2, [r3, #4]
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 8002a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b0c <DMA2_Stream2_IRQHandler+0x110>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8002a24:	4b35      	ldr	r3, [pc, #212]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a34      	ldr	r2, [pc, #208]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8002a30:	4b32      	ldr	r3, [pc, #200]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d011      	beq.n	8002a60 <DMA2_Stream2_IRQHandler+0x64>
	{
		TIM8_CH1_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002a3c:	4b30      	ldr	r3, [pc, #192]	@ (8002b00 <DMA2_Stream2_IRQHandler+0x104>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	70da      	strb	r2, [r3, #3]
		USART1_RX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002a42:	4b30      	ldr	r3, [pc, #192]	@ (8002b04 <DMA2_Stream2_IRQHandler+0x108>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	70da      	strb	r2, [r3, #3]
		ADC2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002a48:	4b2f      	ldr	r3, [pc, #188]	@ (8002b08 <DMA2_Stream2_IRQHandler+0x10c>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b0c <DMA2_Stream2_IRQHandler+0x110>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8002a54:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a28      	ldr	r2, [pc, #160]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8002a60:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d011      	beq.n	8002a90 <DMA2_Stream2_IRQHandler+0x94>
	{
		TIM8_CH1_DMA_Flag.Transfer_Error_Flag = true;
 8002a6c:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <DMA2_Stream2_IRQHandler+0x104>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	709a      	strb	r2, [r3, #2]
		USART1_RX_DMA_Flag.Transfer_Error_Flag = true;
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <DMA2_Stream2_IRQHandler+0x108>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	709a      	strb	r2, [r3, #2]
		ADC2_DMA_Flag.Transfer_Error_Flag = true;
 8002a78:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <DMA2_Stream2_IRQHandler+0x10c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <DMA2_Stream2_IRQHandler+0x110>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a8e:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8002a90:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d011      	beq.n	8002ac0 <DMA2_Stream2_IRQHandler+0xc4>
	{
		TIM8_CH1_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <DMA2_Stream2_IRQHandler+0x104>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	705a      	strb	r2, [r3, #1]
		USART1_RX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002aa2:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <DMA2_Stream2_IRQHandler+0x108>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	705a      	strb	r2, [r3, #1]
		ADC2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002aa8:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <DMA2_Stream2_IRQHandler+0x10c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	705a      	strb	r2, [r3, #1]
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 8002aae:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <DMA2_Stream2_IRQHandler+0x110>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002abe:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d011      	beq.n	8002af0 <DMA2_Stream2_IRQHandler+0xf4>
	{
		TIM8_CH1_DMA_Flag.Transfer_Complete_Flag = true;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <DMA2_Stream2_IRQHandler+0x104>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
		USART1_RX_DMA_Flag.Transfer_Complete_Flag = true;
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <DMA2_Stream2_IRQHandler+0x108>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
		ADC2_DMA_Flag.Transfer_Complete_Flag = true;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <DMA2_Stream2_IRQHandler+0x10c>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <DMA2_Stream2_IRQHandler+0x110>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <DMA2_Stream2_IRQHandler+0x100>)
 8002aea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aee:	6093      	str	r3, [r2, #8]
	}
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40026400 	.word	0x40026400
 8002b00:	200001d0 	.word	0x200001d0
 8002b04:	20000128 	.word	0x20000128
 8002b08:	200002a0 	.word	0x200002a0
 8002b0c:	20000300 	.word	0x20000300

08002b10 <DMA2_Stream3_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream3_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 8002b14:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <DMA2_Stream3_IRQHandler+0x2e>
	{
		SDIO_RXTX_DMA_Flag.Fifo_Error_Flag = true;
 8002b20:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <DMA2_Stream3_IRQHandler+0xe4>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	711a      	strb	r2, [r3, #4]
		SPI1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002b26:	4b34      	ldr	r3, [pc, #208]	@ (8002bf8 <DMA2_Stream3_IRQHandler+0xe8>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	711a      	strb	r2, [r3, #4]
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 8002b2c:	4b33      	ldr	r3, [pc, #204]	@ (8002bfc <DMA2_Stream3_IRQHandler+0xec>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8002b32:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b3c:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <DMA2_Stream3_IRQHandler+0x58>
	{
		SDIO_RXTX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <DMA2_Stream3_IRQHandler+0xe4>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	70da      	strb	r2, [r3, #3]
		SPI1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002b50:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <DMA2_Stream3_IRQHandler+0xe8>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	70da      	strb	r2, [r3, #3]
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8002b56:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <DMA2_Stream3_IRQHandler+0xec>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b66:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8002b68:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <DMA2_Stream3_IRQHandler+0x82>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Error_Flag = true;
 8002b74:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <DMA2_Stream3_IRQHandler+0xe4>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	709a      	strb	r2, [r3, #2]
		SPI1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <DMA2_Stream3_IRQHandler+0xe8>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	709a      	strb	r2, [r3, #2]
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8002b80:	4b1e      	ldr	r3, [pc, #120]	@ (8002bfc <DMA2_Stream3_IRQHandler+0xec>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8002b92:	4b17      	ldr	r3, [pc, #92]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <DMA2_Stream3_IRQHandler+0xac>
	{
		SDIO_RXTX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002b9e:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <DMA2_Stream3_IRQHandler+0xe4>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	705a      	strb	r2, [r3, #1]
		SPI1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	@ (8002bf8 <DMA2_Stream3_IRQHandler+0xe8>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	705a      	strb	r2, [r3, #1]
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <DMA2_Stream3_IRQHandler+0xec>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002bb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bba:	6093      	str	r3, [r2, #8]
	}
	/************************************************************************************************************/
	if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00e      	beq.n	8002be6 <DMA2_Stream3_IRQHandler+0xd6>
	{
		SDIO_RXTX_DMA_Flag.Transfer_Complete_Flag = true;
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <DMA2_Stream3_IRQHandler+0xe4>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
		SPI1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002bce:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <DMA2_Stream3_IRQHandler+0xe8>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <DMA2_Stream3_IRQHandler+0xec>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <DMA2_Stream3_IRQHandler+0xe0>)
 8002be0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002be4:	6093      	str	r3, [r2, #8]
	}
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40026400 	.word	0x40026400
 8002bf4:	20000288 	.word	0x20000288
 8002bf8:	20000110 	.word	0x20000110
 8002bfc:	20000308 	.word	0x20000308

08002c00 <DMA2_Stream4_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream4_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream4_IRQHandler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8002c04:	4b36      	ldr	r3, [pc, #216]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <DMA2_Stream4_IRQHandler+0x2e>
	{
		TIM1_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8002c10:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	711a      	strb	r2, [r3, #4]
		TIM8_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002c16:	4b34      	ldr	r3, [pc, #208]	@ (8002ce8 <DMA2_Stream4_IRQHandler+0xe8>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	711a      	strb	r2, [r3, #4]
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8002c1c:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <DMA2_Stream4_IRQHandler+0xec>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8002c22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4a2e      	ldr	r2, [pc, #184]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00e      	beq.n	8002c58 <DMA2_Stream4_IRQHandler+0x58>
	{
		TIM1_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce4 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	70da      	strb	r2, [r3, #3]
		TIM8_CH2_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002c40:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <DMA2_Stream4_IRQHandler+0xe8>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	70da      	strb	r2, [r3, #3]
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8002c46:	4b29      	ldr	r3, [pc, #164]	@ (8002cec <DMA2_Stream4_IRQHandler+0xec>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002c4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a23      	ldr	r2, [pc, #140]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <DMA2_Stream4_IRQHandler+0x82>
	{
		TIM1_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8002c64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	709a      	strb	r2, [r3, #2]
		TIM8_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <DMA2_Stream4_IRQHandler+0xe8>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	709a      	strb	r2, [r3, #2]
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8002c70:	4b1e      	ldr	r3, [pc, #120]	@ (8002cec <DMA2_Stream4_IRQHandler+0xec>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8002c82:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00e      	beq.n	8002cac <DMA2_Stream4_IRQHandler+0xac>
	{
		TIM1_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <DMA2_Stream4_IRQHandler+0xe4>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	705a      	strb	r2, [r3, #1]
		TIM8_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002c94:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <DMA2_Stream4_IRQHandler+0xe8>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	705a      	strb	r2, [r3, #1]
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8002c9a:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <DMA2_Stream4_IRQHandler+0xec>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002ca6:	f043 0310 	orr.w	r3, r3, #16
 8002caa:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <DMA2_Stream4_IRQHandler+0xd6>
	{
		TIM1_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <DMA2_Stream4_IRQHandler+0xe4>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
		TIM8_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <DMA2_Stream4_IRQHandler+0xe8>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8002cc4:	4b09      	ldr	r3, [pc, #36]	@ (8002cec <DMA2_Stream4_IRQHandler+0xec>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <DMA2_Stream4_IRQHandler+0xe0>)
 8002cd0:	f043 0320 	orr.w	r3, r3, #32
 8002cd4:	60d3      	str	r3, [r2, #12]
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40026400 	.word	0x40026400
 8002ce4:	200001b0 	.word	0x200001b0
 8002ce8:	200001d8 	.word	0x200001d8
 8002cec:	20000310 	.word	0x20000310

08002cf0 <DMA2_Stream5_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream5_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream5_IRQHandler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <DMA2_Stream5_IRQHandler+0x28>
	{
		TIM1_UP_DMA_Flag.Fifo_Error_Flag = true;
 8002d00:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <DMA2_Stream5_IRQHandler+0xc8>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	711a      	strb	r2, [r3, #4]
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8002d06:	4b2d      	ldr	r3, [pc, #180]	@ (8002dbc <DMA2_Stream5_IRQHandler+0xcc>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8002d0c:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a28      	ldr	r2, [pc, #160]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d16:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8002d18:	4b26      	ldr	r3, [pc, #152]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <DMA2_Stream5_IRQHandler+0x4c>
	{
		TIM1_UP_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002d24:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <DMA2_Stream5_IRQHandler+0xc8>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	70da      	strb	r2, [r3, #3]
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8002d2a:	4b24      	ldr	r3, [pc, #144]	@ (8002dbc <DMA2_Stream5_IRQHandler+0xcc>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8002d30:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a1f      	ldr	r2, [pc, #124]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <DMA2_Stream5_IRQHandler+0x70>
	{
		TIM1_UP_DMA_Flag.Transfer_Error_Flag = true;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <DMA2_Stream5_IRQHandler+0xc8>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	709a      	strb	r2, [r3, #2]
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <DMA2_Stream5_IRQHandler+0xcc>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8002d54:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a16      	ldr	r2, [pc, #88]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d5e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8002d60:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <DMA2_Stream5_IRQHandler+0x94>
	{
		TIM1_UP_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <DMA2_Stream5_IRQHandler+0xc8>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	705a      	strb	r2, [r3, #1]
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8002d72:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <DMA2_Stream5_IRQHandler+0xcc>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d82:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <DMA2_Stream5_IRQHandler+0xb8>
	{
		TIM1_UP_DMA_Flag.Transfer_Complete_Flag = true;
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <DMA2_Stream5_IRQHandler+0xc8>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <DMA2_Stream5_IRQHandler+0xcc>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <DMA2_Stream5_IRQHandler+0xc4>)
 8002da2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002da6:	60d3      	str	r3, [r2, #12]
	}
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40026400 	.word	0x40026400
 8002db8:	20000190 	.word	0x20000190
 8002dbc:	20000318 	.word	0x20000318

08002dc0 <DMA2_Stream6_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream6_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8002dc4:	4b45      	ldr	r3, [pc, #276]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d014      	beq.n	8002dfa <DMA2_Stream6_IRQHandler+0x3a>
	{
		TIM1_CH2_DMA_Flag.Fifo_Error_Flag = true;
 8002dd0:	4b43      	ldr	r3, [pc, #268]	@ (8002ee0 <DMA2_Stream6_IRQHandler+0x120>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	711a      	strb	r2, [r3, #4]
		TIM1_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002dd6:	4b43      	ldr	r3, [pc, #268]	@ (8002ee4 <DMA2_Stream6_IRQHandler+0x124>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	711a      	strb	r2, [r3, #4]
		TIM8_CH3_DMA_Flag.Fifo_Error_Flag = true;
 8002ddc:	4b42      	ldr	r3, [pc, #264]	@ (8002ee8 <DMA2_Stream6_IRQHandler+0x128>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	711a      	strb	r2, [r3, #4]
		USART6_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002de2:	4b42      	ldr	r3, [pc, #264]	@ (8002eec <DMA2_Stream6_IRQHandler+0x12c>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	711a      	strb	r2, [r3, #4]
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8002de8:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <DMA2_Stream6_IRQHandler+0x130>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8002dee:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a3a      	ldr	r2, [pc, #232]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df8:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8002dfa:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d014      	beq.n	8002e30 <DMA2_Stream6_IRQHandler+0x70>
	{
		TIM1_CH2_DMA_Flag.Direct_Mode_Error_Flag= true;
 8002e06:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <DMA2_Stream6_IRQHandler+0x120>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	70da      	strb	r2, [r3, #3]
		TIM1_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002e0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <DMA2_Stream6_IRQHandler+0x124>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	70da      	strb	r2, [r3, #3]
		TIM8_CH3_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002e12:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <DMA2_Stream6_IRQHandler+0x128>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	70da      	strb	r2, [r3, #3]
		USART6_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002e18:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <DMA2_Stream6_IRQHandler+0x12c>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	70da      	strb	r2, [r3, #3]
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8002e1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ef0 <DMA2_Stream6_IRQHandler+0x130>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8002e24:	4b2d      	ldr	r3, [pc, #180]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e2e:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8002e30:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d014      	beq.n	8002e66 <DMA2_Stream6_IRQHandler+0xa6>
	{
		TIM1_CH2_DMA_Flag.Transfer_Error_Flag = true;
 8002e3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ee0 <DMA2_Stream6_IRQHandler+0x120>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	709a      	strb	r2, [r3, #2]
		TIM1_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8002e42:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <DMA2_Stream6_IRQHandler+0x124>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	709a      	strb	r2, [r3, #2]
		TIM8_CH3_DMA_Flag.Transfer_Error_Flag = true;
 8002e48:	4b27      	ldr	r3, [pc, #156]	@ (8002ee8 <DMA2_Stream6_IRQHandler+0x128>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	709a      	strb	r2, [r3, #2]
		USART6_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002e4e:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <DMA2_Stream6_IRQHandler+0x12c>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	709a      	strb	r2, [r3, #2]
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8002e54:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <DMA2_Stream6_IRQHandler+0x130>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002e64:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8002e66:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <DMA2_Stream6_IRQHandler+0xdc>
	{
		TIM1_CH2_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <DMA2_Stream6_IRQHandler+0x120>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
		TIM1_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <DMA2_Stream6_IRQHandler+0x124>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	705a      	strb	r2, [r3, #1]
		TIM8_CH3_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <DMA2_Stream6_IRQHandler+0x128>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	705a      	strb	r2, [r3, #1]
		USART6_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <DMA2_Stream6_IRQHandler+0x12c>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8002e8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <DMA2_Stream6_IRQHandler+0x130>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002e90:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a11      	ldr	r2, [pc, #68]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d014      	beq.n	8002ed2 <DMA2_Stream6_IRQHandler+0x112>
	{
		TIM1_CH2_DMA_Flag.Transfer_Complete_Flag = true;
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <DMA2_Stream6_IRQHandler+0x120>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
		TIM1_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8002eae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <DMA2_Stream6_IRQHandler+0x124>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
		TIM8_CH3_DMA_Flag.Transfer_Complete_Flag = true;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <DMA2_Stream6_IRQHandler+0x128>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
		USART6_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <DMA2_Stream6_IRQHandler+0x12c>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <DMA2_Stream6_IRQHandler+0x130>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <DMA2_Stream6_IRQHandler+0x11c>)
 8002ecc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ed0:	60d3      	str	r3, [r2, #12]
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40026400 	.word	0x40026400
 8002ee0:	200001a0 	.word	0x200001a0
 8002ee4:	200001a8 	.word	0x200001a8
 8002ee8:	200001e0 	.word	0x200001e0
 8002eec:	20000178 	.word	0x20000178
 8002ef0:	20000320 	.word	0x20000320

08002ef4 <DMA2_Stream7_IRQHandler>:
 * transfer error, half transfer complete, and transfer complete. For each
 * event, it sets the corresponding flag in the `DMA2_Stream7_Flag` structure
 * and clears the respective interrupt flag in the DMA interrupt flag clear register.
 */
void DMA2_Stream7_IRQHandler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8002ef8:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <DMA2_Stream7_IRQHandler+0x2e>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8002f04:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a32      	ldr	r2, [pc, #200]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f0e:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Fifo_Error_Flag = true;
 8002f10:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <DMA2_Stream7_IRQHandler+0xe4>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	711a      	strb	r2, [r3, #4]
		USART1_TX_DMA_Flag.Fifo_Error_Flag = true;
 8002f16:	4b31      	ldr	r3, [pc, #196]	@ (8002fdc <DMA2_Stream7_IRQHandler+0xe8>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	711a      	strb	r2, [r3, #4]
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <DMA2_Stream7_IRQHandler+0xec>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	711a      	strb	r2, [r3, #4]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8002f22:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00e      	beq.n	8002f4c <DMA2_Stream7_IRQHandler+0x58>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002f2e:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4a28      	ldr	r2, [pc, #160]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f38:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002f3a:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <DMA2_Stream7_IRQHandler+0xe4>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	70da      	strb	r2, [r3, #3]
		USART1_TX_DMA_Flag.Direct_Mode_Error_Flag = true;
 8002f40:	4b26      	ldr	r3, [pc, #152]	@ (8002fdc <DMA2_Stream7_IRQHandler+0xe8>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	70da      	strb	r2, [r3, #3]
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8002f46:	4b26      	ldr	r3, [pc, #152]	@ (8002fe0 <DMA2_Stream7_IRQHandler+0xec>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	70da      	strb	r2, [r3, #3]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8002f4c:	4b21      	ldr	r3, [pc, #132]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <DMA2_Stream7_IRQHandler+0x82>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002f58:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Error_Flag = true;
 8002f64:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd8 <DMA2_Stream7_IRQHandler+0xe4>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	709a      	strb	r2, [r3, #2]
		USART1_TX_DMA_Flag.Transfer_Error_Flag = true;
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <DMA2_Stream7_IRQHandler+0xe8>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	709a      	strb	r2, [r3, #2]
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <DMA2_Stream7_IRQHandler+0xec>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	709a      	strb	r2, [r3, #2]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8002f76:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00e      	beq.n	8002fa0 <DMA2_Stream7_IRQHandler+0xac>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002f82:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a13      	ldr	r2, [pc, #76]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f8c:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002f8e:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <DMA2_Stream7_IRQHandler+0xe4>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	705a      	strb	r2, [r3, #1]
		USART1_TX_DMA_Flag.Half_Transfer_Complete_Flag = true;
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <DMA2_Stream7_IRQHandler+0xe8>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	705a      	strb	r2, [r3, #1]
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <DMA2_Stream7_IRQHandler+0xec>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	705a      	strb	r2, [r3, #1]

	}
	/************************************************************************************************************/
	if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <DMA2_Stream7_IRQHandler+0xd6>
	{
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <DMA2_Stream7_IRQHandler+0xe0>)
 8002fb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fb6:	60d3      	str	r3, [r2, #12]
		TIM8_CH4_DMA_Flag.Transfer_Complete_Flag = true;
 8002fb8:	4b07      	ldr	r3, [pc, #28]	@ (8002fd8 <DMA2_Stream7_IRQHandler+0xe4>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
		USART1_TX_DMA_Flag.Transfer_Complete_Flag = true;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <DMA2_Stream7_IRQHandler+0xe8>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <DMA2_Stream7_IRQHandler+0xec>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]

	}
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40026400 	.word	0x40026400
 8002fd8:	200001e8 	.word	0x200001e8
 8002fdc:	20000130 	.word	0x20000130
 8002fe0:	20000328 	.word	0x20000328

08002fe4 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8003024 <DMA_Clock_Enable+0x40>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d105      	bne.n	8003002 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <DMA_Clock_Enable+0x44>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8003028 <DMA_Clock_Enable+0x44>)
 8002ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a09      	ldr	r2, [pc, #36]	@ (800302c <DMA_Clock_Enable+0x48>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d105      	bne.n	8003018 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <DMA_Clock_Enable+0x44>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	4a05      	ldr	r2, [pc, #20]	@ (8003028 <DMA_Clock_Enable+0x44>)
 8003012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003016:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40026000 	.word	0x40026000
 8003028:	40023800 	.word	0x40023800
 800302c:	40026400 	.word	0x40026400

08003030 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ffd3 	bl	8002fe4 <DMA_Clock_Enable>
    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7a1b      	ldrb	r3, [r3, #8]
 8003048:	065a      	lsls	r2, r3, #25
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	430a      	orrs	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2200      	movs	r2, #0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f000 80f4 	beq.w	80032b2 <DMA_Init+0x282>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2280      	movs	r2, #128	@ 0x80
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	61da      	str	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <DMA_Init+0xc0>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	6959      	ldr	r1, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2210      	movs	r2, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	61da      	str	r2, [r3, #28]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <DMA_Init+0xe4>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f042 0210 	orr.w	r2, r2, #16
 8003112:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2208      	movs	r2, #8
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	61da      	str	r2, [r3, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <DMA_Init+0x108>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f042 0208 	orr.w	r2, r2, #8
 8003136:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2204      	movs	r2, #4
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	61da      	str	r2, [r3, #28]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <DMA_Init+0x12c>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f042 0204 	orr.w	r2, r2, #4
 800315a:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2202      	movs	r2, #2
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	61da      	str	r2, [r3, #28]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <DMA_Init+0x150>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f042 0202 	orr.w	r2, r2, #2
 800317e:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a67      	ldr	r2, [pc, #412]	@ (8003324 <DMA_Init+0x2f4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d147      	bne.n	800321a <DMA_Init+0x1ea>
        {
            if(config->Request.Stream == DMA1_Stream0){
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a66      	ldr	r2, [pc, #408]	@ (8003328 <DMA_Init+0x2f8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <DMA_Init+0x16c>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003194:	200b      	movs	r0, #11
 8003196:	f7fe fd5d 	bl	8001c54 <__NVIC_EnableIRQ>
 800319a:	e08a      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a62      	ldr	r2, [pc, #392]	@ (800332c <DMA_Init+0x2fc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d103      	bne.n	80031ae <DMA_Init+0x17e>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80031a6:	200c      	movs	r0, #12
 80031a8:	f7fe fd54 	bl	8001c54 <__NVIC_EnableIRQ>
 80031ac:	e081      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003330 <DMA_Init+0x300>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d103      	bne.n	80031c0 <DMA_Init+0x190>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80031b8:	200d      	movs	r0, #13
 80031ba:	f7fe fd4b 	bl	8001c54 <__NVIC_EnableIRQ>
 80031be:	e078      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a5b      	ldr	r2, [pc, #364]	@ (8003334 <DMA_Init+0x304>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d103      	bne.n	80031d2 <DMA_Init+0x1a2>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80031ca:	200e      	movs	r0, #14
 80031cc:	f7fe fd42 	bl	8001c54 <__NVIC_EnableIRQ>
 80031d0:	e06f      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a58      	ldr	r2, [pc, #352]	@ (8003338 <DMA_Init+0x308>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <DMA_Init+0x1b4>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80031dc:	200f      	movs	r0, #15
 80031de:	f7fe fd39 	bl	8001c54 <__NVIC_EnableIRQ>
 80031e2:	e066      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a54      	ldr	r2, [pc, #336]	@ (800333c <DMA_Init+0x30c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d103      	bne.n	80031f6 <DMA_Init+0x1c6>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031ee:	2010      	movs	r0, #16
 80031f0:	f7fe fd30 	bl	8001c54 <__NVIC_EnableIRQ>
 80031f4:	e05d      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a51      	ldr	r2, [pc, #324]	@ (8003340 <DMA_Init+0x310>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d103      	bne.n	8003208 <DMA_Init+0x1d8>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003200:	2011      	movs	r0, #17
 8003202:	f7fe fd27 	bl	8001c54 <__NVIC_EnableIRQ>
 8003206:	e054      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a4d      	ldr	r2, [pc, #308]	@ (8003344 <DMA_Init+0x314>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d14f      	bne.n	80032b2 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003212:	202f      	movs	r0, #47	@ 0x2f
 8003214:	f7fe fd1e 	bl	8001c54 <__NVIC_EnableIRQ>
 8003218:	e04b      	b.n	80032b2 <DMA_Init+0x282>
            }
        }
        else if(config->Request.Controller == DMA2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a4a      	ldr	r2, [pc, #296]	@ (8003348 <DMA_Init+0x318>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d146      	bne.n	80032b2 <DMA_Init+0x282>
        {
            if(config->Request.Stream == DMA2_Stream0){
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a48      	ldr	r2, [pc, #288]	@ (800334c <DMA_Init+0x31c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d103      	bne.n	8003236 <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800322e:	2038      	movs	r0, #56	@ 0x38
 8003230:	f7fe fd10 	bl	8001c54 <__NVIC_EnableIRQ>
 8003234:	e03d      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a45      	ldr	r2, [pc, #276]	@ (8003350 <DMA_Init+0x320>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d103      	bne.n	8003248 <DMA_Init+0x218>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003240:	2039      	movs	r0, #57	@ 0x39
 8003242:	f7fe fd07 	bl	8001c54 <__NVIC_EnableIRQ>
 8003246:	e034      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a41      	ldr	r2, [pc, #260]	@ (8003354 <DMA_Init+0x324>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d103      	bne.n	800325a <DMA_Init+0x22a>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003252:	203a      	movs	r0, #58	@ 0x3a
 8003254:	f7fe fcfe 	bl	8001c54 <__NVIC_EnableIRQ>
 8003258:	e02b      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a3e      	ldr	r2, [pc, #248]	@ (8003358 <DMA_Init+0x328>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <DMA_Init+0x23c>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003264:	203b      	movs	r0, #59	@ 0x3b
 8003266:	f7fe fcf5 	bl	8001c54 <__NVIC_EnableIRQ>
 800326a:	e022      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a3a      	ldr	r2, [pc, #232]	@ (800335c <DMA_Init+0x32c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d103      	bne.n	800327e <DMA_Init+0x24e>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003276:	203c      	movs	r0, #60	@ 0x3c
 8003278:	f7fe fcec 	bl	8001c54 <__NVIC_EnableIRQ>
 800327c:	e019      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a37      	ldr	r2, [pc, #220]	@ (8003360 <DMA_Init+0x330>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d103      	bne.n	8003290 <DMA_Init+0x260>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003288:	2044      	movs	r0, #68	@ 0x44
 800328a:	f7fe fce3 	bl	8001c54 <__NVIC_EnableIRQ>
 800328e:	e010      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a33      	ldr	r2, [pc, #204]	@ (8003364 <DMA_Init+0x334>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d103      	bne.n	80032a2 <DMA_Init+0x272>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800329a:	2045      	movs	r0, #69	@ 0x45
 800329c:	f7fe fcda 	bl	8001c54 <__NVIC_EnableIRQ>
 80032a0:	e007      	b.n	80032b2 <DMA_Init+0x282>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4a30      	ldr	r2, [pc, #192]	@ (8003368 <DMA_Init+0x338>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <DMA_Init+0x282>
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80032ac:	2046      	movs	r0, #70	@ 0x46
 80032ae:	f7fe fcd1 	bl	8001c54 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8c1b      	ldrh	r3, [r3, #32]
 80032bc:	4619      	mov	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80032d0:	4619      	mov	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <DMA_Init+0x2c8>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e010      	b.n	800331a <DMA_Init+0x2ea>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2200      	movs	r2, #0
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <DMA_Init+0x2e4>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e002      	b.n	800331a <DMA_Init+0x2ea>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	e000      	b.n	800331c <DMA_Init+0x2ec>
    }

    return 1;  // Return 1 on successful initialization
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40026000 	.word	0x40026000
 8003328:	40026010 	.word	0x40026010
 800332c:	40026028 	.word	0x40026028
 8003330:	40026040 	.word	0x40026040
 8003334:	40026058 	.word	0x40026058
 8003338:	40026070 	.word	0x40026070
 800333c:	40026088 	.word	0x40026088
 8003340:	400260a0 	.word	0x400260a0
 8003344:	400260b8 	.word	0x400260b8
 8003348:	40026400 	.word	0x40026400
 800334c:	40026410 	.word	0x40026410
 8003350:	40026428 	.word	0x40026428
 8003354:	40026440 	.word	0x40026440
 8003358:	40026458 	.word	0x40026458
 800335c:	40026470 	.word	0x40026470
 8003360:	40026488 	.word	0x40026488
 8003364:	400264a0 	.word	0x400264a0
 8003368:	400264b8 	.word	0x400264b8

0800336c <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8003382:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8c1b      	ldrh	r3, [r3, #32]
 80033bc:	4619      	mov	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033ce:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4a43      	ldr	r2, [pc, #268]	@ (800350c <DMA_Set_Trigger+0x124>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <DMA_Set_Trigger+0x24>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	4a42      	ldr	r2, [pc, #264]	@ (8003510 <DMA_Set_Trigger+0x128>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d178      	bne.n	80034fe <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4a41      	ldr	r2, [pc, #260]	@ (8003514 <DMA_Set_Trigger+0x12c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d918      	bls.n	8003446 <DMA_Set_Trigger+0x5e>
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4a40      	ldr	r2, [pc, #256]	@ (8003518 <DMA_Set_Trigger+0x130>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d814      	bhi.n	8003446 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <DMA_Set_Trigger+0x134>)
 8003420:	4413      	add	r3, r2
 8003422:	10db      	asrs	r3, r3, #3
 8003424:	4a3e      	ldr	r2, [pc, #248]	@ (8003520 <DMA_Set_Trigger+0x138>)
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	461a      	mov	r2, r3
 800342c:	4b3d      	ldr	r3, [pc, #244]	@ (8003524 <DMA_Set_Trigger+0x13c>)
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	213f      	movs	r1, #63	@ 0x3f
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	431a      	orrs	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e055      	b.n	80034f2 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4a37      	ldr	r2, [pc, #220]	@ (8003528 <DMA_Set_Trigger+0x140>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d918      	bls.n	8003480 <DMA_Set_Trigger+0x98>
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4a36      	ldr	r2, [pc, #216]	@ (800352c <DMA_Set_Trigger+0x144>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d814      	bhi.n	8003480 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4b35      	ldr	r3, [pc, #212]	@ (8003530 <DMA_Set_Trigger+0x148>)
 800345a:	4413      	add	r3, r2
 800345c:	10db      	asrs	r3, r3, #3
 800345e:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <DMA_Set_Trigger+0x138>)
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	461a      	mov	r2, r3
 8003466:	4b33      	ldr	r3, [pc, #204]	@ (8003534 <DMA_Set_Trigger+0x14c>)
 8003468:	5c9b      	ldrb	r3, [r3, r2]
 800346a:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	213f      	movs	r1, #63	@ 0x3f
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	fa01 f202 	lsl.w	r2, r1, r2
 8003478:	431a      	orrs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	e038      	b.n	80034f2 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <DMA_Set_Trigger+0x150>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d918      	bls.n	80034ba <DMA_Set_Trigger+0xd2>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4a2c      	ldr	r2, [pc, #176]	@ (800353c <DMA_Set_Trigger+0x154>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d814      	bhi.n	80034ba <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <DMA_Set_Trigger+0x158>)
 8003494:	4413      	add	r3, r2
 8003496:	10db      	asrs	r3, r3, #3
 8003498:	4a21      	ldr	r2, [pc, #132]	@ (8003520 <DMA_Set_Trigger+0x138>)
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <DMA_Set_Trigger+0x13c>)
 80034a2:	5c9b      	ldrb	r3, [r3, r2]
 80034a4:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	213f      	movs	r1, #63	@ 0x3f
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	fa01 f202 	lsl.w	r2, r1, r2
 80034b2:	431a      	orrs	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	e01b      	b.n	80034f2 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4a21      	ldr	r2, [pc, #132]	@ (8003544 <DMA_Set_Trigger+0x15c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d917      	bls.n	80034f2 <DMA_Set_Trigger+0x10a>
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4a20      	ldr	r2, [pc, #128]	@ (8003548 <DMA_Set_Trigger+0x160>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d813      	bhi.n	80034f2 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4b1f      	ldr	r3, [pc, #124]	@ (800354c <DMA_Set_Trigger+0x164>)
 80034ce:	4413      	add	r3, r2
 80034d0:	10db      	asrs	r3, r3, #3
 80034d2:	4a13      	ldr	r2, [pc, #76]	@ (8003520 <DMA_Set_Trigger+0x138>)
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	4b16      	ldr	r3, [pc, #88]	@ (8003534 <DMA_Set_Trigger+0x14c>)
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	213f      	movs	r1, #63	@ 0x3f
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f043 0201 	orr.w	r2, r3, #1
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	601a      	str	r2, [r3, #0]
    }
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40026000 	.word	0x40026000
 8003510:	40026400 	.word	0x40026400
 8003514:	4002600f 	.word	0x4002600f
 8003518:	40026058 	.word	0x40026058
 800351c:	bffd9ff0 	.word	0xbffd9ff0
 8003520:	aaaaaaab 	.word	0xaaaaaaab
 8003524:	08005f38 	.word	0x08005f38
 8003528:	4002606f 	.word	0x4002606f
 800352c:	400260b8 	.word	0x400260b8
 8003530:	bffd9f90 	.word	0xbffd9f90
 8003534:	08005f3c 	.word	0x08005f3c
 8003538:	4002640f 	.word	0x4002640f
 800353c:	40026458 	.word	0x40026458
 8003540:	bffd9bf0 	.word	0xbffd9bf0
 8003544:	4002646f 	.word	0x4002646f
 8003548:	400264b8 	.word	0x400264b8
 800354c:	bffd9b90 	.word	0xbffd9b90

08003550 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <GPIO_Clock_Enable+0xa0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d106      	bne.n	800356e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8003560:	4b24      	ldr	r3, [pc, #144]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	4a23      	ldr	r2, [pc, #140]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6313      	str	r3, [r2, #48]	@ 0x30
 800356c:	e039      	b.n	80035e2 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a21      	ldr	r2, [pc, #132]	@ (80035f8 <GPIO_Clock_Enable+0xa8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d106      	bne.n	8003584 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8003576:	4b1f      	ldr	r3, [pc, #124]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	4a1e      	ldr	r2, [pc, #120]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	6313      	str	r3, [r2, #48]	@ 0x30
 8003582:	e02e      	b.n	80035e2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <GPIO_Clock_Enable+0xac>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d106      	bne.n	800359a <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800358c:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6313      	str	r3, [r2, #48]	@ 0x30
 8003598:	e023      	b.n	80035e2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a18      	ldr	r2, [pc, #96]	@ (8003600 <GPIO_Clock_Enable+0xb0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d106      	bne.n	80035b0 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80035a2:	4b14      	ldr	r3, [pc, #80]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a13      	ldr	r2, [pc, #76]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	e018      	b.n	80035e2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a14      	ldr	r2, [pc, #80]	@ (8003604 <GPIO_Clock_Enable+0xb4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d106      	bne.n	80035c6 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80035b8:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	4a0d      	ldr	r2, [pc, #52]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 80035be:	f043 0310 	orr.w	r3, r3, #16
 80035c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c4:	e00d      	b.n	80035e2 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003608 <GPIO_Clock_Enable+0xb8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d106      	bne.n	80035dc <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 80035ce:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a08      	ldr	r2, [pc, #32]	@ (80035f4 <GPIO_Clock_Enable+0xa4>)
 80035d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	e002      	b.n	80035e2 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
 80035e0:	e000      	b.n	80035e4 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40020000 	.word	0x40020000
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020400 	.word	0x40020400
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020c00 	.word	0x40020c00
 8003604:	40021000 	.word	0x40021000
 8003608:	40021c00 	.word	0x40021c00

0800360c <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	4608      	mov	r0, r1
 8003616:	4611      	mov	r1, r2
 8003618:	461a      	mov	r2, r3
 800361a:	4603      	mov	r3, r0
 800361c:	70fb      	strb	r3, [r7, #3]
 800361e:	460b      	mov	r3, r1
 8003620:	70bb      	strb	r3, [r7, #2]
 8003622:	4613      	mov	r3, r2
 8003624:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff92 	bl	8003550 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	78b9      	ldrb	r1, [r7, #2]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	0052      	lsls	r2, r2, #1
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	601a      	str	r2, [r3, #0]

	if(output_type != GPIO_Configuration.Output_Type.None) Port -> OTYPER |= output_type << pin;
 8003640:	2202      	movs	r2, #2
 8003642:	787b      	ldrb	r3, [r7, #1]
 8003644:	4293      	cmp	r3, r2
 8003646:	d008      	beq.n	800365a <GPIO_Pin_Init+0x4e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	7879      	ldrb	r1, [r7, #1]
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	605a      	str	r2, [r3, #4]
	if(speed != GPIO_Configuration.Speed.None) Port -> OSPEEDR |= speed << (pin*2);
 800365a:	2204      	movs	r2, #4
 800365c:	7c3b      	ldrb	r3, [r7, #16]
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <GPIO_Pin_Init+0x6a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	7c39      	ldrb	r1, [r7, #16]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	0052      	lsls	r2, r2, #1
 800366c:	fa01 f202 	lsl.w	r2, r1, r2
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	609a      	str	r2, [r3, #8]
	if(pull != GPIO_Configuration.Pull.None) Port -> PUPDR |= pull << (pin*2);
 8003676:	2204      	movs	r2, #4
 8003678:	7d3b      	ldrb	r3, [r7, #20]
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <GPIO_Pin_Init+0x86>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	7d39      	ldrb	r1, [r7, #20]
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	0052      	lsls	r2, r2, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	2b07      	cmp	r3, #7
 8003696:	d80a      	bhi.n	80036ae <GPIO_Pin_Init+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	7e39      	ldrb	r1, [r7, #24]
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	0092      	lsls	r2, r2, #2
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80036ac:	e00a      	b.n	80036c4 <GPIO_Pin_Init+0xb8>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	7e39      	ldrb	r1, [r7, #24]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	3a08      	subs	r2, #8
 80036b8:	0092      	lsls	r2, r2, #2
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE	void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	ed87 0b02 	vstr	d0, [r7, #8]
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 80036da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036de:	f7fd fa4d 	bl	8000b7c <__aeabi_d2lz>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7fc ff57 	bl	800059c <__aeabi_l2d>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	6839      	ldr	r1, [r7, #0]
 80036f4:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003702:	f7fc fdc1 	bl	8000288 <__aeabi_dsub>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <Get_USART_Instance_Number>:
DMA_Config xUSART_TX[6];

int8_t usart_dma_instance_number;

static int8_t Get_USART_Instance_Number(USART_Config *config)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1) {return 0;}
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <Get_USART_Instance_Number+0x6c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <Get_USART_Instance_Number+0x16>
 800372a:	2300      	movs	r3, #0
 800372c:	e024      	b.n	8003778 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART2) {return 1;}
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a15      	ldr	r2, [pc, #84]	@ (8003788 <Get_USART_Instance_Number+0x70>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <Get_USART_Instance_Number+0x24>
 8003738:	2301      	movs	r3, #1
 800373a:	e01d      	b.n	8003778 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART3) {return 2;}
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a12      	ldr	r2, [pc, #72]	@ (800378c <Get_USART_Instance_Number+0x74>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <Get_USART_Instance_Number+0x32>
 8003746:	2302      	movs	r3, #2
 8003748:	e016      	b.n	8003778 <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART4) {return 3;}
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a10      	ldr	r2, [pc, #64]	@ (8003790 <Get_USART_Instance_Number+0x78>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <Get_USART_Instance_Number+0x40>
 8003754:	2303      	movs	r3, #3
 8003756:	e00f      	b.n	8003778 <Get_USART_Instance_Number+0x60>
	else if(config->Port == UART5) {return 4;}
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0d      	ldr	r2, [pc, #52]	@ (8003794 <Get_USART_Instance_Number+0x7c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <Get_USART_Instance_Number+0x4e>
 8003762:	2304      	movs	r3, #4
 8003764:	e008      	b.n	8003778 <Get_USART_Instance_Number+0x60>
	else if(config->Port == USART6) {return 5;}
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <Get_USART_Instance_Number+0x80>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <Get_USART_Instance_Number+0x5c>
 8003770:	2305      	movs	r3, #5
 8003772:	e001      	b.n	8003778 <Get_USART_Instance_Number+0x60>
	else {return -1;}
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40011000 	.word	0x40011000
 8003788:	40004400 	.word	0x40004400
 800378c:	40004800 	.word	0x40004800
 8003790:	40004c00 	.word	0x40004c00
 8003794:	40005000 	.word	0x40005000
 8003798:	40011400 	.word	0x40011400

0800379c <USART_Config_Reset>:

void USART_Config_Reset(USART_Config *config)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	config->mode = USART_Configuration.Mode.Disable;
 80037a4:	2200      	movs	r2, #0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	721a      	strb	r2, [r3, #8]
	config->hardware_flow = USART_Configuration.Hardware_Flow.Disable;
 80037aa:	2200      	movs	r2, #0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	73da      	strb	r2, [r3, #15]
	config->baudrate = 9600;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80037b6:	605a      	str	r2, [r3, #4]
	config->dma_enable = USART_Configuration.DMA_Enable.RX_Disable | USART_Configuration.DMA_Enable.TX_Disable;
 80037b8:	2200      	movs	r2, #0
 80037ba:	2300      	movs	r3, #0
 80037bc:	4313      	orrs	r3, r2
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	745a      	strb	r2, [r3, #17]
	config->interrupt = USART_Configuration.Interrupt_Type.Disable;
 80037c4:	2300      	movs	r3, #0
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	739a      	strb	r2, [r3, #14]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a27      	ldr	r2, [pc, #156]	@ (8003884 <USART_Clock_Enable+0xac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d106      	bne.n	80037f8 <USART_Clock_Enable+0x20>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80037ea:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <USART_Clock_Enable+0xb0>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4a26      	ldr	r2, [pc, #152]	@ (8003888 <USART_Clock_Enable+0xb0>)
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f6:	e03e      	b.n	8003876 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	@ (800388c <USART_Clock_Enable+0xb4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d106      	bne.n	8003810 <USART_Clock_Enable+0x38>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8003802:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380c:	6413      	str	r3, [r2, #64]	@ 0x40
 800380e:	e032      	b.n	8003876 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1e      	ldr	r2, [pc, #120]	@ (8003890 <USART_Clock_Enable+0xb8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d106      	bne.n	8003828 <USART_Clock_Enable+0x50>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 800381a:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <USART_Clock_Enable+0xb0>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4a1a      	ldr	r2, [pc, #104]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003824:	6413      	str	r3, [r2, #64]	@ 0x40
 8003826:	e026      	b.n	8003876 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART4)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	@ (8003894 <USART_Clock_Enable+0xbc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d106      	bne.n	8003840 <USART_Clock_Enable+0x68>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003838:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800383c:	6413      	str	r3, [r2, #64]	@ 0x40
 800383e:	e01a      	b.n	8003876 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == UART5)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a14      	ldr	r2, [pc, #80]	@ (8003898 <USART_Clock_Enable+0xc0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d106      	bne.n	8003858 <USART_Clock_Enable+0x80>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800384a:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <USART_Clock_Enable+0xb0>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	4a0e      	ldr	r2, [pc, #56]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003850:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003854:	6413      	str	r3, [r2, #64]	@ 0x40
 8003856:	e00e      	b.n	8003876 <USART_Clock_Enable+0x9e>
	}
	else if(config->Port == USART6)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <USART_Clock_Enable+0xc4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d106      	bne.n	8003870 <USART_Clock_Enable+0x98>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8003862:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	4a08      	ldr	r2, [pc, #32]	@ (8003888 <USART_Clock_Enable+0xb0>)
 8003868:	f043 0320 	orr.w	r3, r3, #32
 800386c:	6453      	str	r3, [r2, #68]	@ 0x44
 800386e:	e002      	b.n	8003876 <USART_Clock_Enable+0x9e>
	}
	else
	{
		return -1;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
 8003874:	e000      	b.n	8003878 <USART_Clock_Enable+0xa0>
	}
	return 1;
 8003876:	2301      	movs	r3, #1
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40011000 	.word	0x40011000
 8003888:	40023800 	.word	0x40023800
 800388c:	40004400 	.word	0x40004400
 8003890:	40004800 	.word	0x40004800
 8003894:	40004c00 	.word	0x40004c00
 8003898:	40005000 	.word	0x40005000
 800389c:	40011400 	.word	0x40011400

080038a0 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af04      	add	r7, sp, #16
 80038a6:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4aa0      	ldr	r2, [pc, #640]	@ (8003b30 <PIN_Setup+0x290>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	f040 810d 	bne.w	8003ace <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	7a1b      	ldrb	r3, [r3, #8]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00f      	beq.n	80038de <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7a1b      	ldrb	r3, [r3, #8]
 80038c2:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00a      	beq.n	80038de <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7a1b      	ldrb	r3, [r3, #8]
 80038cc:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d005      	beq.n	80038de <PIN_Setup+0x3e>
		   (config->mode == USART_Configuration.Mode.LIN) )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7a1b      	ldrb	r3, [r3, #8]
 80038d6:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	f040 80be 	bne.w	8003a5a <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	7a5b      	ldrb	r3, [r3, #9]
 80038e2:	2209      	movs	r2, #9
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10f      	bne.n	8003908 <PIN_Setup+0x68>
 80038e8:	2009      	movs	r0, #9
 80038ea:	2402      	movs	r4, #2
 80038ec:	2500      	movs	r5, #0
 80038ee:	2302      	movs	r3, #2
 80038f0:	2200      	movs	r2, #0
 80038f2:	2107      	movs	r1, #7
 80038f4:	9102      	str	r1, [sp, #8]
 80038f6:	9201      	str	r2, [sp, #4]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	462b      	mov	r3, r5
 80038fc:	4622      	mov	r2, r4
 80038fe:	4601      	mov	r1, r0
 8003900:	488c      	ldr	r0, [pc, #560]	@ (8003b34 <PIN_Setup+0x294>)
 8003902:	f7ff fe83 	bl	800360c <GPIO_Pin_Init>
 8003906:	e013      	b.n	8003930 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7a5b      	ldrb	r3, [r3, #9]
 800390c:	2206      	movs	r2, #6
 800390e:	4293      	cmp	r3, r2
 8003910:	d10e      	bne.n	8003930 <PIN_Setup+0x90>
 8003912:	2006      	movs	r0, #6
 8003914:	2402      	movs	r4, #2
 8003916:	2500      	movs	r5, #0
 8003918:	2302      	movs	r3, #2
 800391a:	2200      	movs	r2, #0
 800391c:	2107      	movs	r1, #7
 800391e:	9102      	str	r1, [sp, #8]
 8003920:	9201      	str	r2, [sp, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	462b      	mov	r3, r5
 8003926:	4622      	mov	r2, r4
 8003928:	4601      	mov	r1, r0
 800392a:	4883      	ldr	r0, [pc, #524]	@ (8003b38 <PIN_Setup+0x298>)
 800392c:	f7ff fe6e 	bl	800360c <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7a9b      	ldrb	r3, [r3, #10]
 8003934:	220a      	movs	r2, #10
 8003936:	4293      	cmp	r3, r2
 8003938:	d10f      	bne.n	800395a <PIN_Setup+0xba>
 800393a:	200a      	movs	r0, #10
 800393c:	2402      	movs	r4, #2
 800393e:	2500      	movs	r5, #0
 8003940:	2302      	movs	r3, #2
 8003942:	2200      	movs	r2, #0
 8003944:	2107      	movs	r1, #7
 8003946:	9102      	str	r1, [sp, #8]
 8003948:	9201      	str	r2, [sp, #4]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	462b      	mov	r3, r5
 800394e:	4622      	mov	r2, r4
 8003950:	4601      	mov	r1, r0
 8003952:	4878      	ldr	r0, [pc, #480]	@ (8003b34 <PIN_Setup+0x294>)
 8003954:	f7ff fe5a 	bl	800360c <GPIO_Pin_Init>
 8003958:	e013      	b.n	8003982 <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7a9b      	ldrb	r3, [r3, #10]
 800395e:	2207      	movs	r2, #7
 8003960:	4293      	cmp	r3, r2
 8003962:	d10e      	bne.n	8003982 <PIN_Setup+0xe2>
 8003964:	2007      	movs	r0, #7
 8003966:	2402      	movs	r4, #2
 8003968:	2500      	movs	r5, #0
 800396a:	2302      	movs	r3, #2
 800396c:	2200      	movs	r2, #0
 800396e:	2107      	movs	r1, #7
 8003970:	9102      	str	r1, [sp, #8]
 8003972:	9201      	str	r2, [sp, #4]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	462b      	mov	r3, r5
 8003978:	4622      	mov	r2, r4
 800397a:	4601      	mov	r1, r0
 800397c:	486e      	ldr	r0, [pc, #440]	@ (8003b38 <PIN_Setup+0x298>)
 800397e:	f7ff fe45 	bl	800360c <GPIO_Pin_Init>

			if((config->mode == USART_Configuration.Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	7a1b      	ldrb	r3, [r3, #8]
 8003986:	2202      	movs	r2, #2
 8003988:	4293      	cmp	r3, r2
 800398a:	d113      	bne.n	80039b4 <PIN_Setup+0x114>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7adb      	ldrb	r3, [r3, #11]
 8003990:	2208      	movs	r2, #8
 8003992:	4293      	cmp	r3, r2
 8003994:	d10e      	bne.n	80039b4 <PIN_Setup+0x114>
 8003996:	2008      	movs	r0, #8
 8003998:	2402      	movs	r4, #2
 800399a:	2500      	movs	r5, #0
 800399c:	2302      	movs	r3, #2
 800399e:	2200      	movs	r2, #0
 80039a0:	2107      	movs	r1, #7
 80039a2:	9102      	str	r1, [sp, #8]
 80039a4:	9201      	str	r2, [sp, #4]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	462b      	mov	r3, r5
 80039aa:	4622      	mov	r2, r4
 80039ac:	4601      	mov	r1, r0
 80039ae:	4861      	ldr	r0, [pc, #388]	@ (8003b34 <PIN_Setup+0x294>)
 80039b0:	f7ff fe2c 	bl	800360c <GPIO_Pin_Init>

			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7bdb      	ldrb	r3, [r3, #15]
 80039b8:	2200      	movs	r2, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	f000 83bb 	beq.w	8004136 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7bdb      	ldrb	r3, [r3, #15]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10e      	bne.n	80039e8 <PIN_Setup+0x148>
 80039ca:	200b      	movs	r0, #11
 80039cc:	2402      	movs	r4, #2
 80039ce:	2500      	movs	r5, #0
 80039d0:	2302      	movs	r3, #2
 80039d2:	2200      	movs	r2, #0
 80039d4:	2107      	movs	r1, #7
 80039d6:	9102      	str	r1, [sp, #8]
 80039d8:	9201      	str	r2, [sp, #4]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	462b      	mov	r3, r5
 80039de:	4622      	mov	r2, r4
 80039e0:	4601      	mov	r1, r0
 80039e2:	4854      	ldr	r0, [pc, #336]	@ (8003b34 <PIN_Setup+0x294>)
 80039e4:	f7ff fe12 	bl	800360c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7bdb      	ldrb	r3, [r3, #15]
 80039ec:	2202      	movs	r2, #2
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10e      	bne.n	8003a10 <PIN_Setup+0x170>
 80039f2:	200c      	movs	r0, #12
 80039f4:	2402      	movs	r4, #2
 80039f6:	2500      	movs	r5, #0
 80039f8:	2302      	movs	r3, #2
 80039fa:	2200      	movs	r2, #0
 80039fc:	2107      	movs	r1, #7
 80039fe:	9102      	str	r1, [sp, #8]
 8003a00:	9201      	str	r2, [sp, #4]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	462b      	mov	r3, r5
 8003a06:	4622      	mov	r2, r4
 8003a08:	4601      	mov	r1, r0
 8003a0a:	484a      	ldr	r0, [pc, #296]	@ (8003b34 <PIN_Setup+0x294>)
 8003a0c:	f7ff fdfe 	bl	800360c <GPIO_Pin_Init>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7bdb      	ldrb	r3, [r3, #15]
 8003a14:	2203      	movs	r2, #3
 8003a16:	4293      	cmp	r3, r2
 8003a18:	f040 838d 	bne.w	8004136 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a1c:	200b      	movs	r0, #11
 8003a1e:	2402      	movs	r4, #2
 8003a20:	2500      	movs	r5, #0
 8003a22:	2302      	movs	r3, #2
 8003a24:	2200      	movs	r2, #0
 8003a26:	2107      	movs	r1, #7
 8003a28:	9102      	str	r1, [sp, #8]
 8003a2a:	9201      	str	r2, [sp, #4]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	462b      	mov	r3, r5
 8003a30:	4622      	mov	r2, r4
 8003a32:	4601      	mov	r1, r0
 8003a34:	483f      	ldr	r0, [pc, #252]	@ (8003b34 <PIN_Setup+0x294>)
 8003a36:	f7ff fde9 	bl	800360c <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a3a:	200c      	movs	r0, #12
 8003a3c:	2402      	movs	r4, #2
 8003a3e:	2500      	movs	r5, #0
 8003a40:	2302      	movs	r3, #2
 8003a42:	2200      	movs	r2, #0
 8003a44:	2107      	movs	r1, #7
 8003a46:	9102      	str	r1, [sp, #8]
 8003a48:	9201      	str	r2, [sp, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	4622      	mov	r2, r4
 8003a50:	4601      	mov	r1, r0
 8003a52:	4838      	ldr	r0, [pc, #224]	@ (8003b34 <PIN_Setup+0x294>)
 8003a54:	f7ff fdda 	bl	800360c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003a58:	e36d      	b.n	8004136 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7a1b      	ldrb	r3, [r3, #8]
 8003a5e:	2206      	movs	r2, #6
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00a      	beq.n	8003a7a <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7a1b      	ldrb	r3, [r3, #8]
 8003a68:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d005      	beq.n	8003a7a <PIN_Setup+0x1da>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	7a1b      	ldrb	r3, [r3, #8]
 8003a72:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003a74:	4293      	cmp	r3, r2
 8003a76:	f040 8363 	bne.w	8004140 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7a5b      	ldrb	r3, [r3, #9]
 8003a7e:	2209      	movs	r2, #9
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10e      	bne.n	8003aa2 <PIN_Setup+0x202>
 8003a84:	2009      	movs	r0, #9
 8003a86:	2402      	movs	r4, #2
 8003a88:	2500      	movs	r5, #0
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2107      	movs	r1, #7
 8003a90:	9102      	str	r1, [sp, #8]
 8003a92:	9201      	str	r2, [sp, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	462b      	mov	r3, r5
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4825      	ldr	r0, [pc, #148]	@ (8003b34 <PIN_Setup+0x294>)
 8003a9e:	f7ff fdb5 	bl	800360c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7a1b      	ldrb	r3, [r3, #8]
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	f040 8349 	bne.w	8004140 <PIN_Setup+0x8a0>
 8003aae:	2008      	movs	r0, #8
 8003ab0:	2402      	movs	r4, #2
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2107      	movs	r1, #7
 8003aba:	9102      	str	r1, [sp, #8]
 8003abc:	9201      	str	r2, [sp, #4]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	481b      	ldr	r0, [pc, #108]	@ (8003b34 <PIN_Setup+0x294>)
 8003ac8:	f7ff fda0 	bl	800360c <GPIO_Pin_Init>
//
//		}
//	}


}
 8003acc:	e338      	b.n	8004140 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b3c <PIN_Setup+0x29c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	f040 817b 	bne.w	8003dd0 <PIN_Setup+0x530>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7a1b      	ldrb	r3, [r3, #8]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00f      	beq.n	8003b04 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7a1b      	ldrb	r3, [r3, #8]
 8003ae8:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00a      	beq.n	8003b04 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7a1b      	ldrb	r3, [r3, #8]
 8003af2:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d005      	beq.n	8003b04 <PIN_Setup+0x264>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7a1b      	ldrb	r3, [r3, #8]
 8003afc:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003afe:	4293      	cmp	r3, r2
 8003b00:	f040 80f8 	bne.w	8003cf4 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7a5b      	ldrb	r3, [r3, #9]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d118      	bne.n	8003b40 <PIN_Setup+0x2a0>
 8003b0e:	2002      	movs	r0, #2
 8003b10:	2402      	movs	r4, #2
 8003b12:	2500      	movs	r5, #0
 8003b14:	2302      	movs	r3, #2
 8003b16:	2200      	movs	r2, #0
 8003b18:	2107      	movs	r1, #7
 8003b1a:	9102      	str	r1, [sp, #8]
 8003b1c:	9201      	str	r2, [sp, #4]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	462b      	mov	r3, r5
 8003b22:	4622      	mov	r2, r4
 8003b24:	4601      	mov	r1, r0
 8003b26:	4803      	ldr	r0, [pc, #12]	@ (8003b34 <PIN_Setup+0x294>)
 8003b28:	f7ff fd70 	bl	800360c <GPIO_Pin_Init>
 8003b2c:	e01c      	b.n	8003b68 <PIN_Setup+0x2c8>
 8003b2e:	bf00      	nop
 8003b30:	40011000 	.word	0x40011000
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7a5b      	ldrb	r3, [r3, #9]
 8003b44:	2205      	movs	r2, #5
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10e      	bne.n	8003b68 <PIN_Setup+0x2c8>
 8003b4a:	2005      	movs	r0, #5
 8003b4c:	2402      	movs	r4, #2
 8003b4e:	2500      	movs	r5, #0
 8003b50:	2302      	movs	r3, #2
 8003b52:	2200      	movs	r2, #0
 8003b54:	2107      	movs	r1, #7
 8003b56:	9102      	str	r1, [sp, #8]
 8003b58:	9201      	str	r2, [sp, #4]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	4622      	mov	r2, r4
 8003b60:	4601      	mov	r1, r0
 8003b62:	4899      	ldr	r0, [pc, #612]	@ (8003dc8 <PIN_Setup+0x528>)
 8003b64:	f7ff fd52 	bl	800360c <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7a9b      	ldrb	r3, [r3, #10]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10f      	bne.n	8003b92 <PIN_Setup+0x2f2>
 8003b72:	2003      	movs	r0, #3
 8003b74:	2402      	movs	r4, #2
 8003b76:	2500      	movs	r5, #0
 8003b78:	2302      	movs	r3, #2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2107      	movs	r1, #7
 8003b7e:	9102      	str	r1, [sp, #8]
 8003b80:	9201      	str	r2, [sp, #4]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	462b      	mov	r3, r5
 8003b86:	4622      	mov	r2, r4
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4890      	ldr	r0, [pc, #576]	@ (8003dcc <PIN_Setup+0x52c>)
 8003b8c:	f7ff fd3e 	bl	800360c <GPIO_Pin_Init>
 8003b90:	e013      	b.n	8003bba <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7a9b      	ldrb	r3, [r3, #10]
 8003b96:	2206      	movs	r2, #6
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10e      	bne.n	8003bba <PIN_Setup+0x31a>
 8003b9c:	2006      	movs	r0, #6
 8003b9e:	2402      	movs	r4, #2
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2107      	movs	r1, #7
 8003ba8:	9102      	str	r1, [sp, #8]
 8003baa:	9201      	str	r2, [sp, #4]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	462b      	mov	r3, r5
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	4884      	ldr	r0, [pc, #528]	@ (8003dc8 <PIN_Setup+0x528>)
 8003bb6:	f7ff fd29 	bl	800360c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous)){
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7a1b      	ldrb	r3, [r3, #8]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d128      	bne.n	8003c16 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7adb      	ldrb	r3, [r3, #11]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10f      	bne.n	8003bee <PIN_Setup+0x34e>
 8003bce:	2004      	movs	r0, #4
 8003bd0:	2402      	movs	r4, #2
 8003bd2:	2500      	movs	r5, #0
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2107      	movs	r1, #7
 8003bda:	9102      	str	r1, [sp, #8]
 8003bdc:	9201      	str	r2, [sp, #4]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	462b      	mov	r3, r5
 8003be2:	4622      	mov	r2, r4
 8003be4:	4601      	mov	r1, r0
 8003be6:	4879      	ldr	r0, [pc, #484]	@ (8003dcc <PIN_Setup+0x52c>)
 8003be8:	f7ff fd10 	bl	800360c <GPIO_Pin_Init>
 8003bec:	e013      	b.n	8003c16 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7adb      	ldrb	r3, [r3, #11]
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10e      	bne.n	8003c16 <PIN_Setup+0x376>
 8003bf8:	2007      	movs	r0, #7
 8003bfa:	2402      	movs	r4, #2
 8003bfc:	2500      	movs	r5, #0
 8003bfe:	2302      	movs	r3, #2
 8003c00:	2200      	movs	r2, #0
 8003c02:	2107      	movs	r1, #7
 8003c04:	9102      	str	r1, [sp, #8]
 8003c06:	9201      	str	r2, [sp, #4]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	4622      	mov	r2, r4
 8003c0e:	4601      	mov	r1, r0
 8003c10:	486e      	ldr	r0, [pc, #440]	@ (8003dcc <PIN_Setup+0x52c>)
 8003c12:	f7ff fcfb 	bl	800360c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7bdb      	ldrb	r3, [r3, #15]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d105      	bne.n	8003c2c <PIN_Setup+0x38c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7bdb      	ldrb	r3, [r3, #15]
 8003c24:	2203      	movs	r2, #3
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f040 8287 	bne.w	800413a <PIN_Setup+0x89a>
				if(config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7bdb      	ldrb	r3, [r3, #15]
 8003c30:	2201      	movs	r2, #1
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d128      	bne.n	8003c88 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7adb      	ldrb	r3, [r3, #11]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10f      	bne.n	8003c60 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c40:	2000      	movs	r0, #0
 8003c42:	2402      	movs	r4, #2
 8003c44:	2500      	movs	r5, #0
 8003c46:	2302      	movs	r3, #2
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2107      	movs	r1, #7
 8003c4c:	9102      	str	r1, [sp, #8]
 8003c4e:	9201      	str	r2, [sp, #4]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	462b      	mov	r3, r5
 8003c54:	4622      	mov	r2, r4
 8003c56:	4601      	mov	r1, r0
 8003c58:	485c      	ldr	r0, [pc, #368]	@ (8003dcc <PIN_Setup+0x52c>)
 8003c5a:	f7ff fcd7 	bl	800360c <GPIO_Pin_Init>
 8003c5e:	e013      	b.n	8003c88 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7adb      	ldrb	r3, [r3, #11]
 8003c64:	2203      	movs	r2, #3
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10e      	bne.n	8003c88 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003c6a:	2003      	movs	r0, #3
 8003c6c:	2402      	movs	r4, #2
 8003c6e:	2500      	movs	r5, #0
 8003c70:	2302      	movs	r3, #2
 8003c72:	2200      	movs	r2, #0
 8003c74:	2107      	movs	r1, #7
 8003c76:	9102      	str	r1, [sp, #8]
 8003c78:	9201      	str	r2, [sp, #4]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	4622      	mov	r2, r4
 8003c80:	4601      	mov	r1, r0
 8003c82:	4851      	ldr	r0, [pc, #324]	@ (8003dc8 <PIN_Setup+0x528>)
 8003c84:	f7ff fcc2 	bl	800360c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7bdb      	ldrb	r3, [r3, #15]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d005      	beq.n	8003c9e <PIN_Setup+0x3fe>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7bdb      	ldrb	r3, [r3, #15]
 8003c96:	2203      	movs	r2, #3
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	f040 824e 	bne.w	800413a <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7adb      	ldrb	r3, [r3, #11]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10f      	bne.n	8003cc8 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	2402      	movs	r4, #2
 8003cac:	2500      	movs	r5, #0
 8003cae:	2302      	movs	r3, #2
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2107      	movs	r1, #7
 8003cb4:	9102      	str	r1, [sp, #8]
 8003cb6:	9201      	str	r2, [sp, #4]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	462b      	mov	r3, r5
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	4601      	mov	r1, r0
 8003cc0:	4842      	ldr	r0, [pc, #264]	@ (8003dcc <PIN_Setup+0x52c>)
 8003cc2:	f7ff fca3 	bl	800360c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003cc6:	e238      	b.n	800413a <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7adb      	ldrb	r3, [r3, #11]
 8003ccc:	2204      	movs	r2, #4
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	f040 8233 	bne.w	800413a <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003cd4:	2004      	movs	r0, #4
 8003cd6:	2402      	movs	r4, #2
 8003cd8:	2500      	movs	r5, #0
 8003cda:	2302      	movs	r3, #2
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2107      	movs	r1, #7
 8003ce0:	9102      	str	r1, [sp, #8]
 8003ce2:	9201      	str	r2, [sp, #4]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	4622      	mov	r2, r4
 8003cea:	4601      	mov	r1, r0
 8003cec:	4836      	ldr	r0, [pc, #216]	@ (8003dc8 <PIN_Setup+0x528>)
 8003cee:	f7ff fc8d 	bl	800360c <GPIO_Pin_Init>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003cf2:	e222      	b.n	800413a <PIN_Setup+0x89a>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7a1b      	ldrb	r3, [r3, #8]
 8003cf8:	2206      	movs	r2, #6
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00a      	beq.n	8003d14 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7a1b      	ldrb	r3, [r3, #8]
 8003d02:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d005      	beq.n	8003d14 <PIN_Setup+0x474>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7a1b      	ldrb	r3, [r3, #8]
 8003d0c:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f040 8216 	bne.w	8004140 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7a5b      	ldrb	r3, [r3, #9]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10f      	bne.n	8003d3e <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d1e:	2002      	movs	r0, #2
 8003d20:	2402      	movs	r4, #2
 8003d22:	2500      	movs	r5, #0
 8003d24:	2302      	movs	r3, #2
 8003d26:	2200      	movs	r2, #0
 8003d28:	2107      	movs	r1, #7
 8003d2a:	9102      	str	r1, [sp, #8]
 8003d2c:	9201      	str	r2, [sp, #4]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	462b      	mov	r3, r5
 8003d32:	4622      	mov	r2, r4
 8003d34:	4601      	mov	r1, r0
 8003d36:	4825      	ldr	r0, [pc, #148]	@ (8003dcc <PIN_Setup+0x52c>)
 8003d38:	f7ff fc68 	bl	800360c <GPIO_Pin_Init>
 8003d3c:	e013      	b.n	8003d66 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7a5b      	ldrb	r3, [r3, #9]
 8003d42:	2205      	movs	r2, #5
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10e      	bne.n	8003d66 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d48:	2005      	movs	r0, #5
 8003d4a:	2402      	movs	r4, #2
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	2302      	movs	r3, #2
 8003d50:	2200      	movs	r2, #0
 8003d52:	2107      	movs	r1, #7
 8003d54:	9102      	str	r1, [sp, #8]
 8003d56:	9201      	str	r2, [sp, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4819      	ldr	r0, [pc, #100]	@ (8003dc8 <PIN_Setup+0x528>)
 8003d62:	f7ff fc53 	bl	800360c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.SmartCard_Clock))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7a1b      	ldrb	r3, [r3, #8]
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	f040 81e7 	bne.w	8004140 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7adb      	ldrb	r3, [r3, #11]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10f      	bne.n	8003d9c <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003d7c:	2004      	movs	r0, #4
 8003d7e:	2402      	movs	r4, #2
 8003d80:	2500      	movs	r5, #0
 8003d82:	2302      	movs	r3, #2
 8003d84:	2200      	movs	r2, #0
 8003d86:	2107      	movs	r1, #7
 8003d88:	9102      	str	r1, [sp, #8]
 8003d8a:	9201      	str	r2, [sp, #4]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	462b      	mov	r3, r5
 8003d90:	4622      	mov	r2, r4
 8003d92:	4601      	mov	r1, r0
 8003d94:	480d      	ldr	r0, [pc, #52]	@ (8003dcc <PIN_Setup+0x52c>)
 8003d96:	f7ff fc39 	bl	800360c <GPIO_Pin_Init>
}
 8003d9a:	e1d1      	b.n	8004140 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7adb      	ldrb	r3, [r3, #11]
 8003da0:	2207      	movs	r2, #7
 8003da2:	4293      	cmp	r3, r2
 8003da4:	f040 81cc 	bne.w	8004140 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_2);
 8003da8:	2007      	movs	r0, #7
 8003daa:	2402      	movs	r4, #2
 8003dac:	2500      	movs	r5, #0
 8003dae:	2302      	movs	r3, #2
 8003db0:	2200      	movs	r2, #0
 8003db2:	2107      	movs	r1, #7
 8003db4:	9102      	str	r1, [sp, #8]
 8003db6:	9201      	str	r2, [sp, #4]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	462b      	mov	r3, r5
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	4802      	ldr	r0, [pc, #8]	@ (8003dcc <PIN_Setup+0x52c>)
 8003dc2:	f7ff fc23 	bl	800360c <GPIO_Pin_Init>
}
 8003dc6:	e1bb      	b.n	8004140 <PIN_Setup+0x8a0>
 8003dc8:	40020c00 	.word	0x40020c00
 8003dcc:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4aaa      	ldr	r2, [pc, #680]	@ (8004080 <PIN_Setup+0x7e0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	f040 81b2 	bne.w	8004140 <PIN_Setup+0x8a0>
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7a1b      	ldrb	r3, [r3, #8]
 8003de0:	2201      	movs	r2, #1
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7a1b      	ldrb	r3, [r3, #8]
 8003dea:	2202      	movs	r2, #2
		if((config->mode == USART_Configuration.Mode.Asynchronous) ||
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00a      	beq.n	8003e06 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	7a1b      	ldrb	r3, [r3, #8]
 8003df4:	2204      	movs	r2, #4
		   (config->mode == USART_Configuration.Mode.Synchronous) ||
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d005      	beq.n	8003e06 <PIN_Setup+0x566>
		   (config->mode == USART_Configuration.Mode.LIN) )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7a1b      	ldrb	r3, [r3, #8]
 8003dfe:	2205      	movs	r2, #5
		   (config->mode == USART_Configuration.Mode.IrDA) ||
 8003e00:	4293      	cmp	r3, r2
 8003e02:	f040 8119 	bne.w	8004038 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7a5b      	ldrb	r3, [r3, #9]
 8003e0a:	220b      	movs	r2, #11
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10f      	bne.n	8003e30 <PIN_Setup+0x590>
 8003e10:	200b      	movs	r0, #11
 8003e12:	2402      	movs	r4, #2
 8003e14:	2500      	movs	r5, #0
 8003e16:	2302      	movs	r3, #2
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2107      	movs	r1, #7
 8003e1c:	9102      	str	r1, [sp, #8]
 8003e1e:	9201      	str	r2, [sp, #4]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	462b      	mov	r3, r5
 8003e24:	4622      	mov	r2, r4
 8003e26:	4601      	mov	r1, r0
 8003e28:	4896      	ldr	r0, [pc, #600]	@ (8004084 <PIN_Setup+0x7e4>)
 8003e2a:	f7ff fbef 	bl	800360c <GPIO_Pin_Init>
 8003e2e:	e028      	b.n	8003e82 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7a5b      	ldrb	r3, [r3, #9]
 8003e34:	220a      	movs	r2, #10
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10f      	bne.n	8003e5a <PIN_Setup+0x5ba>
 8003e3a:	200a      	movs	r0, #10
 8003e3c:	2402      	movs	r4, #2
 8003e3e:	2500      	movs	r5, #0
 8003e40:	2302      	movs	r3, #2
 8003e42:	2200      	movs	r2, #0
 8003e44:	2107      	movs	r1, #7
 8003e46:	9102      	str	r1, [sp, #8]
 8003e48:	9201      	str	r2, [sp, #4]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	4622      	mov	r2, r4
 8003e50:	4601      	mov	r1, r0
 8003e52:	488d      	ldr	r0, [pc, #564]	@ (8004088 <PIN_Setup+0x7e8>)
 8003e54:	f7ff fbda 	bl	800360c <GPIO_Pin_Init>
 8003e58:	e013      	b.n	8003e82 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7a5b      	ldrb	r3, [r3, #9]
 8003e5e:	2208      	movs	r2, #8
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10e      	bne.n	8003e82 <PIN_Setup+0x5e2>
 8003e64:	2008      	movs	r0, #8
 8003e66:	2402      	movs	r4, #2
 8003e68:	2500      	movs	r5, #0
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2107      	movs	r1, #7
 8003e70:	9102      	str	r1, [sp, #8]
 8003e72:	9201      	str	r2, [sp, #4]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	462b      	mov	r3, r5
 8003e78:	4622      	mov	r2, r4
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	4882      	ldr	r0, [pc, #520]	@ (8004088 <PIN_Setup+0x7e8>)
 8003e7e:	f7ff fbc5 	bl	800360c <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7a9b      	ldrb	r3, [r3, #10]
 8003e86:	220a      	movs	r2, #10
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10f      	bne.n	8003eac <PIN_Setup+0x60c>
 8003e8c:	200a      	movs	r0, #10
 8003e8e:	2402      	movs	r4, #2
 8003e90:	2500      	movs	r5, #0
 8003e92:	2302      	movs	r3, #2
 8003e94:	2200      	movs	r2, #0
 8003e96:	2107      	movs	r1, #7
 8003e98:	9102      	str	r1, [sp, #8]
 8003e9a:	9201      	str	r2, [sp, #4]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	462b      	mov	r3, r5
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4601      	mov	r1, r0
 8003ea4:	4877      	ldr	r0, [pc, #476]	@ (8004084 <PIN_Setup+0x7e4>)
 8003ea6:	f7ff fbb1 	bl	800360c <GPIO_Pin_Init>
 8003eaa:	e028      	b.n	8003efe <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7a9b      	ldrb	r3, [r3, #10]
 8003eb0:	220b      	movs	r2, #11
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10f      	bne.n	8003ed6 <PIN_Setup+0x636>
 8003eb6:	200b      	movs	r0, #11
 8003eb8:	2402      	movs	r4, #2
 8003eba:	2500      	movs	r5, #0
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2107      	movs	r1, #7
 8003ec2:	9102      	str	r1, [sp, #8]
 8003ec4:	9201      	str	r2, [sp, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	462b      	mov	r3, r5
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4601      	mov	r1, r0
 8003ece:	486e      	ldr	r0, [pc, #440]	@ (8004088 <PIN_Setup+0x7e8>)
 8003ed0:	f7ff fb9c 	bl	800360c <GPIO_Pin_Init>
 8003ed4:	e013      	b.n	8003efe <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7a5b      	ldrb	r3, [r3, #9]
 8003eda:	2208      	movs	r2, #8
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10e      	bne.n	8003efe <PIN_Setup+0x65e>
 8003ee0:	2008      	movs	r0, #8
 8003ee2:	2402      	movs	r4, #2
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2107      	movs	r1, #7
 8003eec:	9102      	str	r1, [sp, #8]
 8003eee:	9201      	str	r2, [sp, #4]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	4863      	ldr	r0, [pc, #396]	@ (8004088 <PIN_Setup+0x7e8>)
 8003efa:	f7ff fb87 	bl	800360c <GPIO_Pin_Init>
			if((config->mode == USART_Configuration.Mode.Synchronous))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7a1b      	ldrb	r3, [r3, #8]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d128      	bne.n	8003f5a <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	7adb      	ldrb	r3, [r3, #11]
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d10f      	bne.n	8003f32 <PIN_Setup+0x692>
 8003f12:	200c      	movs	r0, #12
 8003f14:	2402      	movs	r4, #2
 8003f16:	2500      	movs	r5, #0
 8003f18:	2302      	movs	r3, #2
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2107      	movs	r1, #7
 8003f1e:	9102      	str	r1, [sp, #8]
 8003f20:	9201      	str	r2, [sp, #4]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	462b      	mov	r3, r5
 8003f26:	4622      	mov	r2, r4
 8003f28:	4601      	mov	r1, r0
 8003f2a:	4857      	ldr	r0, [pc, #348]	@ (8004088 <PIN_Setup+0x7e8>)
 8003f2c:	f7ff fb6e 	bl	800360c <GPIO_Pin_Init>
 8003f30:	e013      	b.n	8003f5a <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7adb      	ldrb	r3, [r3, #11]
 8003f36:	220a      	movs	r2, #10
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10e      	bne.n	8003f5a <PIN_Setup+0x6ba>
 8003f3c:	200a      	movs	r0, #10
 8003f3e:	2402      	movs	r4, #2
 8003f40:	2500      	movs	r5, #0
 8003f42:	2302      	movs	r3, #2
 8003f44:	2200      	movs	r2, #0
 8003f46:	2107      	movs	r1, #7
 8003f48:	9102      	str	r1, [sp, #8]
 8003f4a:	9201      	str	r2, [sp, #4]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	462b      	mov	r3, r5
 8003f50:	4622      	mov	r2, r4
 8003f52:	4601      	mov	r1, r0
 8003f54:	484d      	ldr	r0, [pc, #308]	@ (800408c <PIN_Setup+0x7ec>)
 8003f56:	f7ff fb59 	bl	800360c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7bdb      	ldrb	r3, [r3, #15]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4293      	cmp	r3, r2
 8003f62:	f000 80ec 	beq.w	800413e <PIN_Setup+0x89e>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7bdb      	ldrb	r3, [r3, #15]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <PIN_Setup+0x6da>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7bdb      	ldrb	r3, [r3, #15]
 8003f74:	2203      	movs	r2, #3
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d128      	bne.n	8003fcc <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7adb      	ldrb	r3, [r3, #11]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10f      	bne.n	8003fa4 <PIN_Setup+0x704>
 8003f84:	2000      	movs	r0, #0
 8003f86:	2402      	movs	r4, #2
 8003f88:	2500      	movs	r5, #0
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2107      	movs	r1, #7
 8003f90:	9102      	str	r1, [sp, #8]
 8003f92:	9201      	str	r2, [sp, #4]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	462b      	mov	r3, r5
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	483a      	ldr	r0, [pc, #232]	@ (8004088 <PIN_Setup+0x7e8>)
 8003f9e:	f7ff fb35 	bl	800360c <GPIO_Pin_Init>
 8003fa2:	e013      	b.n	8003fcc <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7adb      	ldrb	r3, [r3, #11]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10e      	bne.n	8003fcc <PIN_Setup+0x72c>
 8003fae:	2003      	movs	r0, #3
 8003fb0:	2402      	movs	r4, #2
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2107      	movs	r1, #7
 8003fba:	9102      	str	r1, [sp, #8]
 8003fbc:	9201      	str	r2, [sp, #4]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	4601      	mov	r1, r0
 8003fc6:	4831      	ldr	r0, [pc, #196]	@ (800408c <PIN_Setup+0x7ec>)
 8003fc8:	f7ff fb20 	bl	800360c <GPIO_Pin_Init>
				if((config->hardware_flow == USART_Configuration.Hardware_Flow.RTS_Enable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7bdb      	ldrb	r3, [r3, #15]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d005      	beq.n	8003fe2 <PIN_Setup+0x742>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7bdb      	ldrb	r3, [r3, #15]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f040 80ae 	bne.w	800413e <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7adb      	ldrb	r3, [r3, #11]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10f      	bne.n	800400c <PIN_Setup+0x76c>
 8003fec:	2001      	movs	r0, #1
 8003fee:	2402      	movs	r4, #2
 8003ff0:	2500      	movs	r5, #0
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2107      	movs	r1, #7
 8003ff8:	9102      	str	r1, [sp, #8]
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	462b      	mov	r3, r5
 8004000:	4622      	mov	r2, r4
 8004002:	4601      	mov	r1, r0
 8004004:	4820      	ldr	r0, [pc, #128]	@ (8004088 <PIN_Setup+0x7e8>)
 8004006:	f7ff fb01 	bl	800360c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800400a:	e098      	b.n	800413e <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7adb      	ldrb	r3, [r3, #11]
 8004010:	2204      	movs	r2, #4
 8004012:	4293      	cmp	r3, r2
 8004014:	f040 8093 	bne.w	800413e <PIN_Setup+0x89e>
 8004018:	2004      	movs	r0, #4
 800401a:	2402      	movs	r4, #2
 800401c:	2500      	movs	r5, #0
 800401e:	2302      	movs	r3, #2
 8004020:	2200      	movs	r2, #0
 8004022:	2107      	movs	r1, #7
 8004024:	9102      	str	r1, [sp, #8]
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	462b      	mov	r3, r5
 800402c:	4622      	mov	r2, r4
 800402e:	4601      	mov	r1, r0
 8004030:	4816      	ldr	r0, [pc, #88]	@ (800408c <PIN_Setup+0x7ec>)
 8004032:	f7ff faeb 	bl	800360c <GPIO_Pin_Init>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8004036:	e082      	b.n	800413e <PIN_Setup+0x89e>
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7a1b      	ldrb	r3, [r3, #8]
 800403c:	2206      	movs	r2, #6
 800403e:	4293      	cmp	r3, r2
 8004040:	d009      	beq.n	8004056 <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	7a1b      	ldrb	r3, [r3, #8]
 8004046:	2207      	movs	r2, #7
		else if((config->mode == USART_Configuration.Mode.SmartCard) ||
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <PIN_Setup+0x7b6>
		   (config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7a1b      	ldrb	r3, [r3, #8]
 8004050:	2203      	movs	r2, #3
		   (config->mode == USART_Configuration.Mode.SmartCard_Clock) ||
 8004052:	4293      	cmp	r3, r2
 8004054:	d174      	bne.n	8004140 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7a5b      	ldrb	r3, [r3, #9]
 800405a:	220b      	movs	r2, #11
 800405c:	4293      	cmp	r3, r2
 800405e:	d117      	bne.n	8004090 <PIN_Setup+0x7f0>
 8004060:	200b      	movs	r0, #11
 8004062:	2402      	movs	r4, #2
 8004064:	2500      	movs	r5, #0
 8004066:	2302      	movs	r3, #2
 8004068:	2200      	movs	r2, #0
 800406a:	2107      	movs	r1, #7
 800406c:	9102      	str	r1, [sp, #8]
 800406e:	9201      	str	r2, [sp, #4]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	462b      	mov	r3, r5
 8004074:	4622      	mov	r2, r4
 8004076:	4601      	mov	r1, r0
 8004078:	4802      	ldr	r0, [pc, #8]	@ (8004084 <PIN_Setup+0x7e4>)
 800407a:	f7ff fac7 	bl	800360c <GPIO_Pin_Init>
 800407e:	e030      	b.n	80040e2 <PIN_Setup+0x842>
 8004080:	40004800 	.word	0x40004800
 8004084:	40020000 	.word	0x40020000
 8004088:	40020400 	.word	0x40020400
 800408c:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7a5b      	ldrb	r3, [r3, #9]
 8004094:	220a      	movs	r2, #10
 8004096:	4293      	cmp	r3, r2
 8004098:	d10f      	bne.n	80040ba <PIN_Setup+0x81a>
 800409a:	200a      	movs	r0, #10
 800409c:	2402      	movs	r4, #2
 800409e:	2500      	movs	r5, #0
 80040a0:	2302      	movs	r3, #2
 80040a2:	2200      	movs	r2, #0
 80040a4:	2107      	movs	r1, #7
 80040a6:	9102      	str	r1, [sp, #8]
 80040a8:	9201      	str	r2, [sp, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	462b      	mov	r3, r5
 80040ae:	4622      	mov	r2, r4
 80040b0:	4601      	mov	r1, r0
 80040b2:	4825      	ldr	r0, [pc, #148]	@ (8004148 <PIN_Setup+0x8a8>)
 80040b4:	f7ff faaa 	bl	800360c <GPIO_Pin_Init>
 80040b8:	e013      	b.n	80040e2 <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7a5b      	ldrb	r3, [r3, #9]
 80040be:	2208      	movs	r2, #8
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10e      	bne.n	80040e2 <PIN_Setup+0x842>
 80040c4:	2008      	movs	r0, #8
 80040c6:	2402      	movs	r4, #2
 80040c8:	2500      	movs	r5, #0
 80040ca:	2302      	movs	r3, #2
 80040cc:	2200      	movs	r2, #0
 80040ce:	2107      	movs	r1, #7
 80040d0:	9102      	str	r1, [sp, #8]
 80040d2:	9201      	str	r2, [sp, #4]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	462b      	mov	r3, r5
 80040d8:	4622      	mov	r2, r4
 80040da:	4601      	mov	r1, r0
 80040dc:	481a      	ldr	r0, [pc, #104]	@ (8004148 <PIN_Setup+0x8a8>)
 80040de:	f7ff fa95 	bl	800360c <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	7adb      	ldrb	r3, [r3, #11]
 80040e6:	220c      	movs	r2, #12
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10f      	bne.n	800410c <PIN_Setup+0x86c>
 80040ec:	200c      	movs	r0, #12
 80040ee:	2402      	movs	r4, #2
 80040f0:	2500      	movs	r5, #0
 80040f2:	2302      	movs	r3, #2
 80040f4:	2200      	movs	r2, #0
 80040f6:	2107      	movs	r1, #7
 80040f8:	9102      	str	r1, [sp, #8]
 80040fa:	9201      	str	r2, [sp, #4]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	462b      	mov	r3, r5
 8004100:	4622      	mov	r2, r4
 8004102:	4601      	mov	r1, r0
 8004104:	4810      	ldr	r0, [pc, #64]	@ (8004148 <PIN_Setup+0x8a8>)
 8004106:	f7ff fa81 	bl	800360c <GPIO_Pin_Init>
}
 800410a:	e019      	b.n	8004140 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.USART_3);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7adb      	ldrb	r3, [r3, #11]
 8004110:	220a      	movs	r2, #10
 8004112:	4293      	cmp	r3, r2
 8004114:	d114      	bne.n	8004140 <PIN_Setup+0x8a0>
 8004116:	200a      	movs	r0, #10
 8004118:	2402      	movs	r4, #2
 800411a:	2500      	movs	r5, #0
 800411c:	2302      	movs	r3, #2
 800411e:	2200      	movs	r2, #0
 8004120:	2107      	movs	r1, #7
 8004122:	9102      	str	r1, [sp, #8]
 8004124:	9201      	str	r2, [sp, #4]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	462b      	mov	r3, r5
 800412a:	4622      	mov	r2, r4
 800412c:	4601      	mov	r1, r0
 800412e:	4807      	ldr	r0, [pc, #28]	@ (800414c <PIN_Setup+0x8ac>)
 8004130:	f7ff fa6c 	bl	800360c <GPIO_Pin_Init>
}
 8004134:	e004      	b.n	8004140 <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <PIN_Setup+0x8a0>
			if((config->hardware_flow != USART_Configuration.Hardware_Flow.Disable) || (config->hardware_flow == USART_Configuration.Hardware_Flow.CTS_RTS_Enable))
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <PIN_Setup+0x8a0>
			if(config->hardware_flow != USART_Configuration.Hardware_Flow.Disable)
 800413e:	bf00      	nop
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bdb0      	pop	{r4, r5, r7, pc}
 8004148:	40020400 	.word	0x40020400
 800414c:	40020c00 	.word	0x40020c00

08004150 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b08b      	sub	sp, #44	@ 0x2c
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fb3d 	bl	80037d8 <USART_Clock_Enable>
	PIN_Setup(config);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fb9e 	bl	80038a0 <PIN_Setup>

	usart_dma_instance_number = Get_USART_Instance_Number(config);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fad7 	bl	8003718 <Get_USART_Instance_Number>
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
 800416e:	4bb0      	ldr	r3, [pc, #704]	@ (8004430 <USART_Init+0x2e0>)
 8004170:	701a      	strb	r2, [r3, #0]
	if(usart_dma_instance_number == -1) return -1;
 8004172:	4baf      	ldr	r3, [pc, #700]	@ (8004430 <USART_Init+0x2e0>)
 8004174:	f993 3000 	ldrsb.w	r3, [r3]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d102      	bne.n	8004184 <USART_Init+0x34>
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	e288      	b.n	8004696 <USART_Init+0x546>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f9bb 	bl	8000504 <__aeabi_ui2d>
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4ba8      	ldr	r3, [pc, #672]	@ (8004434 <USART_Init+0x2e4>)
 8004194:	f7fc fa30 	bl	80005f8 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	a1a2      	add	r1, pc, #648	@ (adr r1, 8004428 <USART_Init+0x2d8>)
 800419e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041a2:	f7fc fb53 	bl	800084c <__aeabi_ddiv>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	ed97 0b08 	vldr	d0, [r7, #32]
 80041be:	f7ff fa85 	bl	80036cc <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 80041c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004438 <USART_Init+0x2e8>)
 80041cc:	f7fc fa14 	bl	80005f8 <__aeabi_dmul>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	ec43 2b17 	vmov	d7, r2, r3
 80041d8:	eeb0 0a47 	vmov.f32	s0, s14
 80041dc:	eef0 0a67 	vmov.f32	s1, s15
 80041e0:	f001 fc1e 	bl	8005a20 <ceil>
 80041e4:	ec53 2b10 	vmov	r2, r3, d0
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fc fc9e 	bl	8000b2c <__aeabi_d2iz>
 80041f0:	4603      	mov	r3, r0
 80041f2:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 80041f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80041f8:	eeb0 0a47 	vmov.f32	s0, s14
 80041fc:	eef0 0a67 	vmov.f32	s1, s15
 8004200:	f001 fc0e 	bl	8005a20 <ceil>
 8004204:	ec53 2b10 	vmov	r2, r3, d0
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f7fc fc8e 	bl	8000b2c <__aeabi_d2iz>
 8004210:	4603      	mov	r3, r0
 8004212:	61bb      	str	r3, [r7, #24]

//	config->Port-> CR1 |= USART_CR1_UE;
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	011a      	lsls	r2, r3, #4
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7c9b      	ldrb	r3, [r3, #18]
 800422c:	4619      	mov	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	7b9b      	ldrb	r3, [r3, #14]
 8004240:	4619      	mov	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7c1b      	ldrb	r3, [r3, #16]
 8004254:	4619      	mov	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	611a      	str	r2, [r3, #16]

	if(config->dma_enable == USART_Configuration.DMA_Enable.RX_Enable)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7c5b      	ldrb	r3, [r3, #17]
 8004262:	2202      	movs	r2, #2
 8004264:	4293      	cmp	r3, r2
 8004266:	f040 80f7 	bne.w	8004458 <USART_Init+0x308>
	{
		config -> Port -> CR3 |= USART_CR3_DMAR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004278:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6f      	ldr	r2, [pc, #444]	@ (800443c <USART_Init+0x2ec>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <USART_Init+0x146>
		{
			xUSART_RX[0].Request = DMA_Configuration.Request.USART1_RX;
 8004284:	4a6e      	ldr	r2, [pc, #440]	@ (8004440 <USART_Init+0x2f0>)
 8004286:	4b6f      	ldr	r3, [pc, #444]	@ (8004444 <USART_Init+0x2f4>)
 8004288:	4614      	mov	r4, r2
 800428a:	33c0      	adds	r3, #192	@ 0xc0
 800428c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004294:	e03e      	b.n	8004314 <USART_Init+0x1c4>
		}
		else if(config->Port == USART2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6b      	ldr	r2, [pc, #428]	@ (8004448 <USART_Init+0x2f8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d107      	bne.n	80042b0 <USART_Init+0x160>
		{
			xUSART_RX[1].Request = DMA_Configuration.Request.USART2_RX;
 80042a0:	4b67      	ldr	r3, [pc, #412]	@ (8004440 <USART_Init+0x2f0>)
 80042a2:	4a68      	ldr	r2, [pc, #416]	@ (8004444 <USART_Init+0x2f4>)
 80042a4:	3338      	adds	r3, #56	@ 0x38
 80042a6:	32d8      	adds	r2, #216	@ 0xd8
 80042a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80042aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042ae:	e031      	b.n	8004314 <USART_Init+0x1c4>
		}
		else if(config->Port == USART3)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a65      	ldr	r2, [pc, #404]	@ (800444c <USART_Init+0x2fc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d107      	bne.n	80042ca <USART_Init+0x17a>
		{
			xUSART_RX[2].Request = DMA_Configuration.Request.USART3_RX;
 80042ba:	4b61      	ldr	r3, [pc, #388]	@ (8004440 <USART_Init+0x2f0>)
 80042bc:	4a61      	ldr	r2, [pc, #388]	@ (8004444 <USART_Init+0x2f4>)
 80042be:	3370      	adds	r3, #112	@ 0x70
 80042c0:	32f0      	adds	r2, #240	@ 0xf0
 80042c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80042c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042c8:	e024      	b.n	8004314 <USART_Init+0x1c4>
		}
		else if(config->Port == UART4)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a60      	ldr	r2, [pc, #384]	@ (8004450 <USART_Init+0x300>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <USART_Init+0x196>
		{
			xUSART_RX[3].Request = DMA_Configuration.Request.UART4_RX;
 80042d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004440 <USART_Init+0x2f0>)
 80042d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004444 <USART_Init+0x2f4>)
 80042d8:	33a8      	adds	r3, #168	@ 0xa8
 80042da:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 80042de:	ca07      	ldmia	r2, {r0, r1, r2}
 80042e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042e4:	e016      	b.n	8004314 <USART_Init+0x1c4>
		}
		else if(config->Port == UART5)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004454 <USART_Init+0x304>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <USART_Init+0x1b2>
		{
			xUSART_RX[4].Request = DMA_Configuration.Request.UART5_RX;
 80042f0:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <USART_Init+0x2f0>)
 80042f2:	4a54      	ldr	r2, [pc, #336]	@ (8004444 <USART_Init+0x2f4>)
 80042f4:	33e0      	adds	r3, #224	@ 0xe0
 80042f6:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 80042fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80042fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004300:	e008      	b.n	8004314 <USART_Init+0x1c4>
		}
		else
		{
			xUSART_RX[5].Request = DMA_Configuration.Request.UART6_RX;
 8004302:	4b4f      	ldr	r3, [pc, #316]	@ (8004440 <USART_Init+0x2f0>)
 8004304:	4a4f      	ldr	r2, [pc, #316]	@ (8004444 <USART_Init+0x2f4>)
 8004306:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800430a:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 800430e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_RX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8004314:	4b46      	ldr	r3, [pc, #280]	@ (8004430 <USART_Init+0x2e0>)
 8004316:	f993 3000 	ldrsb.w	r3, [r3]
 800431a:	4618      	mov	r0, r3
 800431c:	2200      	movs	r2, #0
 800431e:	4948      	ldr	r1, [pc, #288]	@ (8004440 <USART_Init+0x2f0>)
 8004320:	4603      	mov	r3, r0
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	1a1b      	subs	r3, r3, r0
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	440b      	add	r3, r1
 800432a:	3318      	adds	r3, #24
 800432c:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800432e:	4b40      	ldr	r3, [pc, #256]	@ (8004430 <USART_Init+0x2e0>)
 8004330:	f993 3000 	ldrsb.w	r3, [r3]
 8004334:	4618      	mov	r0, r3
 8004336:	2200      	movs	r2, #0
 8004338:	4941      	ldr	r1, [pc, #260]	@ (8004440 <USART_Init+0x2f0>)
 800433a:	4603      	mov	r3, r0
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	1a1b      	subs	r3, r3, r0
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	440b      	add	r3, r1
 8004344:	330c      	adds	r3, #12
 8004346:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete | DMA_Configuration.DMA_Interrupts.Transfer_Error;
 8004348:	2210      	movs	r2, #16
 800434a:	2304      	movs	r3, #4
 800434c:	4938      	ldr	r1, [pc, #224]	@ (8004430 <USART_Init+0x2e0>)
 800434e:	f991 1000 	ldrsb.w	r1, [r1]
 8004352:	4608      	mov	r0, r1
 8004354:	431a      	orrs	r2, r3
 8004356:	493a      	ldr	r1, [pc, #232]	@ (8004440 <USART_Init+0x2f0>)
 8004358:	4603      	mov	r3, r0
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	1a1b      	subs	r3, r3, r0
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	331c      	adds	r3, #28
 8004364:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8004366:	4b32      	ldr	r3, [pc, #200]	@ (8004430 <USART_Init+0x2e0>)
 8004368:	f993 3000 	ldrsb.w	r3, [r3]
 800436c:	4618      	mov	r0, r3
 800436e:	2200      	movs	r2, #0
 8004370:	4933      	ldr	r1, [pc, #204]	@ (8004440 <USART_Init+0x2f0>)
 8004372:	4603      	mov	r3, r0
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a1b      	subs	r3, r3, r0
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	3328      	adds	r3, #40	@ 0x28
 800437e:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004380:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <USART_Init+0x2e0>)
 8004382:	f993 3000 	ldrsb.w	r3, [r3]
 8004386:	4618      	mov	r0, r3
 8004388:	2200      	movs	r2, #0
 800438a:	492d      	ldr	r1, [pc, #180]	@ (8004440 <USART_Init+0x2f0>)
 800438c:	4603      	mov	r3, r0
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a1b      	subs	r3, r3, r0
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	440b      	add	r3, r1
 8004396:	3324      	adds	r3, #36	@ 0x24
 8004398:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800439a:	2200      	movs	r2, #0
 800439c:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <USART_Init+0x2e0>)
 800439e:	f993 3000 	ldrsb.w	r3, [r3]
 80043a2:	4619      	mov	r1, r3
 80043a4:	b290      	uxth	r0, r2
 80043a6:	4a26      	ldr	r2, [pc, #152]	@ (8004440 <USART_Init+0x2f0>)
 80043a8:	460b      	mov	r3, r1
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	1a5b      	subs	r3, r3, r1
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	3322      	adds	r3, #34	@ 0x22
 80043b4:	4602      	mov	r2, r0
 80043b6:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Disable;
 80043b8:	2200      	movs	r2, #0
 80043ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <USART_Init+0x2e0>)
 80043bc:	f993 3000 	ldrsb.w	r3, [r3]
 80043c0:	4619      	mov	r1, r3
 80043c2:	b290      	uxth	r0, r2
 80043c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <USART_Init+0x2f0>)
 80043c6:	460b      	mov	r3, r1
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	1a5b      	subs	r3, r3, r1
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	3320      	adds	r3, #32
 80043d2:	4602      	mov	r2, r0
 80043d4:	801a      	strh	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.High;
 80043d6:	4b16      	ldr	r3, [pc, #88]	@ (8004430 <USART_Init+0x2e0>)
 80043d8:	f993 3000 	ldrsb.w	r3, [r3]
 80043dc:	4618      	mov	r0, r3
 80043de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043e2:	4917      	ldr	r1, [pc, #92]	@ (8004440 <USART_Init+0x2f0>)
 80043e4:	4603      	mov	r3, r0
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	1a1b      	subs	r3, r3, r0
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	440b      	add	r3, r1
 80043ee:	3314      	adds	r3, #20
 80043f0:	601a      	str	r2, [r3, #0]
		xUSART_RX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80043f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <USART_Init+0x2e0>)
 80043f4:	f993 3000 	ldrsb.w	r3, [r3]
 80043f8:	4618      	mov	r0, r3
 80043fa:	2200      	movs	r2, #0
 80043fc:	4910      	ldr	r1, [pc, #64]	@ (8004440 <USART_Init+0x2f0>)
 80043fe:	4603      	mov	r3, r0
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	1a1b      	subs	r3, r3, r0
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	440b      	add	r3, r1
 8004408:	3310      	adds	r3, #16
 800440a:	601a      	str	r2, [r3, #0]
		DMA_Init(&xUSART_RX[usart_dma_instance_number]);
 800440c:	4b08      	ldr	r3, [pc, #32]	@ (8004430 <USART_Init+0x2e0>)
 800440e:	f993 3000 	ldrsb.w	r3, [r3]
 8004412:	461a      	mov	r2, r3
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4a08      	ldr	r2, [pc, #32]	@ (8004440 <USART_Init+0x2f0>)
 800441e:	4413      	add	r3, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe fe05 	bl	8003030 <DMA_Init>
 8004426:	e01f      	b.n	8004468 <USART_Init+0x318>
 8004428:	00000000 	.word	0x00000000
 800442c:	41a406f4 	.word	0x41a406f4
 8004430:	200005d0 	.word	0x200005d0
 8004434:	40400000 	.word	0x40400000
 8004438:	40300000 	.word	0x40300000
 800443c:	40011000 	.word	0x40011000
 8004440:	20000330 	.word	0x20000330
 8004444:	08005f40 	.word	0x08005f40
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	40004c00 	.word	0x40004c00
 8004454:	40005000 	.word	0x40005000
	}
	else
	{
		config -> Port  -> CR3 &= ~USART_CR3_DMAR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004466:	615a      	str	r2, [r3, #20]
	}

	if(config->dma_enable == USART_Configuration.DMA_Enable.TX_Enable)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7c5b      	ldrb	r3, [r3, #17]
 800446c:	2201      	movs	r2, #1
 800446e:	4293      	cmp	r3, r2
 8004470:	f040 80de 	bne.w	8004630 <USART_Init+0x4e0>
	{

		config -> Port  -> CR3 |= USART_CR3_DMAT;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004482:	615a      	str	r2, [r3, #20]

		if(config->Port == USART1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a85      	ldr	r2, [pc, #532]	@ (80046a0 <USART_Init+0x550>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <USART_Init+0x350>
		{
			xUSART_TX[0].Request = DMA_Configuration.Request.USART1_TX;
 800448e:	4a85      	ldr	r2, [pc, #532]	@ (80046a4 <USART_Init+0x554>)
 8004490:	4b85      	ldr	r3, [pc, #532]	@ (80046a8 <USART_Init+0x558>)
 8004492:	4614      	mov	r4, r2
 8004494:	33cc      	adds	r3, #204	@ 0xcc
 8004496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800449a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800449e:	e03e      	b.n	800451e <USART_Init+0x3ce>
		}
		else if(config->Port == USART2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a81      	ldr	r2, [pc, #516]	@ (80046ac <USART_Init+0x55c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d107      	bne.n	80044ba <USART_Init+0x36a>
		{
			xUSART_TX[1].Request = DMA_Configuration.Request.USART2_TX;
 80044aa:	4b7e      	ldr	r3, [pc, #504]	@ (80046a4 <USART_Init+0x554>)
 80044ac:	4a7e      	ldr	r2, [pc, #504]	@ (80046a8 <USART_Init+0x558>)
 80044ae:	3338      	adds	r3, #56	@ 0x38
 80044b0:	32e4      	adds	r2, #228	@ 0xe4
 80044b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80044b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044b8:	e031      	b.n	800451e <USART_Init+0x3ce>
		}
		else if(config->Port == USART3)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a7c      	ldr	r2, [pc, #496]	@ (80046b0 <USART_Init+0x560>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d107      	bne.n	80044d4 <USART_Init+0x384>
		{
			xUSART_TX[2].Request = DMA_Configuration.Request.USART3_TX;
 80044c4:	4b77      	ldr	r3, [pc, #476]	@ (80046a4 <USART_Init+0x554>)
 80044c6:	4a78      	ldr	r2, [pc, #480]	@ (80046a8 <USART_Init+0x558>)
 80044c8:	3370      	adds	r3, #112	@ 0x70
 80044ca:	32fc      	adds	r2, #252	@ 0xfc
 80044cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80044ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044d2:	e024      	b.n	800451e <USART_Init+0x3ce>
		}
		else if(config->Port == UART4)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a76      	ldr	r2, [pc, #472]	@ (80046b4 <USART_Init+0x564>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <USART_Init+0x3a0>
		{
			xUSART_TX[3].Request = DMA_Configuration.Request.UART4_TX;
 80044de:	4b71      	ldr	r3, [pc, #452]	@ (80046a4 <USART_Init+0x554>)
 80044e0:	4a71      	ldr	r2, [pc, #452]	@ (80046a8 <USART_Init+0x558>)
 80044e2:	33a8      	adds	r3, #168	@ 0xa8
 80044e4:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 80044e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80044ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044ee:	e016      	b.n	800451e <USART_Init+0x3ce>
		}
		else if(config->Port == UART5)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a70      	ldr	r2, [pc, #448]	@ (80046b8 <USART_Init+0x568>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d108      	bne.n	800450c <USART_Init+0x3bc>
		{
			xUSART_TX[4].Request = DMA_Configuration.Request.UART5_TX;
 80044fa:	4b6a      	ldr	r3, [pc, #424]	@ (80046a4 <USART_Init+0x554>)
 80044fc:	4a6a      	ldr	r2, [pc, #424]	@ (80046a8 <USART_Init+0x558>)
 80044fe:	33e0      	adds	r3, #224	@ 0xe0
 8004500:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8004504:	ca07      	ldmia	r2, {r0, r1, r2}
 8004506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800450a:	e008      	b.n	800451e <USART_Init+0x3ce>
		}
		else
		{
			xUSART_TX[5].Request = DMA_Configuration.Request.UART6_TX;
 800450c:	4b65      	ldr	r3, [pc, #404]	@ (80046a4 <USART_Init+0x554>)
 800450e:	4a66      	ldr	r2, [pc, #408]	@ (80046a8 <USART_Init+0x558>)
 8004510:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004514:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 8004518:	ca07      	ldmia	r2, {r0, r1, r2}
 800451a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		xUSART_TX[usart_dma_instance_number].circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800451e:	4b67      	ldr	r3, [pc, #412]	@ (80046bc <USART_Init+0x56c>)
 8004520:	f993 3000 	ldrsb.w	r3, [r3]
 8004524:	4618      	mov	r0, r3
 8004526:	2200      	movs	r2, #0
 8004528:	495e      	ldr	r1, [pc, #376]	@ (80046a4 <USART_Init+0x554>)
 800452a:	4603      	mov	r3, r0
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	1a1b      	subs	r3, r3, r0
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	440b      	add	r3, r1
 8004534:	3318      	adds	r3, #24
 8004536:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8004538:	4b60      	ldr	r3, [pc, #384]	@ (80046bc <USART_Init+0x56c>)
 800453a:	f993 3000 	ldrsb.w	r3, [r3]
 800453e:	4618      	mov	r0, r3
 8004540:	2200      	movs	r2, #0
 8004542:	4958      	ldr	r1, [pc, #352]	@ (80046a4 <USART_Init+0x554>)
 8004544:	4603      	mov	r3, r0
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	1a1b      	subs	r3, r3, r0
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	330c      	adds	r3, #12
 8004550:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete ;
 8004552:	4b5a      	ldr	r3, [pc, #360]	@ (80046bc <USART_Init+0x56c>)
 8004554:	f993 3000 	ldrsb.w	r3, [r3]
 8004558:	4618      	mov	r0, r3
 800455a:	2210      	movs	r2, #16
 800455c:	4951      	ldr	r1, [pc, #324]	@ (80046a4 <USART_Init+0x554>)
 800455e:	4603      	mov	r3, r0
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	1a1b      	subs	r3, r3, r0
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	331c      	adds	r3, #28
 800456a:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800456c:	4b53      	ldr	r3, [pc, #332]	@ (80046bc <USART_Init+0x56c>)
 800456e:	f993 3000 	ldrsb.w	r3, [r3]
 8004572:	4618      	mov	r0, r3
 8004574:	2200      	movs	r2, #0
 8004576:	494b      	ldr	r1, [pc, #300]	@ (80046a4 <USART_Init+0x554>)
 8004578:	4603      	mov	r3, r0
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	1a1b      	subs	r3, r3, r0
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	440b      	add	r3, r1
 8004582:	3328      	adds	r3, #40	@ 0x28
 8004584:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8004586:	4b4d      	ldr	r3, [pc, #308]	@ (80046bc <USART_Init+0x56c>)
 8004588:	f993 3000 	ldrsb.w	r3, [r3]
 800458c:	4618      	mov	r0, r3
 800458e:	2200      	movs	r2, #0
 8004590:	4944      	ldr	r1, [pc, #272]	@ (80046a4 <USART_Init+0x554>)
 8004592:	4603      	mov	r3, r0
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	1a1b      	subs	r3, r3, r0
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	3324      	adds	r3, #36	@ 0x24
 800459e:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80045a0:	2200      	movs	r2, #0
 80045a2:	4b46      	ldr	r3, [pc, #280]	@ (80046bc <USART_Init+0x56c>)
 80045a4:	f993 3000 	ldrsb.w	r3, [r3]
 80045a8:	4619      	mov	r1, r3
 80045aa:	b290      	uxth	r0, r2
 80045ac:	4a3d      	ldr	r2, [pc, #244]	@ (80046a4 <USART_Init+0x554>)
 80045ae:	460b      	mov	r3, r1
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	1a5b      	subs	r3, r3, r1
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4413      	add	r3, r2
 80045b8:	3322      	adds	r3, #34	@ 0x22
 80045ba:	4602      	mov	r2, r0
 80045bc:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80045be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045c2:	4b3e      	ldr	r3, [pc, #248]	@ (80046bc <USART_Init+0x56c>)
 80045c4:	f993 3000 	ldrsb.w	r3, [r3]
 80045c8:	4619      	mov	r1, r3
 80045ca:	b290      	uxth	r0, r2
 80045cc:	4a35      	ldr	r2, [pc, #212]	@ (80046a4 <USART_Init+0x554>)
 80045ce:	460b      	mov	r3, r1
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a5b      	subs	r3, r3, r1
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	3320      	adds	r3, #32
 80045da:	4602      	mov	r2, r0
 80045dc:	801a      	strh	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].priority_level = DMA_Configuration.Priority_Level.Very_high;
 80045de:	4b37      	ldr	r3, [pc, #220]	@ (80046bc <USART_Init+0x56c>)
 80045e0:	f993 3000 	ldrsb.w	r3, [r3]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80045ea:	492e      	ldr	r1, [pc, #184]	@ (80046a4 <USART_Init+0x554>)
 80045ec:	4603      	mov	r3, r0
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a1b      	subs	r3, r3, r0
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	440b      	add	r3, r1
 80045f6:	3314      	adds	r3, #20
 80045f8:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80045fa:	4b30      	ldr	r3, [pc, #192]	@ (80046bc <USART_Init+0x56c>)
 80045fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004600:	4618      	mov	r0, r3
 8004602:	2240      	movs	r2, #64	@ 0x40
 8004604:	4927      	ldr	r1, [pc, #156]	@ (80046a4 <USART_Init+0x554>)
 8004606:	4603      	mov	r3, r0
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	1a1b      	subs	r3, r3, r0
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	440b      	add	r3, r1
 8004610:	3310      	adds	r3, #16
 8004612:	601a      	str	r2, [r3, #0]
		DMA_Init(&xUSART_TX[usart_dma_instance_number]);
 8004614:	4b29      	ldr	r3, [pc, #164]	@ (80046bc <USART_Init+0x56c>)
 8004616:	f993 3000 	ldrsb.w	r3, [r3]
 800461a:	461a      	mov	r2, r3
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4a1f      	ldr	r2, [pc, #124]	@ (80046a4 <USART_Init+0x554>)
 8004626:	4413      	add	r3, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fd01 	bl	8003030 <DMA_Init>
 800462e:	e007      	b.n	8004640 <USART_Init+0x4f0>
	}
	else
	{
		config -> Port -> CR3 &= ~USART_CR3_DMAR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800463e:	615a      	str	r2, [r3, #20]
	}

	if(config->mode == USART_Configuration.Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7a1b      	ldrb	r3, [r3, #8]
 8004644:	2203      	movs	r2, #3
 8004646:	4293      	cmp	r3, r2
 8004648:	d107      	bne.n	800465a <USART_Init+0x50a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0208 	orr.w	r2, r2, #8
 8004658:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Configuration.Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7a1b      	ldrb	r3, [r3, #8]
 800465e:	2205      	movs	r2, #5
 8004660:	4293      	cmp	r3, r2
 8004662:	d107      	bne.n	8004674 <USART_Init+0x524>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004672:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 020c 	orr.w	r2, r2, #12
 8004682:	60da      	str	r2, [r3, #12]
	config->Port-> CR1 |= USART_CR1_UE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004692:	60da      	str	r2, [r3, #12]

	return 1;
 8004694:	2301      	movs	r3, #1
}
 8004696:	4618      	mov	r0, r3
 8004698:	372c      	adds	r7, #44	@ 0x2c
 800469a:	46bd      	mov	sp, r7
 800469c:	bd90      	pop	{r4, r7, pc}
 800469e:	bf00      	nop
 80046a0:	40011000 	.word	0x40011000
 80046a4:	20000480 	.word	0x20000480
 80046a8:	08005f40 	.word	0x08005f40
 80046ac:	40004400 	.word	0x40004400
 80046b0:	40004800 	.word	0x40004800
 80046b4:	40004c00 	.word	0x40004c00
 80046b8:	40005000 	.word	0x40005000
 80046bc:	200005d0 	.word	0x200005d0

080046c0 <USART_TX_Buffer>:

int8_t USART_TX_Buffer(USART_Config *config, uint8_t *tx_buffer, uint16_t length)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
	if(config->dma_enable |= USART_Configuration.DMA_Enable.TX_Enable)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	7c5b      	ldrb	r3, [r3, #17]
 80046d2:	2201      	movs	r2, #1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	745a      	strb	r2, [r3, #17]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	7c5b      	ldrb	r3, [r3, #17]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80dc 	beq.w	800489e <USART_TX_Buffer+0x1de>
	{
		config -> Port -> SR &= ~USART_SR_TC;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f4:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].memory_address = (uint32_t)tx_buffer;
 80046f6:	4b79      	ldr	r3, [pc, #484]	@ (80048dc <USART_TX_Buffer+0x21c>)
 80046f8:	f993 3000 	ldrsb.w	r3, [r3]
 80046fc:	4618      	mov	r0, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4977      	ldr	r1, [pc, #476]	@ (80048e0 <USART_TX_Buffer+0x220>)
 8004702:	4603      	mov	r3, r0
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	1a1b      	subs	r3, r3, r0
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	440b      	add	r3, r1
 800470c:	3330      	adds	r3, #48	@ 0x30
 800470e:	601a      	str	r2, [r3, #0]
		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&config->Port->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	1d1a      	adds	r2, r3, #4
 8004716:	4b71      	ldr	r3, [pc, #452]	@ (80048dc <USART_TX_Buffer+0x21c>)
 8004718:	f993 3000 	ldrsb.w	r3, [r3]
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	4a6f      	ldr	r2, [pc, #444]	@ (80048e0 <USART_TX_Buffer+0x220>)
 8004722:	460b      	mov	r3, r1
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	1a5b      	subs	r3, r3, r1
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4413      	add	r3, r2
 800472c:	332c      	adds	r3, #44	@ 0x2c
 800472e:	6018      	str	r0, [r3, #0]
//		xUSART_TX[usart_dma_instance_number].peripheral_address = (uint32_t)&USART1->DR;
		xUSART_TX[usart_dma_instance_number].buffer_length = length;
 8004730:	4b6a      	ldr	r3, [pc, #424]	@ (80048dc <USART_TX_Buffer+0x21c>)
 8004732:	f993 3000 	ldrsb.w	r3, [r3]
 8004736:	4619      	mov	r1, r3
 8004738:	4a69      	ldr	r2, [pc, #420]	@ (80048e0 <USART_TX_Buffer+0x220>)
 800473a:	460b      	mov	r3, r1
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	1a5b      	subs	r3, r3, r1
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	3334      	adds	r3, #52	@ 0x34
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	801a      	strh	r2, [r3, #0]
		DMA_Set_Target(&xUSART_TX[usart_dma_instance_number]);
 800474a:	4b64      	ldr	r3, [pc, #400]	@ (80048dc <USART_TX_Buffer+0x21c>)
 800474c:	f993 3000 	ldrsb.w	r3, [r3]
 8004750:	461a      	mov	r2, r3
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4a61      	ldr	r2, [pc, #388]	@ (80048e0 <USART_TX_Buffer+0x220>)
 800475c:	4413      	add	r3, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fe04 	bl	800336c <DMA_Set_Target>
		DMA_Set_Trigger(&xUSART_TX[usart_dma_instance_number]);
 8004764:	4b5d      	ldr	r3, [pc, #372]	@ (80048dc <USART_TX_Buffer+0x21c>)
 8004766:	f993 3000 	ldrsb.w	r3, [r3]
 800476a:	461a      	mov	r2, r3
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4a5a      	ldr	r2, [pc, #360]	@ (80048e0 <USART_TX_Buffer+0x220>)
 8004776:	4413      	add	r3, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fe35 	bl	80033e8 <DMA_Set_Trigger>

		if(config->Port == USART1)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a58      	ldr	r2, [pc, #352]	@ (80048e4 <USART_TX_Buffer+0x224>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d112      	bne.n	80047ae <USART_TX_Buffer+0xee>
		{
			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004788:	e006      	b.n	8004798 <USART_TX_Buffer+0xd8>
			{
				if(USART1_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 800478a:	4b57      	ldr	r3, [pc, #348]	@ (80048e8 <USART_TX_Buffer+0x228>)
 800478c:	789b      	ldrb	r3, [r3, #2]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <USART_TX_Buffer+0xd8>
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	e09c      	b.n	80048d2 <USART_TX_Buffer+0x212>
			while((USART1_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004798:	4b53      	ldr	r3, [pc, #332]	@ (80048e8 <USART_TX_Buffer+0x228>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f083 0301 	eor.w	r3, r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f1      	bne.n	800478a <USART_TX_Buffer+0xca>
			}
			USART1_TX_DMA_Flag.Transfer_Complete_Flag = false;
 80047a6:	4b50      	ldr	r3, [pc, #320]	@ (80048e8 <USART_TX_Buffer+0x228>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e090      	b.n	80048d0 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == USART2)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a4e      	ldr	r2, [pc, #312]	@ (80048ec <USART_TX_Buffer+0x22c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d112      	bne.n	80047de <USART_TX_Buffer+0x11e>
		{
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 80047b8:	e006      	b.n	80047c8 <USART_TX_Buffer+0x108>
			{
				if(USART2_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 80047ba:	4b4d      	ldr	r3, [pc, #308]	@ (80048f0 <USART_TX_Buffer+0x230>)
 80047bc:	789b      	ldrb	r3, [r3, #2]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <USART_TX_Buffer+0x108>
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	e084      	b.n	80048d2 <USART_TX_Buffer+0x212>
			while((USART2_TX_DMA_Flag.Transfer_Complete_Flag == false))
 80047c8:	4b49      	ldr	r3, [pc, #292]	@ (80048f0 <USART_TX_Buffer+0x230>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f1      	bne.n	80047ba <USART_TX_Buffer+0xfa>
			}
			USART2_TX_DMA_Flag.Transfer_Complete_Flag = false;
 80047d6:	4b46      	ldr	r3, [pc, #280]	@ (80048f0 <USART_TX_Buffer+0x230>)
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e078      	b.n	80048d0 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == USART3)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a44      	ldr	r2, [pc, #272]	@ (80048f4 <USART_TX_Buffer+0x234>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d112      	bne.n	800480e <USART_TX_Buffer+0x14e>
		{
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 80047e8:	e006      	b.n	80047f8 <USART_TX_Buffer+0x138>
			{
				if(USART3_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 80047ea:	4b43      	ldr	r3, [pc, #268]	@ (80048f8 <USART_TX_Buffer+0x238>)
 80047ec:	789b      	ldrb	r3, [r3, #2]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <USART_TX_Buffer+0x138>
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	e06c      	b.n	80048d2 <USART_TX_Buffer+0x212>
			while((USART3_TX_DMA_Flag.Transfer_Complete_Flag == false))
 80047f8:	4b3f      	ldr	r3, [pc, #252]	@ (80048f8 <USART_TX_Buffer+0x238>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f083 0301 	eor.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f1      	bne.n	80047ea <USART_TX_Buffer+0x12a>
			}
			USART3_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8004806:	4b3c      	ldr	r3, [pc, #240]	@ (80048f8 <USART_TX_Buffer+0x238>)
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e060      	b.n	80048d0 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == UART4)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a3a      	ldr	r2, [pc, #232]	@ (80048fc <USART_TX_Buffer+0x23c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d112      	bne.n	800483e <USART_TX_Buffer+0x17e>
		{
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004818:	e006      	b.n	8004828 <USART_TX_Buffer+0x168>
			{
				if(USART4_TX_DMA_Flag.Transfer_Error_Flag == true)  {return -1;}
 800481a:	4b39      	ldr	r3, [pc, #228]	@ (8004900 <USART_TX_Buffer+0x240>)
 800481c:	789b      	ldrb	r3, [r3, #2]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <USART_TX_Buffer+0x168>
 8004822:	f04f 33ff 	mov.w	r3, #4294967295
 8004826:	e054      	b.n	80048d2 <USART_TX_Buffer+0x212>
			while((USART4_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004828:	4b35      	ldr	r3, [pc, #212]	@ (8004900 <USART_TX_Buffer+0x240>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f1      	bne.n	800481a <USART_TX_Buffer+0x15a>
			}
			USART4_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8004836:	4b32      	ldr	r3, [pc, #200]	@ (8004900 <USART_TX_Buffer+0x240>)
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e048      	b.n	80048d0 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == UART5)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a30      	ldr	r2, [pc, #192]	@ (8004904 <USART_TX_Buffer+0x244>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d112      	bne.n	800486e <USART_TX_Buffer+0x1ae>
		{
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004848:	e006      	b.n	8004858 <USART_TX_Buffer+0x198>
			{
				if(USART5_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 800484a:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <USART_TX_Buffer+0x248>)
 800484c:	789b      	ldrb	r3, [r3, #2]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <USART_TX_Buffer+0x198>
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	e03c      	b.n	80048d2 <USART_TX_Buffer+0x212>
			while((USART5_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004858:	4b2b      	ldr	r3, [pc, #172]	@ (8004908 <USART_TX_Buffer+0x248>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f083 0301 	eor.w	r3, r3, #1
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f1      	bne.n	800484a <USART_TX_Buffer+0x18a>
			}
			USART5_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8004866:	4b28      	ldr	r3, [pc, #160]	@ (8004908 <USART_TX_Buffer+0x248>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	e030      	b.n	80048d0 <USART_TX_Buffer+0x210>
		}
		else if(config->Port == USART6)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a26      	ldr	r2, [pc, #152]	@ (800490c <USART_TX_Buffer+0x24c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d12b      	bne.n	80048d0 <USART_TX_Buffer+0x210>
		{
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004878:	e006      	b.n	8004888 <USART_TX_Buffer+0x1c8>
			{
				if(USART6_TX_DMA_Flag.Transfer_Error_Flag == true) {return -1;}
 800487a:	4b25      	ldr	r3, [pc, #148]	@ (8004910 <USART_TX_Buffer+0x250>)
 800487c:	789b      	ldrb	r3, [r3, #2]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <USART_TX_Buffer+0x1c8>
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	e024      	b.n	80048d2 <USART_TX_Buffer+0x212>
			while((USART6_TX_DMA_Flag.Transfer_Complete_Flag == false))
 8004888:	4b21      	ldr	r3, [pc, #132]	@ (8004910 <USART_TX_Buffer+0x250>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f083 0301 	eor.w	r3, r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f1      	bne.n	800487a <USART_TX_Buffer+0x1ba>
			}
			USART6_TX_DMA_Flag.Transfer_Complete_Flag = false;
 8004896:	4b1e      	ldr	r3, [pc, #120]	@ (8004910 <USART_TX_Buffer+0x250>)
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e018      	b.n	80048d0 <USART_TX_Buffer+0x210>
		}
	}
	else
	{ //Will Take more time
		for(int i = 0; i <= length; i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e011      	b.n	80048c8 <USART_TX_Buffer+0x208>
		{
			config->Port->DR = tx_buffer[i];
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4413      	add	r3, r2
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
			while(!(config->Port->SR & USART_SR_TXE));
 80048b2:	bf00      	nop
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f8      	beq.n	80048b4 <USART_TX_Buffer+0x1f4>
		for(int i = 0; i <= length; i++)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3301      	adds	r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	dde9      	ble.n	80048a4 <USART_TX_Buffer+0x1e4>
		}
	}

	return 1;
 80048d0:	2301      	movs	r3, #1

}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200005d0 	.word	0x200005d0
 80048e0:	20000480 	.word	0x20000480
 80048e4:	40011000 	.word	0x40011000
 80048e8:	20000130 	.word	0x20000130
 80048ec:	40004400 	.word	0x40004400
 80048f0:	20000140 	.word	0x20000140
 80048f4:	40004800 	.word	0x40004800
 80048f8:	20000150 	.word	0x20000150
 80048fc:	40004c00 	.word	0x40004c00
 8004900:	20000158 	.word	0x20000158
 8004904:	40005000 	.word	0x40005000
 8004908:	20000168 	.word	0x20000168
 800490c:	40011400 	.word	0x40011400
 8004910:	20000178 	.word	0x20000178

08004914 <Joystick_Init>:
#include "Joystick_Device_Driver.h"

Joystick_HAL_Typedef joystick_driver_instance;

void Joystick_Init(uint8_t joystick_instances, float updaterate)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	4603      	mov	r3, r0
 800491c:	ed87 0a00 	vstr	s0, [r7]
 8004920:	71fb      	strb	r3, [r7, #7]
	joystick_driver_instance.number_of_Joystick_Instances = joystick_instances;
 8004922:	4a06      	ldr	r2, [pc, #24]	@ (800493c <Joystick_Init+0x28>)
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	7013      	strb	r3, [r2, #0]
	joystick_driver_instance.update_rate = updaterate;
 8004928:	4a04      	ldr	r2, [pc, #16]	@ (800493c <Joystick_Init+0x28>)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6053      	str	r3, [r2, #4]
	Joystick_HAL_Init(&joystick_driver_instance);
 800492e:	4803      	ldr	r0, [pc, #12]	@ (800493c <Joystick_Init+0x28>)
 8004930:	f000 f82a 	bl	8004988 <Joystick_HAL_Init>
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	200005d4 	.word	0x200005d4

08004940 <Joystick_Read>:


JoystickPosition_t Joystick_Read(uint8_t joystickIndex)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
	JoystickPosition_t position;

    uint16_t rawX = Joystick_HAL_Read_X(joystickIndex);
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f91a 	bl	8004b88 <Joystick_HAL_Read_X>
 8004954:	4603      	mov	r3, r0
 8004956:	82fb      	strh	r3, [r7, #22]
    uint16_t rawY = Joystick_HAL_Read_Y(joystickIndex);
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f92e 	bl	8004bbc <Joystick_HAL_Read_Y>
 8004960:	4603      	mov	r3, r0
 8004962:	82bb      	strh	r3, [r7, #20]
    // Normalize to signed 16-bit range (-32768 to 32767)
//    position.x = (int16_t)(((int32_t)rawX - 2048) * 16);
//    position.y = (int16_t)(((int32_t)rawY - 2048) * 16);

//    // Normalize to signed 16-bit range (-32768 to 32767)
    position.x = rawX;
 8004964:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004968:	81bb      	strh	r3, [r7, #12]
    position.y = rawY;
 800496a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800496e:	81fb      	strh	r3, [r7, #14]

    return position;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	461a      	mov	r2, r3
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	6010      	str	r0, [r2, #0]
 800497c:	889b      	ldrh	r3, [r3, #4]
 800497e:	8093      	strh	r3, [r2, #4]
}
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <Joystick_HAL_Init>:
#define Joystick_Buffer_Size 2*MAX_JOYSTICK_INSTANCES

uint16_t Joystick_Data_Buffer[Joystick_Buffer_Size];

void Joystick_HAL_Init(Joystick_HAL_Typedef *instance)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	if(instance ->number_of_Joystick_Instances == 1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d112      	bne.n	80049be <Joystick_HAL_Init+0x36>
	{
		Joystick.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004998:	2201      	movs	r2, #1
 800499a:	4b78      	ldr	r3, [pc, #480]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 800499c:	729a      	strb	r2, [r3, #10]
		Joystick.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 800499e:	2200      	movs	r2, #0
 80049a0:	4b76      	ldr	r3, [pc, #472]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049a2:	731a      	strb	r2, [r3, #12]
		Joystick.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 80049a4:	2200      	movs	r2, #0
 80049a6:	4b75      	ldr	r3, [pc, #468]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049a8:	72da      	strb	r2, [r3, #11]

		Joystick.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 80049aa:	2201      	movs	r2, #1
 80049ac:	4b73      	ldr	r3, [pc, #460]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049ae:	735a      	strb	r2, [r3, #13]
		Joystick.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 80049b0:	2200      	movs	r2, #0
 80049b2:	4b72      	ldr	r3, [pc, #456]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049b4:	73da      	strb	r2, [r3, #15]
		Joystick.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 80049b6:	2201      	movs	r2, #1
 80049b8:	4b70      	ldr	r3, [pc, #448]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049ba:	739a      	strb	r2, [r3, #14]
 80049bc:	e0b1      	b.n	8004b22 <Joystick_HAL_Init+0x19a>
	}
	else if(instance ->number_of_Joystick_Instances == 2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d124      	bne.n	8004a10 <Joystick_HAL_Init+0x88>
	{
		Joystick.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 80049c6:	2201      	movs	r2, #1
 80049c8:	4b6c      	ldr	r3, [pc, #432]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049ca:	729a      	strb	r2, [r3, #10]
		Joystick.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 80049cc:	2200      	movs	r2, #0
 80049ce:	4b6b      	ldr	r3, [pc, #428]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049d0:	731a      	strb	r2, [r3, #12]
		Joystick.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 80049d2:	2200      	movs	r2, #0
 80049d4:	4b69      	ldr	r3, [pc, #420]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049d6:	72da      	strb	r2, [r3, #11]

		Joystick.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 80049d8:	2201      	movs	r2, #1
 80049da:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049dc:	735a      	strb	r2, [r3, #13]
		Joystick.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 80049de:	2200      	movs	r2, #0
 80049e0:	4b66      	ldr	r3, [pc, #408]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049e2:	73da      	strb	r2, [r3, #15]
		Joystick.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 80049e4:	2201      	movs	r2, #1
 80049e6:	4b65      	ldr	r3, [pc, #404]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049e8:	739a      	strb	r2, [r3, #14]

		Joystick.Channel_2.Enable = ADC_Configuration.Channel.Enable.Enable;
 80049ea:	2201      	movs	r2, #1
 80049ec:	4b63      	ldr	r3, [pc, #396]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049ee:	741a      	strb	r2, [r3, #16]
		Joystick.Channel_2.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 80049f0:	2200      	movs	r2, #0
 80049f2:	4b62      	ldr	r3, [pc, #392]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049f4:	749a      	strb	r2, [r3, #18]
		Joystick.Channel_2.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_3;
 80049f6:	2202      	movs	r2, #2
 80049f8:	4b60      	ldr	r3, [pc, #384]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 80049fa:	745a      	strb	r2, [r3, #17]

		Joystick.Channel_3.Enable = ADC_Configuration.Channel.Enable.Enable;
 80049fc:	2201      	movs	r2, #1
 80049fe:	4b5f      	ldr	r3, [pc, #380]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a00:	74da      	strb	r2, [r3, #19]
		Joystick.Channel_3.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a02:	2200      	movs	r2, #0
 8004a04:	4b5d      	ldr	r3, [pc, #372]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a06:	755a      	strb	r2, [r3, #21]
		Joystick.Channel_3.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_4;
 8004a08:	2203      	movs	r2, #3
 8004a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a0c:	751a      	strb	r2, [r3, #20]
 8004a0e:	e088      	b.n	8004b22 <Joystick_HAL_Init+0x19a>
	}
	else if(instance ->number_of_Joystick_Instances == 3)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d136      	bne.n	8004a86 <Joystick_HAL_Init+0xfe>
	{
		Joystick.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4b58      	ldr	r3, [pc, #352]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a1c:	729a      	strb	r2, [r3, #10]
		Joystick.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4b56      	ldr	r3, [pc, #344]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a22:	731a      	strb	r2, [r3, #12]
		Joystick.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 8004a24:	2200      	movs	r2, #0
 8004a26:	4b55      	ldr	r3, [pc, #340]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a28:	72da      	strb	r2, [r3, #11]

		Joystick.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4b53      	ldr	r3, [pc, #332]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a2e:	735a      	strb	r2, [r3, #13]
		Joystick.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a30:	2200      	movs	r2, #0
 8004a32:	4b52      	ldr	r3, [pc, #328]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a34:	73da      	strb	r2, [r3, #15]
		Joystick.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 8004a36:	2201      	movs	r2, #1
 8004a38:	4b50      	ldr	r3, [pc, #320]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a3a:	739a      	strb	r2, [r3, #14]

		Joystick.Channel_2.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a40:	741a      	strb	r2, [r3, #16]
		Joystick.Channel_2.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a42:	2200      	movs	r2, #0
 8004a44:	4b4d      	ldr	r3, [pc, #308]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a46:	749a      	strb	r2, [r3, #18]
		Joystick.Channel_2.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_3;
 8004a48:	2202      	movs	r2, #2
 8004a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a4c:	745a      	strb	r2, [r3, #17]

		Joystick.Channel_3.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4b4a      	ldr	r3, [pc, #296]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a52:	74da      	strb	r2, [r3, #19]
		Joystick.Channel_3.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a54:	2200      	movs	r2, #0
 8004a56:	4b49      	ldr	r3, [pc, #292]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a58:	755a      	strb	r2, [r3, #21]
		Joystick.Channel_3.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_4;
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4b47      	ldr	r3, [pc, #284]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a5e:	751a      	strb	r2, [r3, #20]

		Joystick.Channel_4.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004a60:	2201      	movs	r2, #1
 8004a62:	4b46      	ldr	r3, [pc, #280]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a64:	759a      	strb	r2, [r3, #22]
		Joystick.Channel_4.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a66:	2200      	movs	r2, #0
 8004a68:	4b44      	ldr	r3, [pc, #272]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a6a:	761a      	strb	r2, [r3, #24]
		Joystick.Channel_4.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_5;
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4b43      	ldr	r3, [pc, #268]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a70:	75da      	strb	r2, [r3, #23]

		Joystick.Channel_5.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004a72:	2201      	movs	r2, #1
 8004a74:	4b41      	ldr	r3, [pc, #260]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a76:	765a      	strb	r2, [r3, #25]
		Joystick.Channel_5.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4b40      	ldr	r3, [pc, #256]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a7c:	76da      	strb	r2, [r3, #27]
		Joystick.Channel_5.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_6;
 8004a7e:	2205      	movs	r2, #5
 8004a80:	4b3e      	ldr	r3, [pc, #248]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a82:	769a      	strb	r2, [r3, #26]
 8004a84:	e04d      	b.n	8004b22 <Joystick_HAL_Init+0x19a>
	}
	else if(instance ->number_of_Joystick_Instances == MAX_JOYSTICK_INSTANCES)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d149      	bne.n	8004b22 <Joystick_HAL_Init+0x19a>
	{
		Joystick.Channel_0.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004a8e:	2201      	movs	r2, #1
 8004a90:	4b3a      	ldr	r3, [pc, #232]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a92:	729a      	strb	r2, [r3, #10]
		Joystick.Channel_0.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004a94:	2200      	movs	r2, #0
 8004a96:	4b39      	ldr	r3, [pc, #228]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a98:	731a      	strb	r2, [r3, #12]
		Joystick.Channel_0.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_1;
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004a9e:	72da      	strb	r2, [r3, #11]

		Joystick.Channel_1.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	4b36      	ldr	r3, [pc, #216]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004aa4:	735a      	strb	r2, [r3, #13]
		Joystick.Channel_1.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	4b34      	ldr	r3, [pc, #208]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004aaa:	73da      	strb	r2, [r3, #15]
		Joystick.Channel_1.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_2;
 8004aac:	2201      	movs	r2, #1
 8004aae:	4b33      	ldr	r3, [pc, #204]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ab0:	739a      	strb	r2, [r3, #14]

		Joystick.Channel_2.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	4b31      	ldr	r3, [pc, #196]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ab6:	741a      	strb	r2, [r3, #16]
		Joystick.Channel_2.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4b30      	ldr	r3, [pc, #192]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004abc:	749a      	strb	r2, [r3, #18]
		Joystick.Channel_2.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_3;
 8004abe:	2202      	movs	r2, #2
 8004ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ac2:	745a      	strb	r2, [r3, #17]

		Joystick.Channel_3.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ac8:	74da      	strb	r2, [r3, #19]
		Joystick.Channel_3.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004aca:	2200      	movs	r2, #0
 8004acc:	4b2b      	ldr	r3, [pc, #172]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ace:	755a      	strb	r2, [r3, #21]
		Joystick.Channel_3.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_4;
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ad4:	751a      	strb	r2, [r3, #20]

		Joystick.Channel_4.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4b28      	ldr	r3, [pc, #160]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ada:	759a      	strb	r2, [r3, #22]
		Joystick.Channel_4.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004adc:	2200      	movs	r2, #0
 8004ade:	4b27      	ldr	r3, [pc, #156]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ae0:	761a      	strb	r2, [r3, #24]
		Joystick.Channel_4.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_5;
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	4b25      	ldr	r3, [pc, #148]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004ae6:	75da      	strb	r2, [r3, #23]

		Joystick.Channel_5.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4b24      	ldr	r3, [pc, #144]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004aec:	765a      	strb	r2, [r3, #25]
		Joystick.Channel_5.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004aee:	2200      	movs	r2, #0
 8004af0:	4b22      	ldr	r3, [pc, #136]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004af2:	76da      	strb	r2, [r3, #27]
		Joystick.Channel_5.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_6;
 8004af4:	2205      	movs	r2, #5
 8004af6:	4b21      	ldr	r3, [pc, #132]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004af8:	769a      	strb	r2, [r3, #26]

		Joystick.Channel_6.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004afa:	2201      	movs	r2, #1
 8004afc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004afe:	771a      	strb	r2, [r3, #28]
		Joystick.Channel_6.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004b00:	2200      	movs	r2, #0
 8004b02:	4b1e      	ldr	r3, [pc, #120]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b04:	779a      	strb	r2, [r3, #30]
		Joystick.Channel_6.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_7;
 8004b06:	2206      	movs	r2, #6
 8004b08:	4b1c      	ldr	r3, [pc, #112]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b0a:	775a      	strb	r2, [r3, #29]

		Joystick.Channel_7.Enable = ADC_Configuration.Channel.Enable.Enable;
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b10:	77da      	strb	r2, [r3, #31]
		Joystick.Channel_7.Sample_Time = ADC_Configuration.Channel.Sample_Time._3_Cycles;
 8004b12:	2200      	movs	r2, #0
 8004b14:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		Joystick.Channel_7.Sequence_Number = ADC_Configuration.Channel.Sequence_Number.Sequence_8;
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	4b17      	ldr	r3, [pc, #92]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b1e:	f883 2020 	strb.w	r2, [r3, #32]
	}

	Joystick.Channel_Type = ADC_Configuration.Channel_Type.Regular;
 8004b22:	2200      	movs	r2, #0
 8004b24:	4b15      	ldr	r3, [pc, #84]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b26:	719a      	strb	r2, [r3, #6]
	Joystick.Conversion_Mode = ADC_Configuration.Conversion_Mode.Single;
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4b14      	ldr	r3, [pc, #80]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b2c:	715a      	strb	r2, [r3, #5]
	Joystick.Data_Alignment = ADC_Configuration.Data_Alignment.Right_Justified;
 8004b2e:	2200      	movs	r2, #0
 8004b30:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b32:	711a      	strb	r2, [r3, #4]
	Joystick.Port = ADC_Configuration.Port._ADC1_;
 8004b34:	4a12      	ldr	r2, [pc, #72]	@ (8004b80 <Joystick_HAL_Init+0x1f8>)
 8004b36:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b38:	601a      	str	r2, [r3, #0]
	Joystick.Resolution = ADC_Configuration.Resolution.Bit_12;
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b3e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	Joystick.External_Trigger.Enable = ENABLE;
 8004b42:	4b0e      	ldr	r3, [pc, #56]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	71da      	strb	r2, [r3, #7]
	Joystick.External_Trigger.Sampling_Frequency = instance->update_rate;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b52:	edc7 7a00 	vstr	s15, [r7]
 8004b56:	783b      	ldrb	r3, [r7, #0]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b5c:	725a      	strb	r2, [r3, #9]
//	Joystick.External_Trigger.Trigger_Event = ADC_Configuration.Regular_External_Trigger_Event.Timer_2_TRGO;
	Joystick.External_Trigger.Trigger_Event = ADC_Configuration.Regular_External_Trigger_Event.Timer_2_CC2;
 8004b5e:	2203      	movs	r2, #3
 8004b60:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b62:	721a      	strb	r2, [r3, #8]
	ADC_Init(&Joystick);
 8004b64:	4805      	ldr	r0, [pc, #20]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b66:	f7fc fe2b 	bl	80017c0 <ADC_Init>
	ADC_Start_Capture(&Joystick, Joystick_Data_Buffer);
 8004b6a:	4906      	ldr	r1, [pc, #24]	@ (8004b84 <Joystick_HAL_Init+0x1fc>)
 8004b6c:	4803      	ldr	r0, [pc, #12]	@ (8004b7c <Joystick_HAL_Init+0x1f4>)
 8004b6e:	f7fc ffdf 	bl	8001b30 <ADC_Start_Capture>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200005dc 	.word	0x200005dc
 8004b80:	40012000 	.word	0x40012000
 8004b84:	20000620 	.word	0x20000620

08004b88 <Joystick_HAL_Read_X>:

uint16_t Joystick_HAL_Read_X(uint8_t joystickIndex)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
	if(joystickIndex == 1)
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <Joystick_HAL_Read_X+0x16>
	{
		return Joystick_Data_Buffer[0];
 8004b98:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <Joystick_HAL_Read_X+0x30>)
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	e006      	b.n	8004bac <Joystick_HAL_Read_X+0x24>
	}
	else if(joystickIndex == 1)
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d102      	bne.n	8004baa <Joystick_HAL_Read_X+0x22>
	{
		return Joystick_Data_Buffer[2];
 8004ba4:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <Joystick_HAL_Read_X+0x30>)
 8004ba6:	889b      	ldrh	r3, [r3, #4]
 8004ba8:	e000      	b.n	8004bac <Joystick_HAL_Read_X+0x24>
	}

	return 0;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	20000620 	.word	0x20000620

08004bbc <Joystick_HAL_Read_Y>:

uint16_t Joystick_HAL_Read_Y(uint8_t joystickIndex)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
	if(joystickIndex == 1)
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <Joystick_HAL_Read_Y+0x16>
	{
		return Joystick_Data_Buffer[1];
 8004bcc:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <Joystick_HAL_Read_Y+0x30>)
 8004bce:	885b      	ldrh	r3, [r3, #2]
 8004bd0:	e006      	b.n	8004be0 <Joystick_HAL_Read_Y+0x24>
	}
	else if(joystickIndex == 1)
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d102      	bne.n	8004bde <Joystick_HAL_Read_Y+0x22>
	{
		return Joystick_Data_Buffer[3];
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <Joystick_HAL_Read_Y+0x30>)
 8004bda:	88db      	ldrh	r3, [r3, #6]
 8004bdc:	e000      	b.n	8004be0 <Joystick_HAL_Read_Y+0x24>
	}

	return 0;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20000620 	.word	0x20000620

08004bf0 <__NVIC_EnableIRQ>:
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	db0b      	blt.n	8004c1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	f003 021f 	and.w	r2, r3, #31
 8004c08:	4907      	ldr	r1, [pc, #28]	@ (8004c28 <__NVIC_EnableIRQ+0x38>)
 8004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2001      	movs	r0, #1
 8004c12:	fa00 f202 	lsl.w	r2, r0, r2
 8004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	e000e100 	.word	0xe000e100

08004c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	6039      	str	r1, [r7, #0]
 8004c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	db0a      	blt.n	8004c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	490c      	ldr	r1, [pc, #48]	@ (8004c78 <__NVIC_SetPriority+0x4c>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	0112      	lsls	r2, r2, #4
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c54:	e00a      	b.n	8004c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4908      	ldr	r1, [pc, #32]	@ (8004c7c <__NVIC_SetPriority+0x50>)
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	3b04      	subs	r3, #4
 8004c64:	0112      	lsls	r2, r2, #4
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	440b      	add	r3, r1
 8004c6a:	761a      	strb	r2, [r3, #24]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000e100 	.word	0xe000e100
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c90:	d301      	bcc.n	8004c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c92:	2301      	movs	r3, #1
 8004c94:	e00f      	b.n	8004cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <SysTick_Config+0x40>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c9e:	210f      	movs	r1, #15
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	f7ff ffc2 	bl	8004c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <SysTick_Config+0x40>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <SysTick_Config+0x40>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010

08004cc4 <MCU_Clock_Setup>:
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
	SystemInit();
 8004cca:	f000 f953 	bl	8004f74 <SystemInit>
	uint8_t pll_m = 8;
 8004cce:	2308      	movs	r3, #8
 8004cd0:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004cd2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004cd6:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004cdc:	2307      	movs	r3, #7
 8004cde:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004cf2:	bf00      	nop
 8004cf4:	4b37      	ldr	r3, [pc, #220]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f9      	beq.n	8004cf4 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004d00:	4b34      	ldr	r3, [pc, #208]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	4a33      	ldr	r2, [pc, #204]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004d0c:	4b32      	ldr	r3, [pc, #200]	@ (8004dd8 <MCU_Clock_Setup+0x114>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a31      	ldr	r2, [pc, #196]	@ (8004dd8 <MCU_Clock_Setup+0x114>)
 8004d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d16:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004d18:	4b30      	ldr	r3, [pc, #192]	@ (8004ddc <MCU_Clock_Setup+0x118>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8004ddc <MCU_Clock_Setup+0x118>)
 8004d1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d22:	f043 0305 	orr.w	r3, r3, #5
 8004d26:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004d28:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	78ba      	ldrb	r2, [r7, #2]
 8004d2e:	0611      	lsls	r1, r2, #24
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	0412      	lsls	r2, r2, #16
 8004d34:	4311      	orrs	r1, r2
 8004d36:	88ba      	ldrh	r2, [r7, #4]
 8004d38:	0192      	lsls	r2, r2, #6
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	79fa      	ldrb	r2, [r7, #7]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	4611      	mov	r1, r2
 8004d42:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004d48:	4b22      	ldr	r3, [pc, #136]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a21      	ldr	r2, [pc, #132]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d52:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004d54:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d56:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d62:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004d66:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004d68:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a19      	ldr	r2, [pc, #100]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d72:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004d74:	4b17      	ldr	r3, [pc, #92]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a16      	ldr	r2, [pc, #88]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d7e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004d80:	bf00      	nop
 8004d82:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f9      	beq.n	8004d82 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004d8e:	4b11      	ldr	r3, [pc, #68]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4a10      	ldr	r2, [pc, #64]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004d9a:	bf00      	nop
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d1f9      	bne.n	8004d9c <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004da8:	f000 f8f6 	bl	8004f98 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004dac:	4b0c      	ldr	r3, [pc, #48]	@ (8004de0 <MCU_Clock_Setup+0x11c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	4a0c      	ldr	r2, [pc, #48]	@ (8004de4 <MCU_Clock_Setup+0x120>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff ff60 	bl	8004c80 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004dc0:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc4:	4a03      	ldr	r2, [pc, #12]	@ (8004dd4 <MCU_Clock_Setup+0x110>)
 8004dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dca:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40007000 	.word	0x40007000
 8004ddc:	40023c00 	.word	0x40023c00
 8004de0:	20000000 	.word	0x20000000
 8004de4:	18618619 	.word	0x18618619

08004de8 <Delay_Config>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004dec:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <Delay_Config+0x2c>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8004df2:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <Delay_Config+0x2c>)
 8004df4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004df8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004dfa:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <Delay_Config+0x2c>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <Delay_Config+0x2c>)
 8004e02:	2205      	movs	r2, #5
 8004e04:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	e000e010 	.word	0xe000e010

08004e18 <TIM6_DAC_IRQHandler>:
int32_t button1 = 0;

JoystickPosition_t Right_Joystick;

void TIM6_DAC_IRQHandler(void)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
	TIM6 -> SR &= ~TIM_SR_UIF;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <TIM6_DAC_IRQHandler+0x4c>)
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	4a10      	ldr	r2, [pc, #64]	@ (8004e64 <TIM6_DAC_IRQHandler+0x4c>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6113      	str	r3, [r2, #16]
	Right_Joystick = Joystick_Read(1);
 8004e2a:	4c0f      	ldr	r4, [pc, #60]	@ (8004e68 <TIM6_DAC_IRQHandler+0x50>)
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	2101      	movs	r1, #1
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fd85 	bl	8004940 <Joystick_Read>
 8004e36:	4622      	mov	r2, r4
 8004e38:	463b      	mov	r3, r7
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	6010      	str	r0, [r2, #0]
 8004e3e:	889b      	ldrh	r3, [r3, #4]
 8004e40:	8093      	strh	r3, [r2, #4]
	printConsole("%d,%d,%d,\r\n",Right_Joystick.x,Right_Joystick.y,tick);
 8004e42:	4b09      	ldr	r3, [pc, #36]	@ (8004e68 <TIM6_DAC_IRQHandler+0x50>)
 8004e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4b07      	ldr	r3, [pc, #28]	@ (8004e68 <TIM6_DAC_IRQHandler+0x50>)
 8004e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <TIM6_DAC_IRQHandler+0x54>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4806      	ldr	r0, [pc, #24]	@ (8004e70 <TIM6_DAC_IRQHandler+0x58>)
 8004e58:	f7fc fed4 	bl	8001c04 <printConsole>
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd90      	pop	{r4, r7, pc}
 8004e64:	40001000 	.word	0x40001000
 8004e68:	20000634 	.word	0x20000634
 8004e6c:	20000630 	.word	0x20000630
 8004e70:	08005b30 	.word	0x08005b30

08004e74 <General_Timer_Update_Init>:

void General_Timer_Update_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
	RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8004e78:	4b16      	ldr	r3, [pc, #88]	@ (8004ed4 <General_Timer_Update_Init+0x60>)
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <General_Timer_Update_Init+0x60>)
 8004e7e:	f043 0310 	orr.w	r3, r3, #16
 8004e82:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM6->PSC = 8400-1;
 8004e84:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004e86:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004e8a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 100-1;
 8004e8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004e8e:	2263      	movs	r2, #99	@ 0x63
 8004e90:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6 -> EGR |= TIM_EGR_UG;
 8004e92:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4a10      	ldr	r2, [pc, #64]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_URS;
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	6013      	str	r3, [r2, #0]
	TIM6->DIER |=  TIM_DIER_UIE;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8004eb6:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a07      	ldr	r2, [pc, #28]	@ (8004ed8 <General_Timer_Update_Init+0x64>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM6_DAC_IRQn,1);
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	2036      	movs	r0, #54	@ 0x36
 8004ec6:	f7ff feb1 	bl	8004c2c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004eca:	2036      	movs	r0, #54	@ 0x36
 8004ecc:	f7ff fe90 	bl	8004bf0 <__NVIC_EnableIRQ>
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40001000 	.word	0x40001000

08004edc <main>:

int main(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8004ee0:	f7ff fef0 	bl	8004cc4 <MCU_Clock_Setup>
	Delay_Config();
 8004ee4:	f7ff ff80 	bl	8004de8 <Delay_Config>
	Console_Init(9600); //921600
 8004ee8:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8004eec:	f7fc fe62 	bl	8001bb4 <Console_Init>
	General_Timer_Update_Init();
 8004ef0:	f7ff ffc0 	bl	8004e74 <General_Timer_Update_Init>

	Joystick_Init(1, 900);
 8004ef4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8004f04 <main+0x28>
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7ff fd0b 	bl	8004914 <Joystick_Init>



	for(;;)
 8004efe:	bf00      	nop
 8004f00:	e7fd      	b.n	8004efe <main+0x22>
 8004f02:	bf00      	nop
 8004f04:	44610000 	.word	0x44610000

08004f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f10:	4a14      	ldr	r2, [pc, #80]	@ (8004f64 <_sbrk+0x5c>)
 8004f12:	4b15      	ldr	r3, [pc, #84]	@ (8004f68 <_sbrk+0x60>)
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f1c:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <_sbrk+0x64>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f24:	4b11      	ldr	r3, [pc, #68]	@ (8004f6c <_sbrk+0x64>)
 8004f26:	4a12      	ldr	r2, [pc, #72]	@ (8004f70 <_sbrk+0x68>)
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <_sbrk+0x64>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d207      	bcs.n	8004f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f38:	f000 f8f8 	bl	800512c <__errno>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	220c      	movs	r2, #12
 8004f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	e009      	b.n	8004f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f48:	4b08      	ldr	r3, [pc, #32]	@ (8004f6c <_sbrk+0x64>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f4e:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <_sbrk+0x64>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	4a05      	ldr	r2, [pc, #20]	@ (8004f6c <_sbrk+0x64>)
 8004f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20020000 	.word	0x20020000
 8004f68:	00000400 	.word	0x00000400
 8004f6c:	2000063c 	.word	0x2000063c
 8004f70:	20000788 	.word	0x20000788

08004f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f78:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <SystemInit+0x20>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7e:	4a05      	ldr	r2, [pc, #20]	@ (8004f94 <SystemInit+0x20>)
 8004f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000ed00 	.word	0xe000ed00

08004f98 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	2302      	movs	r3, #2
 8004fb0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004fb2:	4b34      	ldr	r3, [pc, #208]	@ (8005084 <SystemCoreClockUpdate+0xec>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d011      	beq.n	8004fe6 <SystemCoreClockUpdate+0x4e>
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d844      	bhi.n	8005052 <SystemCoreClockUpdate+0xba>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <SystemCoreClockUpdate+0x3e>
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d004      	beq.n	8004fde <SystemCoreClockUpdate+0x46>
 8004fd4:	e03d      	b.n	8005052 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005088 <SystemCoreClockUpdate+0xf0>)
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800508c <SystemCoreClockUpdate+0xf4>)
 8004fda:	601a      	str	r2, [r3, #0]
      break;
 8004fdc:	e03d      	b.n	800505a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004fde:	4b2a      	ldr	r3, [pc, #168]	@ (8005088 <SystemCoreClockUpdate+0xf0>)
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8005090 <SystemCoreClockUpdate+0xf8>)
 8004fe2:	601a      	str	r2, [r3, #0]
      break;
 8004fe4:	e039      	b.n	800505a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004fe6:	4b27      	ldr	r3, [pc, #156]	@ (8005084 <SystemCoreClockUpdate+0xec>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	0d9b      	lsrs	r3, r3, #22
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff2:	4b24      	ldr	r3, [pc, #144]	@ (8005084 <SystemCoreClockUpdate+0xec>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ffa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00c      	beq.n	800501c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005002:	4a23      	ldr	r2, [pc, #140]	@ (8005090 <SystemCoreClockUpdate+0xf8>)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <SystemCoreClockUpdate+0xec>)
 800500c:	6852      	ldr	r2, [r2, #4]
 800500e:	0992      	lsrs	r2, r2, #6
 8005010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e00b      	b.n	8005034 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800501c:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <SystemCoreClockUpdate+0xf4>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	4a17      	ldr	r2, [pc, #92]	@ (8005084 <SystemCoreClockUpdate+0xec>)
 8005026:	6852      	ldr	r2, [r2, #4]
 8005028:	0992      	lsrs	r2, r2, #6
 800502a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005034:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <SystemCoreClockUpdate+0xec>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	4a0e      	ldr	r2, [pc, #56]	@ (8005088 <SystemCoreClockUpdate+0xf0>)
 800504e:	6013      	str	r3, [r2, #0]
      break;
 8005050:	e003      	b.n	800505a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005052:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <SystemCoreClockUpdate+0xf0>)
 8005054:	4a0d      	ldr	r2, [pc, #52]	@ (800508c <SystemCoreClockUpdate+0xf4>)
 8005056:	601a      	str	r2, [r3, #0]
      break;
 8005058:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800505a:	4b0a      	ldr	r3, [pc, #40]	@ (8005084 <SystemCoreClockUpdate+0xec>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	4a0b      	ldr	r2, [pc, #44]	@ (8005094 <SystemCoreClockUpdate+0xfc>)
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800506a:	4b07      	ldr	r3, [pc, #28]	@ (8005088 <SystemCoreClockUpdate+0xf0>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	4a04      	ldr	r2, [pc, #16]	@ (8005088 <SystemCoreClockUpdate+0xf0>)
 8005076:	6013      	str	r3, [r2, #0]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40023800 	.word	0x40023800
 8005088:	20000000 	.word	0x20000000
 800508c:	00f42400 	.word	0x00f42400
 8005090:	017d7840 	.word	0x017d7840
 8005094:	0800633c 	.word	0x0800633c

08005098 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005098:	480d      	ldr	r0, [pc, #52]	@ (80050d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800509a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800509c:	f7ff ff6a 	bl	8004f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050a0:	480c      	ldr	r0, [pc, #48]	@ (80050d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80050a2:	490d      	ldr	r1, [pc, #52]	@ (80050d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050a4:	4a0d      	ldr	r2, [pc, #52]	@ (80050dc <LoopForever+0xe>)
  movs r3, #0
 80050a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050a8:	e002      	b.n	80050b0 <LoopCopyDataInit>

080050aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ae:	3304      	adds	r3, #4

080050b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050b4:	d3f9      	bcc.n	80050aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050b6:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050b8:	4c0a      	ldr	r4, [pc, #40]	@ (80050e4 <LoopForever+0x16>)
  movs r3, #0
 80050ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050bc:	e001      	b.n	80050c2 <LoopFillZerobss>

080050be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c0:	3204      	adds	r2, #4

080050c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050c4:	d3fb      	bcc.n	80050be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80050c6:	f000 f837 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050ca:	f7ff ff07 	bl	8004edc <main>

080050ce <LoopForever>:

LoopForever:
  b LoopForever
 80050ce:	e7fe      	b.n	80050ce <LoopForever>
  ldr   r0, =_estack
 80050d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050d8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80050dc:	08006390 	.word	0x08006390
  ldr r2, =_sbss
 80050e0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80050e4:	20000788 	.word	0x20000788

080050e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050e8:	e7fe      	b.n	80050e8 <ADC_IRQHandler>
	...

080050ec <_vsiprintf_r>:
 80050ec:	b500      	push	{lr}
 80050ee:	b09b      	sub	sp, #108	@ 0x6c
 80050f0:	9100      	str	r1, [sp, #0]
 80050f2:	9104      	str	r1, [sp, #16]
 80050f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050f8:	9105      	str	r1, [sp, #20]
 80050fa:	9102      	str	r1, [sp, #8]
 80050fc:	4905      	ldr	r1, [pc, #20]	@ (8005114 <_vsiprintf_r+0x28>)
 80050fe:	9103      	str	r1, [sp, #12]
 8005100:	4669      	mov	r1, sp
 8005102:	f000 f993 	bl	800542c <_svfiprintf_r>
 8005106:	9b00      	ldr	r3, [sp, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	b01b      	add	sp, #108	@ 0x6c
 800510e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005112:	bf00      	nop
 8005114:	ffff0208 	.word	0xffff0208

08005118 <vsiprintf>:
 8005118:	4613      	mov	r3, r2
 800511a:	460a      	mov	r2, r1
 800511c:	4601      	mov	r1, r0
 800511e:	4802      	ldr	r0, [pc, #8]	@ (8005128 <vsiprintf+0x10>)
 8005120:	6800      	ldr	r0, [r0, #0]
 8005122:	f7ff bfe3 	b.w	80050ec <_vsiprintf_r>
 8005126:	bf00      	nop
 8005128:	20000004 	.word	0x20000004

0800512c <__errno>:
 800512c:	4b01      	ldr	r3, [pc, #4]	@ (8005134 <__errno+0x8>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000004 	.word	0x20000004

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4d0d      	ldr	r5, [pc, #52]	@ (8005170 <__libc_init_array+0x38>)
 800513c:	4c0d      	ldr	r4, [pc, #52]	@ (8005174 <__libc_init_array+0x3c>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	2600      	movs	r6, #0
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	4d0b      	ldr	r5, [pc, #44]	@ (8005178 <__libc_init_array+0x40>)
 800514a:	4c0c      	ldr	r4, [pc, #48]	@ (800517c <__libc_init_array+0x44>)
 800514c:	f000 fce4 	bl	8005b18 <_init>
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	2600      	movs	r6, #0
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08006388 	.word	0x08006388
 8005174:	08006388 	.word	0x08006388
 8005178:	08006388 	.word	0x08006388
 800517c:	0800638c 	.word	0x0800638c

08005180 <__retarget_lock_acquire_recursive>:
 8005180:	4770      	bx	lr

08005182 <__retarget_lock_release_recursive>:
 8005182:	4770      	bx	lr

08005184 <_free_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4605      	mov	r5, r0
 8005188:	2900      	cmp	r1, #0
 800518a:	d041      	beq.n	8005210 <_free_r+0x8c>
 800518c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005190:	1f0c      	subs	r4, r1, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	bfb8      	it	lt
 8005196:	18e4      	addlt	r4, r4, r3
 8005198:	f000 f8e0 	bl	800535c <__malloc_lock>
 800519c:	4a1d      	ldr	r2, [pc, #116]	@ (8005214 <_free_r+0x90>)
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	b933      	cbnz	r3, 80051b0 <_free_r+0x2c>
 80051a2:	6063      	str	r3, [r4, #4]
 80051a4:	6014      	str	r4, [r2, #0]
 80051a6:	4628      	mov	r0, r5
 80051a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ac:	f000 b8dc 	b.w	8005368 <__malloc_unlock>
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	d908      	bls.n	80051c6 <_free_r+0x42>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	1821      	adds	r1, r4, r0
 80051b8:	428b      	cmp	r3, r1
 80051ba:	bf01      	itttt	eq
 80051bc:	6819      	ldreq	r1, [r3, #0]
 80051be:	685b      	ldreq	r3, [r3, #4]
 80051c0:	1809      	addeq	r1, r1, r0
 80051c2:	6021      	streq	r1, [r4, #0]
 80051c4:	e7ed      	b.n	80051a2 <_free_r+0x1e>
 80051c6:	461a      	mov	r2, r3
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b10b      	cbz	r3, 80051d0 <_free_r+0x4c>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d9fa      	bls.n	80051c6 <_free_r+0x42>
 80051d0:	6811      	ldr	r1, [r2, #0]
 80051d2:	1850      	adds	r0, r2, r1
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d10b      	bne.n	80051f0 <_free_r+0x6c>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	4401      	add	r1, r0
 80051dc:	1850      	adds	r0, r2, r1
 80051de:	4283      	cmp	r3, r0
 80051e0:	6011      	str	r1, [r2, #0]
 80051e2:	d1e0      	bne.n	80051a6 <_free_r+0x22>
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	4408      	add	r0, r1
 80051ec:	6010      	str	r0, [r2, #0]
 80051ee:	e7da      	b.n	80051a6 <_free_r+0x22>
 80051f0:	d902      	bls.n	80051f8 <_free_r+0x74>
 80051f2:	230c      	movs	r3, #12
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	e7d6      	b.n	80051a6 <_free_r+0x22>
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	1821      	adds	r1, r4, r0
 80051fc:	428b      	cmp	r3, r1
 80051fe:	bf04      	itt	eq
 8005200:	6819      	ldreq	r1, [r3, #0]
 8005202:	685b      	ldreq	r3, [r3, #4]
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	bf04      	itt	eq
 8005208:	1809      	addeq	r1, r1, r0
 800520a:	6021      	streq	r1, [r4, #0]
 800520c:	6054      	str	r4, [r2, #4]
 800520e:	e7ca      	b.n	80051a6 <_free_r+0x22>
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	bf00      	nop
 8005214:	20000784 	.word	0x20000784

08005218 <sbrk_aligned>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4e0f      	ldr	r6, [pc, #60]	@ (8005258 <sbrk_aligned+0x40>)
 800521c:	460c      	mov	r4, r1
 800521e:	6831      	ldr	r1, [r6, #0]
 8005220:	4605      	mov	r5, r0
 8005222:	b911      	cbnz	r1, 800522a <sbrk_aligned+0x12>
 8005224:	f000 fba6 	bl	8005974 <_sbrk_r>
 8005228:	6030      	str	r0, [r6, #0]
 800522a:	4621      	mov	r1, r4
 800522c:	4628      	mov	r0, r5
 800522e:	f000 fba1 	bl	8005974 <_sbrk_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d103      	bne.n	800523e <sbrk_aligned+0x26>
 8005236:	f04f 34ff 	mov.w	r4, #4294967295
 800523a:	4620      	mov	r0, r4
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d0f8      	beq.n	800523a <sbrk_aligned+0x22>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 fb92 	bl	8005974 <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d1f2      	bne.n	800523a <sbrk_aligned+0x22>
 8005254:	e7ef      	b.n	8005236 <sbrk_aligned+0x1e>
 8005256:	bf00      	nop
 8005258:	20000780 	.word	0x20000780

0800525c <_malloc_r>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	1ccd      	adds	r5, r1, #3
 8005262:	f025 0503 	bic.w	r5, r5, #3
 8005266:	3508      	adds	r5, #8
 8005268:	2d0c      	cmp	r5, #12
 800526a:	bf38      	it	cc
 800526c:	250c      	movcc	r5, #12
 800526e:	2d00      	cmp	r5, #0
 8005270:	4606      	mov	r6, r0
 8005272:	db01      	blt.n	8005278 <_malloc_r+0x1c>
 8005274:	42a9      	cmp	r1, r5
 8005276:	d904      	bls.n	8005282 <_malloc_r+0x26>
 8005278:	230c      	movs	r3, #12
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	2000      	movs	r0, #0
 800527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005358 <_malloc_r+0xfc>
 8005286:	f000 f869 	bl	800535c <__malloc_lock>
 800528a:	f8d8 3000 	ldr.w	r3, [r8]
 800528e:	461c      	mov	r4, r3
 8005290:	bb44      	cbnz	r4, 80052e4 <_malloc_r+0x88>
 8005292:	4629      	mov	r1, r5
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff ffbf 	bl	8005218 <sbrk_aligned>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	4604      	mov	r4, r0
 800529e:	d158      	bne.n	8005352 <_malloc_r+0xf6>
 80052a0:	f8d8 4000 	ldr.w	r4, [r8]
 80052a4:	4627      	mov	r7, r4
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d143      	bne.n	8005332 <_malloc_r+0xd6>
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d04b      	beq.n	8005346 <_malloc_r+0xea>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	eb04 0903 	add.w	r9, r4, r3
 80052b8:	f000 fb5c 	bl	8005974 <_sbrk_r>
 80052bc:	4581      	cmp	r9, r0
 80052be:	d142      	bne.n	8005346 <_malloc_r+0xea>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	1a6d      	subs	r5, r5, r1
 80052c4:	4629      	mov	r1, r5
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7ff ffa6 	bl	8005218 <sbrk_aligned>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d03a      	beq.n	8005346 <_malloc_r+0xea>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	442b      	add	r3, r5
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	f8d8 3000 	ldr.w	r3, [r8]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	bb62      	cbnz	r2, 8005338 <_malloc_r+0xdc>
 80052de:	f8c8 7000 	str.w	r7, [r8]
 80052e2:	e00f      	b.n	8005304 <_malloc_r+0xa8>
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	1b52      	subs	r2, r2, r5
 80052e8:	d420      	bmi.n	800532c <_malloc_r+0xd0>
 80052ea:	2a0b      	cmp	r2, #11
 80052ec:	d917      	bls.n	800531e <_malloc_r+0xc2>
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	6025      	str	r5, [r4, #0]
 80052f4:	bf18      	it	ne
 80052f6:	6059      	strne	r1, [r3, #4]
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	bf08      	it	eq
 80052fc:	f8c8 1000 	streq.w	r1, [r8]
 8005300:	5162      	str	r2, [r4, r5]
 8005302:	604b      	str	r3, [r1, #4]
 8005304:	4630      	mov	r0, r6
 8005306:	f000 f82f 	bl	8005368 <__malloc_unlock>
 800530a:	f104 000b 	add.w	r0, r4, #11
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	f020 0007 	bic.w	r0, r0, #7
 8005314:	1ac2      	subs	r2, r0, r3
 8005316:	bf1c      	itt	ne
 8005318:	1a1b      	subne	r3, r3, r0
 800531a:	50a3      	strne	r3, [r4, r2]
 800531c:	e7af      	b.n	800527e <_malloc_r+0x22>
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	42a3      	cmp	r3, r4
 8005322:	bf0c      	ite	eq
 8005324:	f8c8 2000 	streq.w	r2, [r8]
 8005328:	605a      	strne	r2, [r3, #4]
 800532a:	e7eb      	b.n	8005304 <_malloc_r+0xa8>
 800532c:	4623      	mov	r3, r4
 800532e:	6864      	ldr	r4, [r4, #4]
 8005330:	e7ae      	b.n	8005290 <_malloc_r+0x34>
 8005332:	463c      	mov	r4, r7
 8005334:	687f      	ldr	r7, [r7, #4]
 8005336:	e7b6      	b.n	80052a6 <_malloc_r+0x4a>
 8005338:	461a      	mov	r2, r3
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	42a3      	cmp	r3, r4
 800533e:	d1fb      	bne.n	8005338 <_malloc_r+0xdc>
 8005340:	2300      	movs	r3, #0
 8005342:	6053      	str	r3, [r2, #4]
 8005344:	e7de      	b.n	8005304 <_malloc_r+0xa8>
 8005346:	230c      	movs	r3, #12
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	4630      	mov	r0, r6
 800534c:	f000 f80c 	bl	8005368 <__malloc_unlock>
 8005350:	e794      	b.n	800527c <_malloc_r+0x20>
 8005352:	6005      	str	r5, [r0, #0]
 8005354:	e7d6      	b.n	8005304 <_malloc_r+0xa8>
 8005356:	bf00      	nop
 8005358:	20000784 	.word	0x20000784

0800535c <__malloc_lock>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__malloc_lock+0x8>)
 800535e:	f7ff bf0f 	b.w	8005180 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	2000077c 	.word	0x2000077c

08005368 <__malloc_unlock>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__malloc_unlock+0x8>)
 800536a:	f7ff bf0a 	b.w	8005182 <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	2000077c 	.word	0x2000077c

08005374 <__ssputs_r>:
 8005374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	688e      	ldr	r6, [r1, #8]
 800537a:	461f      	mov	r7, r3
 800537c:	42be      	cmp	r6, r7
 800537e:	680b      	ldr	r3, [r1, #0]
 8005380:	4682      	mov	sl, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4690      	mov	r8, r2
 8005386:	d82d      	bhi.n	80053e4 <__ssputs_r+0x70>
 8005388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800538c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005390:	d026      	beq.n	80053e0 <__ssputs_r+0x6c>
 8005392:	6965      	ldr	r5, [r4, #20]
 8005394:	6909      	ldr	r1, [r1, #16]
 8005396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800539a:	eba3 0901 	sub.w	r9, r3, r1
 800539e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053a2:	1c7b      	adds	r3, r7, #1
 80053a4:	444b      	add	r3, r9
 80053a6:	106d      	asrs	r5, r5, #1
 80053a8:	429d      	cmp	r5, r3
 80053aa:	bf38      	it	cc
 80053ac:	461d      	movcc	r5, r3
 80053ae:	0553      	lsls	r3, r2, #21
 80053b0:	d527      	bpl.n	8005402 <__ssputs_r+0x8e>
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7ff ff52 	bl	800525c <_malloc_r>
 80053b8:	4606      	mov	r6, r0
 80053ba:	b360      	cbz	r0, 8005416 <__ssputs_r+0xa2>
 80053bc:	6921      	ldr	r1, [r4, #16]
 80053be:	464a      	mov	r2, r9
 80053c0:	f000 fae8 	bl	8005994 <memcpy>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	6126      	str	r6, [r4, #16]
 80053d2:	6165      	str	r5, [r4, #20]
 80053d4:	444e      	add	r6, r9
 80053d6:	eba5 0509 	sub.w	r5, r5, r9
 80053da:	6026      	str	r6, [r4, #0]
 80053dc:	60a5      	str	r5, [r4, #8]
 80053de:	463e      	mov	r6, r7
 80053e0:	42be      	cmp	r6, r7
 80053e2:	d900      	bls.n	80053e6 <__ssputs_r+0x72>
 80053e4:	463e      	mov	r6, r7
 80053e6:	6820      	ldr	r0, [r4, #0]
 80053e8:	4632      	mov	r2, r6
 80053ea:	4641      	mov	r1, r8
 80053ec:	f000 faa8 	bl	8005940 <memmove>
 80053f0:	68a3      	ldr	r3, [r4, #8]
 80053f2:	1b9b      	subs	r3, r3, r6
 80053f4:	60a3      	str	r3, [r4, #8]
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	4433      	add	r3, r6
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2000      	movs	r0, #0
 80053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005402:	462a      	mov	r2, r5
 8005404:	f000 fad4 	bl	80059b0 <_realloc_r>
 8005408:	4606      	mov	r6, r0
 800540a:	2800      	cmp	r0, #0
 800540c:	d1e0      	bne.n	80053d0 <__ssputs_r+0x5c>
 800540e:	6921      	ldr	r1, [r4, #16]
 8005410:	4650      	mov	r0, sl
 8005412:	f7ff feb7 	bl	8005184 <_free_r>
 8005416:	230c      	movs	r3, #12
 8005418:	f8ca 3000 	str.w	r3, [sl]
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e7e9      	b.n	80053fe <__ssputs_r+0x8a>
	...

0800542c <_svfiprintf_r>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	4698      	mov	r8, r3
 8005432:	898b      	ldrh	r3, [r1, #12]
 8005434:	061b      	lsls	r3, r3, #24
 8005436:	b09d      	sub	sp, #116	@ 0x74
 8005438:	4607      	mov	r7, r0
 800543a:	460d      	mov	r5, r1
 800543c:	4614      	mov	r4, r2
 800543e:	d510      	bpl.n	8005462 <_svfiprintf_r+0x36>
 8005440:	690b      	ldr	r3, [r1, #16]
 8005442:	b973      	cbnz	r3, 8005462 <_svfiprintf_r+0x36>
 8005444:	2140      	movs	r1, #64	@ 0x40
 8005446:	f7ff ff09 	bl	800525c <_malloc_r>
 800544a:	6028      	str	r0, [r5, #0]
 800544c:	6128      	str	r0, [r5, #16]
 800544e:	b930      	cbnz	r0, 800545e <_svfiprintf_r+0x32>
 8005450:	230c      	movs	r3, #12
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b01d      	add	sp, #116	@ 0x74
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	2340      	movs	r3, #64	@ 0x40
 8005460:	616b      	str	r3, [r5, #20]
 8005462:	2300      	movs	r3, #0
 8005464:	9309      	str	r3, [sp, #36]	@ 0x24
 8005466:	2320      	movs	r3, #32
 8005468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800546c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005470:	2330      	movs	r3, #48	@ 0x30
 8005472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005610 <_svfiprintf_r+0x1e4>
 8005476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800547a:	f04f 0901 	mov.w	r9, #1
 800547e:	4623      	mov	r3, r4
 8005480:	469a      	mov	sl, r3
 8005482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005486:	b10a      	cbz	r2, 800548c <_svfiprintf_r+0x60>
 8005488:	2a25      	cmp	r2, #37	@ 0x25
 800548a:	d1f9      	bne.n	8005480 <_svfiprintf_r+0x54>
 800548c:	ebba 0b04 	subs.w	fp, sl, r4
 8005490:	d00b      	beq.n	80054aa <_svfiprintf_r+0x7e>
 8005492:	465b      	mov	r3, fp
 8005494:	4622      	mov	r2, r4
 8005496:	4629      	mov	r1, r5
 8005498:	4638      	mov	r0, r7
 800549a:	f7ff ff6b 	bl	8005374 <__ssputs_r>
 800549e:	3001      	adds	r0, #1
 80054a0:	f000 80a7 	beq.w	80055f2 <_svfiprintf_r+0x1c6>
 80054a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054a6:	445a      	add	r2, fp
 80054a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80054aa:	f89a 3000 	ldrb.w	r3, [sl]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 809f 	beq.w	80055f2 <_svfiprintf_r+0x1c6>
 80054b4:	2300      	movs	r3, #0
 80054b6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054be:	f10a 0a01 	add.w	sl, sl, #1
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	9307      	str	r3, [sp, #28]
 80054c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80054cc:	4654      	mov	r4, sl
 80054ce:	2205      	movs	r2, #5
 80054d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d4:	484e      	ldr	r0, [pc, #312]	@ (8005610 <_svfiprintf_r+0x1e4>)
 80054d6:	f7fa fe83 	bl	80001e0 <memchr>
 80054da:	9a04      	ldr	r2, [sp, #16]
 80054dc:	b9d8      	cbnz	r0, 8005516 <_svfiprintf_r+0xea>
 80054de:	06d0      	lsls	r0, r2, #27
 80054e0:	bf44      	itt	mi
 80054e2:	2320      	movmi	r3, #32
 80054e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054e8:	0711      	lsls	r1, r2, #28
 80054ea:	bf44      	itt	mi
 80054ec:	232b      	movmi	r3, #43	@ 0x2b
 80054ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054f2:	f89a 3000 	ldrb.w	r3, [sl]
 80054f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f8:	d015      	beq.n	8005526 <_svfiprintf_r+0xfa>
 80054fa:	9a07      	ldr	r2, [sp, #28]
 80054fc:	4654      	mov	r4, sl
 80054fe:	2000      	movs	r0, #0
 8005500:	f04f 0c0a 	mov.w	ip, #10
 8005504:	4621      	mov	r1, r4
 8005506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800550a:	3b30      	subs	r3, #48	@ 0x30
 800550c:	2b09      	cmp	r3, #9
 800550e:	d94b      	bls.n	80055a8 <_svfiprintf_r+0x17c>
 8005510:	b1b0      	cbz	r0, 8005540 <_svfiprintf_r+0x114>
 8005512:	9207      	str	r2, [sp, #28]
 8005514:	e014      	b.n	8005540 <_svfiprintf_r+0x114>
 8005516:	eba0 0308 	sub.w	r3, r0, r8
 800551a:	fa09 f303 	lsl.w	r3, r9, r3
 800551e:	4313      	orrs	r3, r2
 8005520:	9304      	str	r3, [sp, #16]
 8005522:	46a2      	mov	sl, r4
 8005524:	e7d2      	b.n	80054cc <_svfiprintf_r+0xa0>
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	1d19      	adds	r1, r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	9103      	str	r1, [sp, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfbb      	ittet	lt
 8005532:	425b      	neglt	r3, r3
 8005534:	f042 0202 	orrlt.w	r2, r2, #2
 8005538:	9307      	strge	r3, [sp, #28]
 800553a:	9307      	strlt	r3, [sp, #28]
 800553c:	bfb8      	it	lt
 800553e:	9204      	strlt	r2, [sp, #16]
 8005540:	7823      	ldrb	r3, [r4, #0]
 8005542:	2b2e      	cmp	r3, #46	@ 0x2e
 8005544:	d10a      	bne.n	800555c <_svfiprintf_r+0x130>
 8005546:	7863      	ldrb	r3, [r4, #1]
 8005548:	2b2a      	cmp	r3, #42	@ 0x2a
 800554a:	d132      	bne.n	80055b2 <_svfiprintf_r+0x186>
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	9203      	str	r2, [sp, #12]
 8005554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005558:	3402      	adds	r4, #2
 800555a:	9305      	str	r3, [sp, #20]
 800555c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005620 <_svfiprintf_r+0x1f4>
 8005560:	7821      	ldrb	r1, [r4, #0]
 8005562:	2203      	movs	r2, #3
 8005564:	4650      	mov	r0, sl
 8005566:	f7fa fe3b 	bl	80001e0 <memchr>
 800556a:	b138      	cbz	r0, 800557c <_svfiprintf_r+0x150>
 800556c:	9b04      	ldr	r3, [sp, #16]
 800556e:	eba0 000a 	sub.w	r0, r0, sl
 8005572:	2240      	movs	r2, #64	@ 0x40
 8005574:	4082      	lsls	r2, r0
 8005576:	4313      	orrs	r3, r2
 8005578:	3401      	adds	r4, #1
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005580:	4824      	ldr	r0, [pc, #144]	@ (8005614 <_svfiprintf_r+0x1e8>)
 8005582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005586:	2206      	movs	r2, #6
 8005588:	f7fa fe2a 	bl	80001e0 <memchr>
 800558c:	2800      	cmp	r0, #0
 800558e:	d036      	beq.n	80055fe <_svfiprintf_r+0x1d2>
 8005590:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <_svfiprintf_r+0x1ec>)
 8005592:	bb1b      	cbnz	r3, 80055dc <_svfiprintf_r+0x1b0>
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	3307      	adds	r3, #7
 8005598:	f023 0307 	bic.w	r3, r3, #7
 800559c:	3308      	adds	r3, #8
 800559e:	9303      	str	r3, [sp, #12]
 80055a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055a2:	4433      	add	r3, r6
 80055a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055a6:	e76a      	b.n	800547e <_svfiprintf_r+0x52>
 80055a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ac:	460c      	mov	r4, r1
 80055ae:	2001      	movs	r0, #1
 80055b0:	e7a8      	b.n	8005504 <_svfiprintf_r+0xd8>
 80055b2:	2300      	movs	r3, #0
 80055b4:	3401      	adds	r4, #1
 80055b6:	9305      	str	r3, [sp, #20]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f04f 0c0a 	mov.w	ip, #10
 80055be:	4620      	mov	r0, r4
 80055c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055c4:	3a30      	subs	r2, #48	@ 0x30
 80055c6:	2a09      	cmp	r2, #9
 80055c8:	d903      	bls.n	80055d2 <_svfiprintf_r+0x1a6>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0c6      	beq.n	800555c <_svfiprintf_r+0x130>
 80055ce:	9105      	str	r1, [sp, #20]
 80055d0:	e7c4      	b.n	800555c <_svfiprintf_r+0x130>
 80055d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d6:	4604      	mov	r4, r0
 80055d8:	2301      	movs	r3, #1
 80055da:	e7f0      	b.n	80055be <_svfiprintf_r+0x192>
 80055dc:	ab03      	add	r3, sp, #12
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	462a      	mov	r2, r5
 80055e2:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <_svfiprintf_r+0x1f0>)
 80055e4:	a904      	add	r1, sp, #16
 80055e6:	4638      	mov	r0, r7
 80055e8:	f3af 8000 	nop.w
 80055ec:	1c42      	adds	r2, r0, #1
 80055ee:	4606      	mov	r6, r0
 80055f0:	d1d6      	bne.n	80055a0 <_svfiprintf_r+0x174>
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	065b      	lsls	r3, r3, #25
 80055f6:	f53f af2d 	bmi.w	8005454 <_svfiprintf_r+0x28>
 80055fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055fc:	e72c      	b.n	8005458 <_svfiprintf_r+0x2c>
 80055fe:	ab03      	add	r3, sp, #12
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	462a      	mov	r2, r5
 8005604:	4b05      	ldr	r3, [pc, #20]	@ (800561c <_svfiprintf_r+0x1f0>)
 8005606:	a904      	add	r1, sp, #16
 8005608:	4638      	mov	r0, r7
 800560a:	f000 f879 	bl	8005700 <_printf_i>
 800560e:	e7ed      	b.n	80055ec <_svfiprintf_r+0x1c0>
 8005610:	0800634c 	.word	0x0800634c
 8005614:	08006356 	.word	0x08006356
 8005618:	00000000 	.word	0x00000000
 800561c:	08005375 	.word	0x08005375
 8005620:	08006352 	.word	0x08006352

08005624 <_printf_common>:
 8005624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	4616      	mov	r6, r2
 800562a:	4698      	mov	r8, r3
 800562c:	688a      	ldr	r2, [r1, #8]
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005634:	4293      	cmp	r3, r2
 8005636:	bfb8      	it	lt
 8005638:	4613      	movlt	r3, r2
 800563a:	6033      	str	r3, [r6, #0]
 800563c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005640:	4607      	mov	r7, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b10a      	cbz	r2, 800564a <_printf_common+0x26>
 8005646:	3301      	adds	r3, #1
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	0699      	lsls	r1, r3, #26
 800564e:	bf42      	ittt	mi
 8005650:	6833      	ldrmi	r3, [r6, #0]
 8005652:	3302      	addmi	r3, #2
 8005654:	6033      	strmi	r3, [r6, #0]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	f015 0506 	ands.w	r5, r5, #6
 800565c:	d106      	bne.n	800566c <_printf_common+0x48>
 800565e:	f104 0a19 	add.w	sl, r4, #25
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	6832      	ldr	r2, [r6, #0]
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	42ab      	cmp	r3, r5
 800566a:	dc26      	bgt.n	80056ba <_printf_common+0x96>
 800566c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005670:	6822      	ldr	r2, [r4, #0]
 8005672:	3b00      	subs	r3, #0
 8005674:	bf18      	it	ne
 8005676:	2301      	movne	r3, #1
 8005678:	0692      	lsls	r2, r2, #26
 800567a:	d42b      	bmi.n	80056d4 <_printf_common+0xb0>
 800567c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005680:	4641      	mov	r1, r8
 8005682:	4638      	mov	r0, r7
 8005684:	47c8      	blx	r9
 8005686:	3001      	adds	r0, #1
 8005688:	d01e      	beq.n	80056c8 <_printf_common+0xa4>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	6922      	ldr	r2, [r4, #16]
 800568e:	f003 0306 	and.w	r3, r3, #6
 8005692:	2b04      	cmp	r3, #4
 8005694:	bf02      	ittt	eq
 8005696:	68e5      	ldreq	r5, [r4, #12]
 8005698:	6833      	ldreq	r3, [r6, #0]
 800569a:	1aed      	subeq	r5, r5, r3
 800569c:	68a3      	ldr	r3, [r4, #8]
 800569e:	bf0c      	ite	eq
 80056a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a4:	2500      	movne	r5, #0
 80056a6:	4293      	cmp	r3, r2
 80056a8:	bfc4      	itt	gt
 80056aa:	1a9b      	subgt	r3, r3, r2
 80056ac:	18ed      	addgt	r5, r5, r3
 80056ae:	2600      	movs	r6, #0
 80056b0:	341a      	adds	r4, #26
 80056b2:	42b5      	cmp	r5, r6
 80056b4:	d11a      	bne.n	80056ec <_printf_common+0xc8>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e008      	b.n	80056cc <_printf_common+0xa8>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4652      	mov	r2, sl
 80056be:	4641      	mov	r1, r8
 80056c0:	4638      	mov	r0, r7
 80056c2:	47c8      	blx	r9
 80056c4:	3001      	adds	r0, #1
 80056c6:	d103      	bne.n	80056d0 <_printf_common+0xac>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d0:	3501      	adds	r5, #1
 80056d2:	e7c6      	b.n	8005662 <_printf_common+0x3e>
 80056d4:	18e1      	adds	r1, r4, r3
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	2030      	movs	r0, #48	@ 0x30
 80056da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056de:	4422      	add	r2, r4
 80056e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056e8:	3302      	adds	r3, #2
 80056ea:	e7c7      	b.n	800567c <_printf_common+0x58>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4622      	mov	r2, r4
 80056f0:	4641      	mov	r1, r8
 80056f2:	4638      	mov	r0, r7
 80056f4:	47c8      	blx	r9
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0e6      	beq.n	80056c8 <_printf_common+0xa4>
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7d9      	b.n	80056b2 <_printf_common+0x8e>
	...

08005700 <_printf_i>:
 8005700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	7e0f      	ldrb	r7, [r1, #24]
 8005706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005708:	2f78      	cmp	r7, #120	@ 0x78
 800570a:	4691      	mov	r9, r2
 800570c:	4680      	mov	r8, r0
 800570e:	460c      	mov	r4, r1
 8005710:	469a      	mov	sl, r3
 8005712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005716:	d807      	bhi.n	8005728 <_printf_i+0x28>
 8005718:	2f62      	cmp	r7, #98	@ 0x62
 800571a:	d80a      	bhi.n	8005732 <_printf_i+0x32>
 800571c:	2f00      	cmp	r7, #0
 800571e:	f000 80d2 	beq.w	80058c6 <_printf_i+0x1c6>
 8005722:	2f58      	cmp	r7, #88	@ 0x58
 8005724:	f000 80b9 	beq.w	800589a <_printf_i+0x19a>
 8005728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800572c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005730:	e03a      	b.n	80057a8 <_printf_i+0xa8>
 8005732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005736:	2b15      	cmp	r3, #21
 8005738:	d8f6      	bhi.n	8005728 <_printf_i+0x28>
 800573a:	a101      	add	r1, pc, #4	@ (adr r1, 8005740 <_printf_i+0x40>)
 800573c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005740:	08005799 	.word	0x08005799
 8005744:	080057ad 	.word	0x080057ad
 8005748:	08005729 	.word	0x08005729
 800574c:	08005729 	.word	0x08005729
 8005750:	08005729 	.word	0x08005729
 8005754:	08005729 	.word	0x08005729
 8005758:	080057ad 	.word	0x080057ad
 800575c:	08005729 	.word	0x08005729
 8005760:	08005729 	.word	0x08005729
 8005764:	08005729 	.word	0x08005729
 8005768:	08005729 	.word	0x08005729
 800576c:	080058ad 	.word	0x080058ad
 8005770:	080057d7 	.word	0x080057d7
 8005774:	08005867 	.word	0x08005867
 8005778:	08005729 	.word	0x08005729
 800577c:	08005729 	.word	0x08005729
 8005780:	080058cf 	.word	0x080058cf
 8005784:	08005729 	.word	0x08005729
 8005788:	080057d7 	.word	0x080057d7
 800578c:	08005729 	.word	0x08005729
 8005790:	08005729 	.word	0x08005729
 8005794:	0800586f 	.word	0x0800586f
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6032      	str	r2, [r6, #0]
 80057a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057a8:	2301      	movs	r3, #1
 80057aa:	e09d      	b.n	80058e8 <_printf_i+0x1e8>
 80057ac:	6833      	ldr	r3, [r6, #0]
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	1d19      	adds	r1, r3, #4
 80057b2:	6031      	str	r1, [r6, #0]
 80057b4:	0606      	lsls	r6, r0, #24
 80057b6:	d501      	bpl.n	80057bc <_printf_i+0xbc>
 80057b8:	681d      	ldr	r5, [r3, #0]
 80057ba:	e003      	b.n	80057c4 <_printf_i+0xc4>
 80057bc:	0645      	lsls	r5, r0, #25
 80057be:	d5fb      	bpl.n	80057b8 <_printf_i+0xb8>
 80057c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057c4:	2d00      	cmp	r5, #0
 80057c6:	da03      	bge.n	80057d0 <_printf_i+0xd0>
 80057c8:	232d      	movs	r3, #45	@ 0x2d
 80057ca:	426d      	negs	r5, r5
 80057cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057d0:	4859      	ldr	r0, [pc, #356]	@ (8005938 <_printf_i+0x238>)
 80057d2:	230a      	movs	r3, #10
 80057d4:	e011      	b.n	80057fa <_printf_i+0xfa>
 80057d6:	6821      	ldr	r1, [r4, #0]
 80057d8:	6833      	ldr	r3, [r6, #0]
 80057da:	0608      	lsls	r0, r1, #24
 80057dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80057e0:	d402      	bmi.n	80057e8 <_printf_i+0xe8>
 80057e2:	0649      	lsls	r1, r1, #25
 80057e4:	bf48      	it	mi
 80057e6:	b2ad      	uxthmi	r5, r5
 80057e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80057ea:	4853      	ldr	r0, [pc, #332]	@ (8005938 <_printf_i+0x238>)
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	bf14      	ite	ne
 80057f0:	230a      	movne	r3, #10
 80057f2:	2308      	moveq	r3, #8
 80057f4:	2100      	movs	r1, #0
 80057f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057fa:	6866      	ldr	r6, [r4, #4]
 80057fc:	60a6      	str	r6, [r4, #8]
 80057fe:	2e00      	cmp	r6, #0
 8005800:	bfa2      	ittt	ge
 8005802:	6821      	ldrge	r1, [r4, #0]
 8005804:	f021 0104 	bicge.w	r1, r1, #4
 8005808:	6021      	strge	r1, [r4, #0]
 800580a:	b90d      	cbnz	r5, 8005810 <_printf_i+0x110>
 800580c:	2e00      	cmp	r6, #0
 800580e:	d04b      	beq.n	80058a8 <_printf_i+0x1a8>
 8005810:	4616      	mov	r6, r2
 8005812:	fbb5 f1f3 	udiv	r1, r5, r3
 8005816:	fb03 5711 	mls	r7, r3, r1, r5
 800581a:	5dc7      	ldrb	r7, [r0, r7]
 800581c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005820:	462f      	mov	r7, r5
 8005822:	42bb      	cmp	r3, r7
 8005824:	460d      	mov	r5, r1
 8005826:	d9f4      	bls.n	8005812 <_printf_i+0x112>
 8005828:	2b08      	cmp	r3, #8
 800582a:	d10b      	bne.n	8005844 <_printf_i+0x144>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	07df      	lsls	r7, r3, #31
 8005830:	d508      	bpl.n	8005844 <_printf_i+0x144>
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	6861      	ldr	r1, [r4, #4]
 8005836:	4299      	cmp	r1, r3
 8005838:	bfde      	ittt	le
 800583a:	2330      	movle	r3, #48	@ 0x30
 800583c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005840:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005844:	1b92      	subs	r2, r2, r6
 8005846:	6122      	str	r2, [r4, #16]
 8005848:	f8cd a000 	str.w	sl, [sp]
 800584c:	464b      	mov	r3, r9
 800584e:	aa03      	add	r2, sp, #12
 8005850:	4621      	mov	r1, r4
 8005852:	4640      	mov	r0, r8
 8005854:	f7ff fee6 	bl	8005624 <_printf_common>
 8005858:	3001      	adds	r0, #1
 800585a:	d14a      	bne.n	80058f2 <_printf_i+0x1f2>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	b004      	add	sp, #16
 8005862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	f043 0320 	orr.w	r3, r3, #32
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	4833      	ldr	r0, [pc, #204]	@ (800593c <_printf_i+0x23c>)
 8005870:	2778      	movs	r7, #120	@ 0x78
 8005872:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	6831      	ldr	r1, [r6, #0]
 800587a:	061f      	lsls	r7, r3, #24
 800587c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005880:	d402      	bmi.n	8005888 <_printf_i+0x188>
 8005882:	065f      	lsls	r7, r3, #25
 8005884:	bf48      	it	mi
 8005886:	b2ad      	uxthmi	r5, r5
 8005888:	6031      	str	r1, [r6, #0]
 800588a:	07d9      	lsls	r1, r3, #31
 800588c:	bf44      	itt	mi
 800588e:	f043 0320 	orrmi.w	r3, r3, #32
 8005892:	6023      	strmi	r3, [r4, #0]
 8005894:	b11d      	cbz	r5, 800589e <_printf_i+0x19e>
 8005896:	2310      	movs	r3, #16
 8005898:	e7ac      	b.n	80057f4 <_printf_i+0xf4>
 800589a:	4827      	ldr	r0, [pc, #156]	@ (8005938 <_printf_i+0x238>)
 800589c:	e7e9      	b.n	8005872 <_printf_i+0x172>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	f023 0320 	bic.w	r3, r3, #32
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	e7f6      	b.n	8005896 <_printf_i+0x196>
 80058a8:	4616      	mov	r6, r2
 80058aa:	e7bd      	b.n	8005828 <_printf_i+0x128>
 80058ac:	6833      	ldr	r3, [r6, #0]
 80058ae:	6825      	ldr	r5, [r4, #0]
 80058b0:	6961      	ldr	r1, [r4, #20]
 80058b2:	1d18      	adds	r0, r3, #4
 80058b4:	6030      	str	r0, [r6, #0]
 80058b6:	062e      	lsls	r6, r5, #24
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	d501      	bpl.n	80058c0 <_printf_i+0x1c0>
 80058bc:	6019      	str	r1, [r3, #0]
 80058be:	e002      	b.n	80058c6 <_printf_i+0x1c6>
 80058c0:	0668      	lsls	r0, r5, #25
 80058c2:	d5fb      	bpl.n	80058bc <_printf_i+0x1bc>
 80058c4:	8019      	strh	r1, [r3, #0]
 80058c6:	2300      	movs	r3, #0
 80058c8:	6123      	str	r3, [r4, #16]
 80058ca:	4616      	mov	r6, r2
 80058cc:	e7bc      	b.n	8005848 <_printf_i+0x148>
 80058ce:	6833      	ldr	r3, [r6, #0]
 80058d0:	1d1a      	adds	r2, r3, #4
 80058d2:	6032      	str	r2, [r6, #0]
 80058d4:	681e      	ldr	r6, [r3, #0]
 80058d6:	6862      	ldr	r2, [r4, #4]
 80058d8:	2100      	movs	r1, #0
 80058da:	4630      	mov	r0, r6
 80058dc:	f7fa fc80 	bl	80001e0 <memchr>
 80058e0:	b108      	cbz	r0, 80058e6 <_printf_i+0x1e6>
 80058e2:	1b80      	subs	r0, r0, r6
 80058e4:	6060      	str	r0, [r4, #4]
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	6123      	str	r3, [r4, #16]
 80058ea:	2300      	movs	r3, #0
 80058ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f0:	e7aa      	b.n	8005848 <_printf_i+0x148>
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	4632      	mov	r2, r6
 80058f6:	4649      	mov	r1, r9
 80058f8:	4640      	mov	r0, r8
 80058fa:	47d0      	blx	sl
 80058fc:	3001      	adds	r0, #1
 80058fe:	d0ad      	beq.n	800585c <_printf_i+0x15c>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	079b      	lsls	r3, r3, #30
 8005904:	d413      	bmi.n	800592e <_printf_i+0x22e>
 8005906:	68e0      	ldr	r0, [r4, #12]
 8005908:	9b03      	ldr	r3, [sp, #12]
 800590a:	4298      	cmp	r0, r3
 800590c:	bfb8      	it	lt
 800590e:	4618      	movlt	r0, r3
 8005910:	e7a6      	b.n	8005860 <_printf_i+0x160>
 8005912:	2301      	movs	r3, #1
 8005914:	4632      	mov	r2, r6
 8005916:	4649      	mov	r1, r9
 8005918:	4640      	mov	r0, r8
 800591a:	47d0      	blx	sl
 800591c:	3001      	adds	r0, #1
 800591e:	d09d      	beq.n	800585c <_printf_i+0x15c>
 8005920:	3501      	adds	r5, #1
 8005922:	68e3      	ldr	r3, [r4, #12]
 8005924:	9903      	ldr	r1, [sp, #12]
 8005926:	1a5b      	subs	r3, r3, r1
 8005928:	42ab      	cmp	r3, r5
 800592a:	dcf2      	bgt.n	8005912 <_printf_i+0x212>
 800592c:	e7eb      	b.n	8005906 <_printf_i+0x206>
 800592e:	2500      	movs	r5, #0
 8005930:	f104 0619 	add.w	r6, r4, #25
 8005934:	e7f5      	b.n	8005922 <_printf_i+0x222>
 8005936:	bf00      	nop
 8005938:	0800635d 	.word	0x0800635d
 800593c:	0800636e 	.word	0x0800636e

08005940 <memmove>:
 8005940:	4288      	cmp	r0, r1
 8005942:	b510      	push	{r4, lr}
 8005944:	eb01 0402 	add.w	r4, r1, r2
 8005948:	d902      	bls.n	8005950 <memmove+0x10>
 800594a:	4284      	cmp	r4, r0
 800594c:	4623      	mov	r3, r4
 800594e:	d807      	bhi.n	8005960 <memmove+0x20>
 8005950:	1e43      	subs	r3, r0, #1
 8005952:	42a1      	cmp	r1, r4
 8005954:	d008      	beq.n	8005968 <memmove+0x28>
 8005956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800595a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800595e:	e7f8      	b.n	8005952 <memmove+0x12>
 8005960:	4402      	add	r2, r0
 8005962:	4601      	mov	r1, r0
 8005964:	428a      	cmp	r2, r1
 8005966:	d100      	bne.n	800596a <memmove+0x2a>
 8005968:	bd10      	pop	{r4, pc}
 800596a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800596e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005972:	e7f7      	b.n	8005964 <memmove+0x24>

08005974 <_sbrk_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d06      	ldr	r5, [pc, #24]	@ (8005990 <_sbrk_r+0x1c>)
 8005978:	2300      	movs	r3, #0
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	f7ff fac2 	bl	8004f08 <_sbrk>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_sbrk_r+0x1a>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_sbrk_r+0x1a>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000778 	.word	0x20000778

08005994 <memcpy>:
 8005994:	440a      	add	r2, r1
 8005996:	4291      	cmp	r1, r2
 8005998:	f100 33ff 	add.w	r3, r0, #4294967295
 800599c:	d100      	bne.n	80059a0 <memcpy+0xc>
 800599e:	4770      	bx	lr
 80059a0:	b510      	push	{r4, lr}
 80059a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059aa:	4291      	cmp	r1, r2
 80059ac:	d1f9      	bne.n	80059a2 <memcpy+0xe>
 80059ae:	bd10      	pop	{r4, pc}

080059b0 <_realloc_r>:
 80059b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b4:	4680      	mov	r8, r0
 80059b6:	4615      	mov	r5, r2
 80059b8:	460c      	mov	r4, r1
 80059ba:	b921      	cbnz	r1, 80059c6 <_realloc_r+0x16>
 80059bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059c0:	4611      	mov	r1, r2
 80059c2:	f7ff bc4b 	b.w	800525c <_malloc_r>
 80059c6:	b92a      	cbnz	r2, 80059d4 <_realloc_r+0x24>
 80059c8:	f7ff fbdc 	bl	8005184 <_free_r>
 80059cc:	2400      	movs	r4, #0
 80059ce:	4620      	mov	r0, r4
 80059d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d4:	f000 f81a 	bl	8005a0c <_malloc_usable_size_r>
 80059d8:	4285      	cmp	r5, r0
 80059da:	4606      	mov	r6, r0
 80059dc:	d802      	bhi.n	80059e4 <_realloc_r+0x34>
 80059de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80059e2:	d8f4      	bhi.n	80059ce <_realloc_r+0x1e>
 80059e4:	4629      	mov	r1, r5
 80059e6:	4640      	mov	r0, r8
 80059e8:	f7ff fc38 	bl	800525c <_malloc_r>
 80059ec:	4607      	mov	r7, r0
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d0ec      	beq.n	80059cc <_realloc_r+0x1c>
 80059f2:	42b5      	cmp	r5, r6
 80059f4:	462a      	mov	r2, r5
 80059f6:	4621      	mov	r1, r4
 80059f8:	bf28      	it	cs
 80059fa:	4632      	movcs	r2, r6
 80059fc:	f7ff ffca 	bl	8005994 <memcpy>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4640      	mov	r0, r8
 8005a04:	f7ff fbbe 	bl	8005184 <_free_r>
 8005a08:	463c      	mov	r4, r7
 8005a0a:	e7e0      	b.n	80059ce <_realloc_r+0x1e>

08005a0c <_malloc_usable_size_r>:
 8005a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a10:	1f18      	subs	r0, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	bfbc      	itt	lt
 8005a16:	580b      	ldrlt	r3, [r1, r0]
 8005a18:	18c0      	addlt	r0, r0, r3
 8005a1a:	4770      	bx	lr
 8005a1c:	0000      	movs	r0, r0
	...

08005a20 <ceil>:
 8005a20:	ec51 0b10 	vmov	r0, r1, d0
 8005a24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005a30:	2e13      	cmp	r6, #19
 8005a32:	460c      	mov	r4, r1
 8005a34:	4605      	mov	r5, r0
 8005a36:	4680      	mov	r8, r0
 8005a38:	dc2e      	bgt.n	8005a98 <ceil+0x78>
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	da11      	bge.n	8005a62 <ceil+0x42>
 8005a3e:	a332      	add	r3, pc, #200	@ (adr r3, 8005b08 <ceil+0xe8>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f7fa fc22 	bl	800028c <__adddf3>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f7fb f864 	bl	8000b18 <__aeabi_dcmpgt>
 8005a50:	b120      	cbz	r0, 8005a5c <ceil+0x3c>
 8005a52:	2c00      	cmp	r4, #0
 8005a54:	db4f      	blt.n	8005af6 <ceil+0xd6>
 8005a56:	4325      	orrs	r5, r4
 8005a58:	d151      	bne.n	8005afe <ceil+0xde>
 8005a5a:	462c      	mov	r4, r5
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	e023      	b.n	8005aaa <ceil+0x8a>
 8005a62:	4f2b      	ldr	r7, [pc, #172]	@ (8005b10 <ceil+0xf0>)
 8005a64:	4137      	asrs	r7, r6
 8005a66:	ea01 0307 	and.w	r3, r1, r7
 8005a6a:	4303      	orrs	r3, r0
 8005a6c:	d01d      	beq.n	8005aaa <ceil+0x8a>
 8005a6e:	a326      	add	r3, pc, #152	@ (adr r3, 8005b08 <ceil+0xe8>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fc0a 	bl	800028c <__adddf3>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f7fb f84c 	bl	8000b18 <__aeabi_dcmpgt>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d0eb      	beq.n	8005a5c <ceil+0x3c>
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	bfc2      	ittt	gt
 8005a88:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8005a8c:	4133      	asrgt	r3, r6
 8005a8e:	18e4      	addgt	r4, r4, r3
 8005a90:	ea24 0407 	bic.w	r4, r4, r7
 8005a94:	2500      	movs	r5, #0
 8005a96:	e7e1      	b.n	8005a5c <ceil+0x3c>
 8005a98:	2e33      	cmp	r6, #51	@ 0x33
 8005a9a:	dd0a      	ble.n	8005ab2 <ceil+0x92>
 8005a9c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005aa0:	d103      	bne.n	8005aaa <ceil+0x8a>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	f7fa fbf1 	bl	800028c <__adddf3>
 8005aaa:	ec41 0b10 	vmov	d0, r0, r1
 8005aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005ab6:	f04f 37ff 	mov.w	r7, #4294967295
 8005aba:	40df      	lsrs	r7, r3
 8005abc:	4238      	tst	r0, r7
 8005abe:	d0f4      	beq.n	8005aaa <ceil+0x8a>
 8005ac0:	a311      	add	r3, pc, #68	@ (adr r3, 8005b08 <ceil+0xe8>)
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f7fa fbe1 	bl	800028c <__adddf3>
 8005aca:	2200      	movs	r2, #0
 8005acc:	2300      	movs	r3, #0
 8005ace:	f7fb f823 	bl	8000b18 <__aeabi_dcmpgt>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d0c2      	beq.n	8005a5c <ceil+0x3c>
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	dd0a      	ble.n	8005af0 <ceil+0xd0>
 8005ada:	2e14      	cmp	r6, #20
 8005adc:	d101      	bne.n	8005ae2 <ceil+0xc2>
 8005ade:	3401      	adds	r4, #1
 8005ae0:	e006      	b.n	8005af0 <ceil+0xd0>
 8005ae2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	40b3      	lsls	r3, r6
 8005aea:	441d      	add	r5, r3
 8005aec:	45a8      	cmp	r8, r5
 8005aee:	d8f6      	bhi.n	8005ade <ceil+0xbe>
 8005af0:	ea25 0507 	bic.w	r5, r5, r7
 8005af4:	e7b2      	b.n	8005a5c <ceil+0x3c>
 8005af6:	2500      	movs	r5, #0
 8005af8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005afc:	e7ae      	b.n	8005a5c <ceil+0x3c>
 8005afe:	4c05      	ldr	r4, [pc, #20]	@ (8005b14 <ceil+0xf4>)
 8005b00:	2500      	movs	r5, #0
 8005b02:	e7ab      	b.n	8005a5c <ceil+0x3c>
 8005b04:	f3af 8000 	nop.w
 8005b08:	8800759c 	.word	0x8800759c
 8005b0c:	7e37e43c 	.word	0x7e37e43c
 8005b10:	000fffff 	.word	0x000fffff
 8005b14:	3ff00000 	.word	0x3ff00000

08005b18 <_init>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr

08005b24 <_fini>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr
